// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.v0.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "frame.v0.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FrameV0Proto {

namespace {

const ::google::protobuf::Descriptor* ObstacleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box3DResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box3DResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameShuffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameShuffle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehicleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameSource_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_frame_2ev0_2eproto() {
  protobuf_AddDesc_frame_2ev0_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "frame.v0.proto");
  GOOGLE_CHECK(file != NULL);
  ObstacleResult_descriptor_ = file->message_type(0);
  static const int ObstacleResult_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, rect_sta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, rect_obs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, acc_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, ttc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, hmw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, in_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, vy_),
  };
  ObstacleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObstacleResult_descriptor_,
      ObstacleResult::default_instance_,
      ObstacleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObstacleResult));
  Box3DResult_descriptor_ = file->message_type(1);
  static const int Box3DResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, box_),
  };
  Box3DResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Box3DResult_descriptor_,
      Box3DResult::default_instance_,
      Box3DResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Box3DResult));
  SerializedData_descriptor_ = file->message_type(2);
  static const int SerializedData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, proto_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, proto_hex_string_),
  };
  SerializedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SerializedData_descriptor_,
      SerializedData::default_instance_,
      SerializedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SerializedData));
  Frame_descriptor_ = file->message_type(3);
  static const int Frame_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, img_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, can_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, vehiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, lanes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, fcw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, ldw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, can_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, imu_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, imu_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, gps_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, gps_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, freespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, motion_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, camera_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, pedestrians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, vehicle_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, lane_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, pedestrians_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, warning_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, odometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, camera_param_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, imu_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, obj_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, traffic_signs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, traffic_lights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, traffic_sign_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, parsing_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, depth_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, boxes_3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, skeletons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, boxes_3d_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, skeletons_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, highway_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, extra_info_),
  };
  Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Frame));
  FrameShuffle_descriptor_ = file->message_type(4);
  static const int FrameShuffle_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, img_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, gps_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, can_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, vehiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, lanes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, fcw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, ldw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, can_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, imu_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, imu_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, gps_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, freespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, motion_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, camera_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, pedestrians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, boxes_3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, skeletons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, parsing_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, vehicle_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, lane_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, pedestrians_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, obj_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, traffic_signs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, traffic_lights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, highway_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, warning_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, odometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, camera_param_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, imu_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, extra_info_),
  };
  FrameShuffle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameShuffle_descriptor_,
      FrameShuffle::default_instance_,
      FrameShuffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameShuffle));
  VehicleType_descriptor_ = file->enum_type(0);
  FrameSource_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_frame_2ev0_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObstacleResult_descriptor_, &ObstacleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Box3DResult_descriptor_, &Box3DResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SerializedData_descriptor_, &SerializedData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameShuffle_descriptor_, &FrameShuffle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_frame_2ev0_2eproto() {
  delete ObstacleResult::default_instance_;
  delete ObstacleResult_reflection_;
  delete Box3DResult::default_instance_;
  delete Box3DResult_reflection_;
  delete SerializedData::default_instance_;
  delete SerializedData_reflection_;
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete FrameShuffle::default_instance_;
  delete FrameShuffle_reflection_;
}

void protobuf_AddDesc_frame_2ev0_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonProto::protobuf_AddDesc_common_2eproto();
  ::CANProto::protobuf_AddDesc_can_2eproto();
  ::SensorProto::protobuf_AddDesc_sensor_2eproto();
  ::WarningProto::protobuf_AddDesc_warning_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016frame.v0.proto\022\014FrameV0Proto\032\014common.p"
    "roto\032\tcan.proto\032\014sensor.proto\032\rwarning.p"
    "roto\"\211\002\n\016ObstacleResult\022\n\n\002id\030\001 \002(\005\022\021\n\tl"
    "ife_time\030\002 \001(\005\022\013\n\003age\030\003 \001(\005\022#\n\010rect_sta\030"
    "\004 \002(\0132\021.CommonProto.Rect\022#\n\010rect_obs\030\005 \002"
    "(\0132\021.CommonProto.Rect\022\014\n\004conf\030\006 \001(\002\022\020\n\010a"
    "cc_conf\030\007 \001(\002\022\013\n\003ttc\030\010 \001(\002\022\013\n\003hmw\030\t \001(\002\022"
    "\014\n\004type\030\n \001(\005\022\017\n\007in_path\030\013 \001(\010\022\020\n\010distan"
    "ce\030\014 \001(\002\022\n\n\002vx\030\r \001(\002\022\n\n\002vy\030\016 \001(\002\":\n\013Box3"
    "DResult\022\n\n\002id\030\001 \002(\005\022\037\n\003box\030\002 \002(\0132\022.Commo"
    "nProto.Box3D\">\n\016SerializedData\022\022\n\nproto_"
    "name\030\001 \002(\t\022\030\n\020proto_hex_string\030\002 \001(\t\"\376\014\n"
    "\005Frame\022\017\n\007version\030\001 \001(\005\022\020\n\010frame_id\030\002 \001("
    "\005\022)\n\006camera\030\003 \001(\0132\031.CommonProto.CameraMa"
    "trix\022%\n\timg_frame\030\004 \001(\0132\022.CommonProto.Im"
    "age\022&\n\ncan_frames\030\005 \001(\0132\022.CANProto.CANFr"
    "ame\022-\n\007vehiles\030\006 \003(\0132\034.FrameV0Proto.Obst"
    "acleResult\022 \n\005lanes\030\007 \003(\0132\021.CommonProto."
    "Line\022\036\n\003fcw\030\010 \001(\0132\021.WarningProto.FCW\022\036\n\003"
    "ldw\030\t \001(\0132\021.WarningProto.LDW\022-\n\016can_fram"
    "es_raw\030\n \003(\0132\025.CANProto.CANFrameRaw\022(\n\ti"
    "mu_frame\030\013 \001(\0132\025.SensorProto.IMUFrame\022-\n"
    "\016imu_frames_raw\030\014 \003(\0132\025.SensorProto.IMUF"
    "rame\022(\n\tgps_frame\030\r \001(\0132\025.SensorProto.GP"
    "SFrame\0220\n\016gps_frames_raw\030\016 \003(\0132\030.SensorP"
    "roto.GPSFrameRaw\022/\n\tfreespace\030\017 \003(\0132\034.Co"
    "mmonProto.FreeSpaceResult\022)\n\006source\030\020 \001("
    "\0162\031.FrameV0Proto.FrameSource\022.\n\014motion_f"
    "rame\030\021 \001(\0132\030.CommonProto.MotionFrame\022.\n\014"
    "camera_param\030\022 \001(\0132\030.CommonProto.CameraP"
    "aram\0221\n\013pedestrians\030\023 \003(\0132\034.FrameV0Proto"
    ".ObstacleResult\022-\n\013vehicle_raw\030\024 \003(\0132\030.C"
    "ommonProto.ObstacleRaw\022*\n\010lane_raw\030\025 \003(\013"
    "2\030.CommonProto.ObstacleRaw\0221\n\017pedestrian"
    "s_raw\030\026 \003(\0132\030.CommonProto.ObstacleRaw\0223\n"
    "\016warning_result\030\027 \001(\0132\033.WarningProto.War"
    "ningResult\022,\n\010odometry\030\030 \001(\0132\032.CommonPro"
    "to.OdometryFrame\0226\n\024camera_param_default"
    "\030\031 \001(\0132\030.CommonProto.CameraParam\022)\n\nimu_"
    "offset\030\032 \001(\0132\025.SensorProto.IMUFrame\022)\n\007o"
    "bj_raw\030\033 \003(\0132\030.CommonProto.ObstacleRaw\0223"
    "\n\rtraffic_signs\030\034 \003(\0132\034.FrameV0Proto.Obs"
    "tacleResult\0224\n\016traffic_lights\030\035 \003(\0132\034.Fr"
    "ameV0Proto.ObstacleResult\022\032\n\022traffic_sig"
    "n_types\030\036 \003(\005\022)\n\rparsing_frame\030\037 \001(\0132\022.C"
    "ommonProto.Image\022\'\n\013depth_frame\030  \001(\0132\022."
    "CommonProto.Image\022+\n\010boxes_3d\030! \003(\0132\031.Fr"
    "ameV0Proto.Box3DResult\022(\n\tskeletons\030\" \003("
    "\0132\025.CommonProto.Skeleton\022+\n\014boxes_3d_raw"
    "\030# \003(\0132\025.CommonProto.Box3DRaw\022/\n\rskeleto"
    "ns_raw\030$ \003(\0132\030.CommonProto.SkeletonRaw\0222"
    "\n\016highway_locate\030% \001(\0132\032.CommonProto.Hig"
    "hwayLocate\0221\n\nextra_info\030\200\010 \003(\0132\034.FrameV"
    "0Proto.SerializedData\"\344\013\n\014FrameShuffle\022\017"
    "\n\007version\030\001 \001(\005\022\020\n\010frame_id\030\002 \001(\005\022%\n\timg"
    "_frame\030\004 \001(\0132\022.CommonProto.Image\022(\n\tgps_"
    "frame\030\r \001(\0132\025.SensorProto.GPSFrame\022)\n\006ca"
    "mera\030\021 \001(\0132\031.CommonProto.CameraMatrix\022&\n"
    "\ncan_frames\030\013 \001(\0132\022.CANProto.CANFrame\022-\n"
    "\007vehiles\030\t \003(\0132\034.FrameV0Proto.ObstacleRe"
    "sult\022 \n\005lanes\030\031 \003(\0132\021.CommonProto.Line\022\036"
    "\n\003fcw\030\030 \001(\0132\021.WarningProto.FCW\022\036\n\003ldw\030\027 "
    "\001(\0132\021.WarningProto.LDW\022-\n\016can_frames_raw"
    "\030\024 \003(\0132\025.CANProto.CANFrameRaw\022(\n\timu_fra"
    "me\030\003 \001(\0132\025.SensorProto.IMUFrame\022-\n\016imu_f"
    "rames_raw\030\010 \003(\0132\025.SensorProto.IMUFrame\0220"
    "\n\016gps_frames_raw\030\006 \003(\0132\030.SensorProto.GPS"
    "FrameRaw\022/\n\tfreespace\030\n \003(\0132\034.CommonProt"
    "o.FreeSpaceResult\022)\n\006source\030\007 \001(\0162\031.Fram"
    "eV0Proto.FrameSource\022.\n\014motion_frame\030\022 \001"
    "(\0132\030.CommonProto.MotionFrame\022.\n\014camera_p"
    "aram\030\023 \001(\0132\030.CommonProto.CameraParam\0221\n\013"
    "pedestrians\030\005 \003(\0132\034.FrameV0Proto.Obstacl"
    "eResult\022+\n\010boxes_3d\030\034 \003(\0132\031.FrameV0Proto"
    ".Box3DResult\022(\n\tskeletons\030\035 \003(\0132\025.Common"
    "Proto.Skeleton\022)\n\rparsing_frame\030\036 \001(\0132\022."
    "CommonProto.Image\022-\n\013vehicle_raw\030\020 \003(\0132\030"
    ".CommonProto.ObstacleRaw\022*\n\010lane_raw\030\017 \003"
    "(\0132\030.CommonProto.ObstacleRaw\0221\n\017pedestri"
    "ans_raw\030\016 \003(\0132\030.CommonProto.ObstacleRaw\022"
    ")\n\007obj_raw\030\033 \003(\0132\030.CommonProto.ObstacleR"
    "aw\0224\n\rtraffic_signs\030\350\007 \003(\0132\034.FrameV0Prot"
    "o.ObstacleResult\0225\n\016traffic_lights\030\351\007 \003("
    "\0132\034.FrameV0Proto.ObstacleResult\0223\n\016highw"
    "ay_locate\030\352\007 \001(\0132\032.CommonProto.HighwayLo"
    "cate\0223\n\016warning_result\030\025 \001(\0132\033.WarningPr"
    "oto.WarningResult\022,\n\010odometry\030\026 \001(\0132\032.Co"
    "mmonProto.OdometryFrame\0226\n\024camera_param_"
    "default\030\014 \001(\0132\030.CommonProto.CameraParam\022"
    ")\n\nimu_offset\030$ \001(\0132\025.SensorProto.IMUFra"
    "me\0220\n\nextra_info\030e \003(\0132\034.FrameV0Proto.Se"
    "rializedData*R\n\013VehicleType\022\025\n\021VEHICLE_T"
    "YPE_NONE\020\000\022\025\n\021VEHICLE_TYPE_REAR\020\001\022\025\n\021VEH"
    "ICLE_TYPE_SIDE\020\002*8\n\013FrameSource\022\024\n\020Frame"
    "Source_FPGA\020\000\022\023\n\017FrameSource_SOC\020\001", 3794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frame.v0.proto", &protobuf_RegisterTypes);
  ObstacleResult::default_instance_ = new ObstacleResult();
  Box3DResult::default_instance_ = new Box3DResult();
  SerializedData::default_instance_ = new SerializedData();
  Frame::default_instance_ = new Frame();
  FrameShuffle::default_instance_ = new FrameShuffle();
  ObstacleResult::default_instance_->InitAsDefaultInstance();
  Box3DResult::default_instance_->InitAsDefaultInstance();
  SerializedData::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  FrameShuffle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_frame_2ev0_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_frame_2ev0_2eproto {
  StaticDescriptorInitializer_frame_2ev0_2eproto() {
    protobuf_AddDesc_frame_2ev0_2eproto();
  }
} static_descriptor_initializer_frame_2ev0_2eproto_;
const ::google::protobuf::EnumDescriptor* VehicleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleType_descriptor_;
}
bool VehicleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FrameSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameSource_descriptor_;
}
bool FrameSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ObstacleResult::kIdFieldNumber;
const int ObstacleResult::kLifeTimeFieldNumber;
const int ObstacleResult::kAgeFieldNumber;
const int ObstacleResult::kRectStaFieldNumber;
const int ObstacleResult::kRectObsFieldNumber;
const int ObstacleResult::kConfFieldNumber;
const int ObstacleResult::kAccConfFieldNumber;
const int ObstacleResult::kTtcFieldNumber;
const int ObstacleResult::kHmwFieldNumber;
const int ObstacleResult::kTypeFieldNumber;
const int ObstacleResult::kInPathFieldNumber;
const int ObstacleResult::kDistanceFieldNumber;
const int ObstacleResult::kVxFieldNumber;
const int ObstacleResult::kVyFieldNumber;
#endif  // !_MSC_VER

ObstacleResult::ObstacleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV0Proto.ObstacleResult)
}

void ObstacleResult::InitAsDefaultInstance() {
  rect_sta_ = const_cast< ::CommonProto::Rect*>(&::CommonProto::Rect::default_instance());
  rect_obs_ = const_cast< ::CommonProto::Rect*>(&::CommonProto::Rect::default_instance());
}

ObstacleResult::ObstacleResult(const ObstacleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV0Proto.ObstacleResult)
}

void ObstacleResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  life_time_ = 0;
  age_ = 0;
  rect_sta_ = NULL;
  rect_obs_ = NULL;
  conf_ = 0;
  acc_conf_ = 0;
  ttc_ = 0;
  hmw_ = 0;
  type_ = 0;
  in_path_ = false;
  distance_ = 0;
  vx_ = 0;
  vy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleResult::~ObstacleResult() {
  // @@protoc_insertion_point(destructor:FrameV0Proto.ObstacleResult)
  SharedDtor();
}

void ObstacleResult::SharedDtor() {
  if (this != default_instance_) {
    delete rect_sta_;
    delete rect_obs_;
  }
}

void ObstacleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleResult_descriptor_;
}

const ObstacleResult& ObstacleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev0_2eproto();
  return *default_instance_;
}

ObstacleResult* ObstacleResult::default_instance_ = NULL;

ObstacleResult* ObstacleResult::New() const {
  return new ObstacleResult;
}

void ObstacleResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ObstacleResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, life_time_);
    ZR_(age_, conf_);
    ZR_(acc_conf_, ttc_);
    if (has_rect_sta()) {
      if (rect_sta_ != NULL) rect_sta_->::CommonProto::Rect::Clear();
    }
    if (has_rect_obs()) {
      if (rect_obs_ != NULL) rect_obs_->::CommonProto::Rect::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(hmw_, vy_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObstacleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV0Proto.ObstacleResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_life_time;
        break;
      }

      // optional int32 life_time = 2;
      case 2: {
        if (tag == 16) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_age;
        break;
      }

      // optional int32 age = 3;
      case 3: {
        if (tag == 24) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rect_sta;
        break;
      }

      // required .CommonProto.Rect rect_sta = 4;
      case 4: {
        if (tag == 34) {
         parse_rect_sta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_sta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rect_obs;
        break;
      }

      // required .CommonProto.Rect rect_obs = 5;
      case 5: {
        if (tag == 42) {
         parse_rect_obs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_obs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_conf;
        break;
      }

      // optional float conf = 6;
      case 6: {
        if (tag == 53) {
         parse_conf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
          set_has_conf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_acc_conf;
        break;
      }

      // optional float acc_conf = 7;
      case 7: {
        if (tag == 61) {
         parse_acc_conf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_conf_)));
          set_has_acc_conf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_ttc;
        break;
      }

      // optional float ttc = 8;
      case 8: {
        if (tag == 69) {
         parse_ttc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttc_)));
          set_has_ttc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_hmw;
        break;
      }

      // optional float hmw = 9;
      case 9: {
        if (tag == 77) {
         parse_hmw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hmw_)));
          set_has_hmw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional int32 type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_in_path;
        break;
      }

      // optional bool in_path = 11;
      case 11: {
        if (tag == 88) {
         parse_in_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_path_)));
          set_has_in_path();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_distance;
        break;
      }

      // optional float distance = 12;
      case 12: {
        if (tag == 101) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_vx;
        break;
      }

      // optional float vx = 13;
      case 13: {
        if (tag == 109) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_vy;
        break;
      }

      // optional float vy = 14;
      case 14: {
        if (tag == 117) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV0Proto.ObstacleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV0Proto.ObstacleResult)
  return false;
#undef DO_
}

void ObstacleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV0Proto.ObstacleResult)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 life_time = 2;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->life_time(), output);
  }

  // optional int32 age = 3;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  // required .CommonProto.Rect rect_sta = 4;
  if (has_rect_sta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rect_sta(), output);
  }

  // required .CommonProto.Rect rect_obs = 5;
  if (has_rect_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rect_obs(), output);
  }

  // optional float conf = 6;
  if (has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->conf(), output);
  }

  // optional float acc_conf = 7;
  if (has_acc_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->acc_conf(), output);
  }

  // optional float ttc = 8;
  if (has_ttc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ttc(), output);
  }

  // optional float hmw = 9;
  if (has_hmw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hmw(), output);
  }

  // optional int32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->type(), output);
  }

  // optional bool in_path = 11;
  if (has_in_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->in_path(), output);
  }

  // optional float distance = 12;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->distance(), output);
  }

  // optional float vx = 13;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->vx(), output);
  }

  // optional float vy = 14;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->vy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV0Proto.ObstacleResult)
}

::google::protobuf::uint8* ObstacleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV0Proto.ObstacleResult)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 life_time = 2;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->life_time(), target);
  }

  // optional int32 age = 3;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }

  // required .CommonProto.Rect rect_sta = 4;
  if (has_rect_sta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rect_sta(), target);
  }

  // required .CommonProto.Rect rect_obs = 5;
  if (has_rect_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rect_obs(), target);
  }

  // optional float conf = 6;
  if (has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->conf(), target);
  }

  // optional float acc_conf = 7;
  if (has_acc_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->acc_conf(), target);
  }

  // optional float ttc = 8;
  if (has_ttc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ttc(), target);
  }

  // optional float hmw = 9;
  if (has_hmw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hmw(), target);
  }

  // optional int32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->type(), target);
  }

  // optional bool in_path = 11;
  if (has_in_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->in_path(), target);
  }

  // optional float distance = 12;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->distance(), target);
  }

  // optional float vx = 13;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->vx(), target);
  }

  // optional float vy = 14;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->vy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV0Proto.ObstacleResult)
  return target;
}

int ObstacleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 life_time = 2;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life_time());
    }

    // optional int32 age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // required .CommonProto.Rect rect_sta = 4;
    if (has_rect_sta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_sta());
    }

    // required .CommonProto.Rect rect_obs = 5;
    if (has_rect_obs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_obs());
    }

    // optional float conf = 6;
    if (has_conf()) {
      total_size += 1 + 4;
    }

    // optional float acc_conf = 7;
    if (has_acc_conf()) {
      total_size += 1 + 4;
    }

    // optional float ttc = 8;
    if (has_ttc()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float hmw = 9;
    if (has_hmw()) {
      total_size += 1 + 4;
    }

    // optional int32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool in_path = 11;
    if (has_in_path()) {
      total_size += 1 + 1;
    }

    // optional float distance = 12;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional float vx = 13;
    if (has_vx()) {
      total_size += 1 + 4;
    }

    // optional float vy = 14;
    if (has_vy()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObstacleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObstacleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObstacleResult::MergeFrom(const ObstacleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_rect_sta()) {
      mutable_rect_sta()->::CommonProto::Rect::MergeFrom(from.rect_sta());
    }
    if (from.has_rect_obs()) {
      mutable_rect_obs()->::CommonProto::Rect::MergeFrom(from.rect_obs());
    }
    if (from.has_conf()) {
      set_conf(from.conf());
    }
    if (from.has_acc_conf()) {
      set_acc_conf(from.acc_conf());
    }
    if (from.has_ttc()) {
      set_ttc(from.ttc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hmw()) {
      set_hmw(from.hmw());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_in_path()) {
      set_in_path(from.in_path());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObstacleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleResult::CopyFrom(const ObstacleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  if (has_rect_sta()) {
    if (!this->rect_sta().IsInitialized()) return false;
  }
  if (has_rect_obs()) {
    if (!this->rect_obs().IsInitialized()) return false;
  }
  return true;
}

void ObstacleResult::Swap(ObstacleResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(life_time_, other->life_time_);
    std::swap(age_, other->age_);
    std::swap(rect_sta_, other->rect_sta_);
    std::swap(rect_obs_, other->rect_obs_);
    std::swap(conf_, other->conf_);
    std::swap(acc_conf_, other->acc_conf_);
    std::swap(ttc_, other->ttc_);
    std::swap(hmw_, other->hmw_);
    std::swap(type_, other->type_);
    std::swap(in_path_, other->in_path_);
    std::swap(distance_, other->distance_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObstacleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleResult_descriptor_;
  metadata.reflection = ObstacleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Box3DResult::kIdFieldNumber;
const int Box3DResult::kBoxFieldNumber;
#endif  // !_MSC_VER

Box3DResult::Box3DResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV0Proto.Box3DResult)
}

void Box3DResult::InitAsDefaultInstance() {
  box_ = const_cast< ::CommonProto::Box3D*>(&::CommonProto::Box3D::default_instance());
}

Box3DResult::Box3DResult(const Box3DResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV0Proto.Box3DResult)
}

void Box3DResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  box_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Box3DResult::~Box3DResult() {
  // @@protoc_insertion_point(destructor:FrameV0Proto.Box3DResult)
  SharedDtor();
}

void Box3DResult::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void Box3DResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box3DResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box3DResult_descriptor_;
}

const Box3DResult& Box3DResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev0_2eproto();
  return *default_instance_;
}

Box3DResult* Box3DResult::default_instance_ = NULL;

Box3DResult* Box3DResult::New() const {
  return new Box3DResult;
}

void Box3DResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_box()) {
      if (box_ != NULL) box_->::CommonProto::Box3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Box3DResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV0Proto.Box3DResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // required .CommonProto.Box3D box = 2;
      case 2: {
        if (tag == 18) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV0Proto.Box3DResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV0Proto.Box3DResult)
  return false;
#undef DO_
}

void Box3DResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV0Proto.Box3DResult)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .CommonProto.Box3D box = 2;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->box(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV0Proto.Box3DResult)
}

::google::protobuf::uint8* Box3DResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV0Proto.Box3DResult)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .CommonProto.Box3D box = 2;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->box(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV0Proto.Box3DResult)
  return target;
}

int Box3DResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .CommonProto.Box3D box = 2;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box3DResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Box3DResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Box3DResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Box3DResult::MergeFrom(const Box3DResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_box()) {
      mutable_box()->::CommonProto::Box3D::MergeFrom(from.box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Box3DResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3DResult::CopyFrom(const Box3DResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3DResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  return true;
}

void Box3DResult::Swap(Box3DResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(box_, other->box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Box3DResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box3DResult_descriptor_;
  metadata.reflection = Box3DResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SerializedData::kProtoNameFieldNumber;
const int SerializedData::kProtoHexStringFieldNumber;
#endif  // !_MSC_VER

SerializedData::SerializedData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV0Proto.SerializedData)
}

void SerializedData::InitAsDefaultInstance() {
}

SerializedData::SerializedData(const SerializedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV0Proto.SerializedData)
}

void SerializedData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  proto_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_hex_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerializedData::~SerializedData() {
  // @@protoc_insertion_point(destructor:FrameV0Proto.SerializedData)
  SharedDtor();
}

void SerializedData::SharedDtor() {
  if (proto_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proto_name_;
  }
  if (proto_hex_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proto_hex_string_;
  }
  if (this != default_instance_) {
  }
}

void SerializedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedData_descriptor_;
}

const SerializedData& SerializedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev0_2eproto();
  return *default_instance_;
}

SerializedData* SerializedData::default_instance_ = NULL;

SerializedData* SerializedData::New() const {
  return new SerializedData;
}

void SerializedData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_proto_name()) {
      if (proto_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proto_name_->clear();
      }
    }
    if (has_proto_hex_string()) {
      if (proto_hex_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proto_hex_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SerializedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV0Proto.SerializedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string proto_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_name().data(), this->proto_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proto_hex_string;
        break;
      }

      // optional string proto_hex_string = 2;
      case 2: {
        if (tag == 18) {
         parse_proto_hex_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_hex_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_hex_string().data(), this->proto_hex_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_hex_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV0Proto.SerializedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV0Proto.SerializedData)
  return false;
#undef DO_
}

void SerializedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV0Proto.SerializedData)
  // required string proto_name = 1;
  if (has_proto_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_name().data(), this->proto_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proto_name(), output);
  }

  // optional string proto_hex_string = 2;
  if (has_proto_hex_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_hex_string().data(), this->proto_hex_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_hex_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto_hex_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV0Proto.SerializedData)
}

::google::protobuf::uint8* SerializedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV0Proto.SerializedData)
  // required string proto_name = 1;
  if (has_proto_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_name().data(), this->proto_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proto_name(), target);
  }

  // optional string proto_hex_string = 2;
  if (has_proto_hex_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_hex_string().data(), this->proto_hex_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_hex_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto_hex_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV0Proto.SerializedData)
  return target;
}

int SerializedData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string proto_name = 1;
    if (has_proto_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_name());
    }

    // optional string proto_hex_string = 2;
    if (has_proto_hex_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_hex_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SerializedData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SerializedData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SerializedData::MergeFrom(const SerializedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_name()) {
      set_proto_name(from.proto_name());
    }
    if (from.has_proto_hex_string()) {
      set_proto_hex_string(from.proto_hex_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SerializedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedData::CopyFrom(const SerializedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SerializedData::Swap(SerializedData* other) {
  if (other != this) {
    std::swap(proto_name_, other->proto_name_);
    std::swap(proto_hex_string_, other->proto_hex_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SerializedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedData_descriptor_;
  metadata.reflection = SerializedData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Frame::kVersionFieldNumber;
const int Frame::kFrameIdFieldNumber;
const int Frame::kCameraFieldNumber;
const int Frame::kImgFrameFieldNumber;
const int Frame::kCanFramesFieldNumber;
const int Frame::kVehilesFieldNumber;
const int Frame::kLanesFieldNumber;
const int Frame::kFcwFieldNumber;
const int Frame::kLdwFieldNumber;
const int Frame::kCanFramesRawFieldNumber;
const int Frame::kImuFrameFieldNumber;
const int Frame::kImuFramesRawFieldNumber;
const int Frame::kGpsFrameFieldNumber;
const int Frame::kGpsFramesRawFieldNumber;
const int Frame::kFreespaceFieldNumber;
const int Frame::kSourceFieldNumber;
const int Frame::kMotionFrameFieldNumber;
const int Frame::kCameraParamFieldNumber;
const int Frame::kPedestriansFieldNumber;
const int Frame::kVehicleRawFieldNumber;
const int Frame::kLaneRawFieldNumber;
const int Frame::kPedestriansRawFieldNumber;
const int Frame::kWarningResultFieldNumber;
const int Frame::kOdometryFieldNumber;
const int Frame::kCameraParamDefaultFieldNumber;
const int Frame::kImuOffsetFieldNumber;
const int Frame::kObjRawFieldNumber;
const int Frame::kTrafficSignsFieldNumber;
const int Frame::kTrafficLightsFieldNumber;
const int Frame::kTrafficSignTypesFieldNumber;
const int Frame::kParsingFrameFieldNumber;
const int Frame::kDepthFrameFieldNumber;
const int Frame::kBoxes3DFieldNumber;
const int Frame::kSkeletonsFieldNumber;
const int Frame::kBoxes3DRawFieldNumber;
const int Frame::kSkeletonsRawFieldNumber;
const int Frame::kHighwayLocateFieldNumber;
const int Frame::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

Frame::Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV0Proto.Frame)
}

void Frame::InitAsDefaultInstance() {
  camera_ = const_cast< ::CommonProto::CameraMatrix*>(&::CommonProto::CameraMatrix::default_instance());
  img_frame_ = const_cast< ::CommonProto::Image*>(&::CommonProto::Image::default_instance());
  can_frames_ = const_cast< ::CANProto::CANFrame*>(&::CANProto::CANFrame::default_instance());
  fcw_ = const_cast< ::WarningProto::FCW*>(&::WarningProto::FCW::default_instance());
  ldw_ = const_cast< ::WarningProto::LDW*>(&::WarningProto::LDW::default_instance());
  imu_frame_ = const_cast< ::SensorProto::IMUFrame*>(&::SensorProto::IMUFrame::default_instance());
  gps_frame_ = const_cast< ::SensorProto::GPSFrame*>(&::SensorProto::GPSFrame::default_instance());
  motion_frame_ = const_cast< ::CommonProto::MotionFrame*>(&::CommonProto::MotionFrame::default_instance());
  camera_param_ = const_cast< ::CommonProto::CameraParam*>(&::CommonProto::CameraParam::default_instance());
  warning_result_ = const_cast< ::WarningProto::WarningResult*>(&::WarningProto::WarningResult::default_instance());
  odometry_ = const_cast< ::CommonProto::OdometryFrame*>(&::CommonProto::OdometryFrame::default_instance());
  camera_param_default_ = const_cast< ::CommonProto::CameraParam*>(&::CommonProto::CameraParam::default_instance());
  imu_offset_ = const_cast< ::SensorProto::IMUFrame*>(&::SensorProto::IMUFrame::default_instance());
  parsing_frame_ = const_cast< ::CommonProto::Image*>(&::CommonProto::Image::default_instance());
  depth_frame_ = const_cast< ::CommonProto::Image*>(&::CommonProto::Image::default_instance());
  highway_locate_ = const_cast< ::CommonProto::HighwayLocate*>(&::CommonProto::HighwayLocate::default_instance());
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV0Proto.Frame)
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  frame_id_ = 0;
  camera_ = NULL;
  img_frame_ = NULL;
  can_frames_ = NULL;
  fcw_ = NULL;
  ldw_ = NULL;
  imu_frame_ = NULL;
  gps_frame_ = NULL;
  source_ = 0;
  motion_frame_ = NULL;
  camera_param_ = NULL;
  warning_result_ = NULL;
  odometry_ = NULL;
  camera_param_default_ = NULL;
  imu_offset_ = NULL;
  parsing_frame_ = NULL;
  depth_frame_ = NULL;
  highway_locate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:FrameV0Proto.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != default_instance_) {
    delete camera_;
    delete img_frame_;
    delete can_frames_;
    delete fcw_;
    delete ldw_;
    delete imu_frame_;
    delete gps_frame_;
    delete motion_frame_;
    delete camera_param_;
    delete warning_result_;
    delete odometry_;
    delete camera_param_default_;
    delete imu_offset_;
    delete parsing_frame_;
    delete depth_frame_;
    delete highway_locate_;
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev0_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New() const {
  return new Frame;
}

void Frame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Frame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(version_, frame_id_);
    if (has_camera()) {
      if (camera_ != NULL) camera_->::CommonProto::CameraMatrix::Clear();
    }
    if (has_img_frame()) {
      if (img_frame_ != NULL) img_frame_->::CommonProto::Image::Clear();
    }
    if (has_can_frames()) {
      if (can_frames_ != NULL) can_frames_->::CANProto::CANFrame::Clear();
    }
    if (has_fcw()) {
      if (fcw_ != NULL) fcw_->::WarningProto::FCW::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 38144) {
    if (has_ldw()) {
      if (ldw_ != NULL) ldw_->::WarningProto::LDW::Clear();
    }
    if (has_imu_frame()) {
      if (imu_frame_ != NULL) imu_frame_->::SensorProto::IMUFrame::Clear();
    }
    if (has_gps_frame()) {
      if (gps_frame_ != NULL) gps_frame_->::SensorProto::GPSFrame::Clear();
    }
    source_ = 0;
  }
  if (_has_bits_[16 / 32] & 12779520) {
    if (has_motion_frame()) {
      if (motion_frame_ != NULL) motion_frame_->::CommonProto::MotionFrame::Clear();
    }
    if (has_camera_param()) {
      if (camera_param_ != NULL) camera_param_->::CommonProto::CameraParam::Clear();
    }
    if (has_warning_result()) {
      if (warning_result_ != NULL) warning_result_->::WarningProto::WarningResult::Clear();
    }
    if (has_odometry()) {
      if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 3271557120) {
    if (has_camera_param_default()) {
      if (camera_param_default_ != NULL) camera_param_default_->::CommonProto::CameraParam::Clear();
    }
    if (has_imu_offset()) {
      if (imu_offset_ != NULL) imu_offset_->::SensorProto::IMUFrame::Clear();
    }
    if (has_parsing_frame()) {
      if (parsing_frame_ != NULL) parsing_frame_->::CommonProto::Image::Clear();
    }
    if (has_depth_frame()) {
      if (depth_frame_ != NULL) depth_frame_->::CommonProto::Image::Clear();
    }
  }
  if (has_highway_locate()) {
    if (highway_locate_ != NULL) highway_locate_->::CommonProto::HighwayLocate::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  vehiles_.Clear();
  lanes_.Clear();
  can_frames_raw_.Clear();
  imu_frames_raw_.Clear();
  gps_frames_raw_.Clear();
  freespace_.Clear();
  pedestrians_.Clear();
  vehicle_raw_.Clear();
  lane_raw_.Clear();
  pedestrians_raw_.Clear();
  obj_raw_.Clear();
  traffic_signs_.Clear();
  traffic_lights_.Clear();
  traffic_sign_types_.Clear();
  boxes_3d_.Clear();
  skeletons_.Clear();
  boxes_3d_raw_.Clear();
  skeletons_raw_.Clear();
  extra_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV0Proto.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_id;
        break;
      }

      // optional int32 frame_id = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_camera;
        break;
      }

      // optional .CommonProto.CameraMatrix camera = 3;
      case 3: {
        if (tag == 26) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img_frame;
        break;
      }

      // optional .CommonProto.Image img_frame = 4;
      case 4: {
        if (tag == 34) {
         parse_img_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_can_frames;
        break;
      }

      // optional .CANProto.CANFrame can_frames = 5;
      case 5: {
        if (tag == 42) {
         parse_can_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_can_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vehiles;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult vehiles = 6;
      case 6: {
        if (tag == 50) {
         parse_vehiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehiles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vehiles;
        if (input->ExpectTag(58)) goto parse_lanes;
        break;
      }

      // repeated .CommonProto.Line lanes = 7;
      case 7: {
        if (tag == 58) {
         parse_lanes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_lanes;
        if (input->ExpectTag(66)) goto parse_fcw;
        break;
      }

      // optional .WarningProto.FCW fcw = 8;
      case 8: {
        if (tag == 66) {
         parse_fcw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ldw;
        break;
      }

      // optional .WarningProto.LDW ldw = 9;
      case 9: {
        if (tag == 74) {
         parse_ldw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ldw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_can_frames_raw;
        break;
      }

      // repeated .CANProto.CANFrameRaw can_frames_raw = 10;
      case 10: {
        if (tag == 82) {
         parse_can_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_can_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_can_frames_raw;
        if (input->ExpectTag(90)) goto parse_imu_frame;
        break;
      }

      // optional .SensorProto.IMUFrame imu_frame = 11;
      case 11: {
        if (tag == 90) {
         parse_imu_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_imu_frames_raw;
        break;
      }

      // repeated .SensorProto.IMUFrame imu_frames_raw = 12;
      case 12: {
        if (tag == 98) {
         parse_imu_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imu_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_imu_frames_raw;
        if (input->ExpectTag(106)) goto parse_gps_frame;
        break;
      }

      // optional .SensorProto.GPSFrame gps_frame = 13;
      case 13: {
        if (tag == 106) {
         parse_gps_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_gps_frames_raw;
        break;
      }

      // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 14;
      case 14: {
        if (tag == 114) {
         parse_gps_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gps_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_gps_frames_raw;
        if (input->ExpectTag(122)) goto parse_freespace;
        break;
      }

      // repeated .CommonProto.FreeSpaceResult freespace = 15;
      case 15: {
        if (tag == 122) {
         parse_freespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freespace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_freespace;
        if (input->ExpectTag(128)) goto parse_source;
        break;
      }

      // optional .FrameV0Proto.FrameSource source = 16;
      case 16: {
        if (tag == 128) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FrameV0Proto::FrameSource_IsValid(value)) {
            set_source(static_cast< ::FrameV0Proto::FrameSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_motion_frame;
        break;
      }

      // optional .CommonProto.MotionFrame motion_frame = 17;
      case 17: {
        if (tag == 138) {
         parse_motion_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_camera_param;
        break;
      }

      // optional .CommonProto.CameraParam camera_param = 18;
      case 18: {
        if (tag == 146) {
         parse_camera_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_pedestrians;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult pedestrians = 19;
      case 19: {
        if (tag == 154) {
         parse_pedestrians:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pedestrians()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_pedestrians;
        if (input->ExpectTag(162)) goto parse_vehicle_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw vehicle_raw = 20;
      case 20: {
        if (tag == 162) {
         parse_vehicle_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehicle_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_vehicle_raw;
        if (input->ExpectTag(170)) goto parse_lane_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw lane_raw = 21;
      case 21: {
        if (tag == 170) {
         parse_lane_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_lane_raw;
        if (input->ExpectTag(178)) goto parse_pedestrians_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw pedestrians_raw = 22;
      case 22: {
        if (tag == 178) {
         parse_pedestrians_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pedestrians_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_pedestrians_raw;
        if (input->ExpectTag(186)) goto parse_warning_result;
        break;
      }

      // optional .WarningProto.WarningResult warning_result = 23;
      case 23: {
        if (tag == 186) {
         parse_warning_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warning_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_odometry;
        break;
      }

      // optional .CommonProto.OdometryFrame odometry = 24;
      case 24: {
        if (tag == 194) {
         parse_odometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_camera_param_default;
        break;
      }

      // optional .CommonProto.CameraParam camera_param_default = 25;
      case 25: {
        if (tag == 202) {
         parse_camera_param_default:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_param_default()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_imu_offset;
        break;
      }

      // optional .SensorProto.IMUFrame imu_offset = 26;
      case 26: {
        if (tag == 210) {
         parse_imu_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_obj_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw obj_raw = 27;
      case 27: {
        if (tag == 218) {
         parse_obj_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_obj_raw;
        if (input->ExpectTag(226)) goto parse_traffic_signs;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult traffic_signs = 28;
      case 28: {
        if (tag == 226) {
         parse_traffic_signs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_signs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_traffic_signs;
        if (input->ExpectTag(234)) goto parse_traffic_lights;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult traffic_lights = 29;
      case 29: {
        if (tag == 234) {
         parse_traffic_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_lights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_traffic_lights;
        if (input->ExpectTag(240)) goto parse_traffic_sign_types;
        break;
      }

      // repeated int32 traffic_sign_types = 30;
      case 30: {
        if (tag == 240) {
         parse_traffic_sign_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 240, input, this->mutable_traffic_sign_types())));
        } else if (tag == 242) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_traffic_sign_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_traffic_sign_types;
        if (input->ExpectTag(250)) goto parse_parsing_frame;
        break;
      }

      // optional .CommonProto.Image parsing_frame = 31;
      case 31: {
        if (tag == 250) {
         parse_parsing_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsing_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_depth_frame;
        break;
      }

      // optional .CommonProto.Image depth_frame = 32;
      case 32: {
        if (tag == 258) {
         parse_depth_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_depth_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_boxes_3d;
        break;
      }

      // repeated .FrameV0Proto.Box3DResult boxes_3d = 33;
      case 33: {
        if (tag == 266) {
         parse_boxes_3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes_3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_boxes_3d;
        if (input->ExpectTag(274)) goto parse_skeletons;
        break;
      }

      // repeated .CommonProto.Skeleton skeletons = 34;
      case 34: {
        if (tag == 274) {
         parse_skeletons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skeletons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_skeletons;
        if (input->ExpectTag(282)) goto parse_boxes_3d_raw;
        break;
      }

      // repeated .CommonProto.Box3DRaw boxes_3d_raw = 35;
      case 35: {
        if (tag == 282) {
         parse_boxes_3d_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes_3d_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_boxes_3d_raw;
        if (input->ExpectTag(290)) goto parse_skeletons_raw;
        break;
      }

      // repeated .CommonProto.SkeletonRaw skeletons_raw = 36;
      case 36: {
        if (tag == 290) {
         parse_skeletons_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skeletons_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_skeletons_raw;
        if (input->ExpectTag(298)) goto parse_highway_locate;
        break;
      }

      // optional .CommonProto.HighwayLocate highway_locate = 37;
      case 37: {
        if (tag == 298) {
         parse_highway_locate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highway_locate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8194)) goto parse_extra_info;
        break;
      }

      // repeated .FrameV0Proto.SerializedData extra_info = 1024;
      case 1024: {
        if (tag == 8194) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8194)) goto parse_extra_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV0Proto.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV0Proto.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV0Proto.Frame)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_id(), output);
  }

  // optional .CommonProto.CameraMatrix camera = 3;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camera(), output);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->img_frame(), output);
  }

  // optional .CANProto.CANFrame can_frames = 5;
  if (has_can_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->can_frames(), output);
  }

  // repeated .FrameV0Proto.ObstacleResult vehiles = 6;
  for (int i = 0; i < this->vehiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vehiles(i), output);
  }

  // repeated .CommonProto.Line lanes = 7;
  for (int i = 0; i < this->lanes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lanes(i), output);
  }

  // optional .WarningProto.FCW fcw = 8;
  if (has_fcw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fcw(), output);
  }

  // optional .WarningProto.LDW ldw = 9;
  if (has_ldw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ldw(), output);
  }

  // repeated .CANProto.CANFrameRaw can_frames_raw = 10;
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->can_frames_raw(i), output);
  }

  // optional .SensorProto.IMUFrame imu_frame = 11;
  if (has_imu_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->imu_frame(), output);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 12;
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->imu_frames_raw(i), output);
  }

  // optional .SensorProto.GPSFrame gps_frame = 13;
  if (has_gps_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gps_frame(), output);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 14;
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->gps_frames_raw(i), output);
  }

  // repeated .CommonProto.FreeSpaceResult freespace = 15;
  for (int i = 0; i < this->freespace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->freespace(i), output);
  }

  // optional .FrameV0Proto.FrameSource source = 16;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->source(), output);
  }

  // optional .CommonProto.MotionFrame motion_frame = 17;
  if (has_motion_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->motion_frame(), output);
  }

  // optional .CommonProto.CameraParam camera_param = 18;
  if (has_camera_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->camera_param(), output);
  }

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 19;
  for (int i = 0; i < this->pedestrians_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->pedestrians(i), output);
  }

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 20;
  for (int i = 0; i < this->vehicle_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->vehicle_raw(i), output);
  }

  // repeated .CommonProto.ObstacleRaw lane_raw = 21;
  for (int i = 0; i < this->lane_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->lane_raw(i), output);
  }

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 22;
  for (int i = 0; i < this->pedestrians_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->pedestrians_raw(i), output);
  }

  // optional .WarningProto.WarningResult warning_result = 23;
  if (has_warning_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->warning_result(), output);
  }

  // optional .CommonProto.OdometryFrame odometry = 24;
  if (has_odometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->odometry(), output);
  }

  // optional .CommonProto.CameraParam camera_param_default = 25;
  if (has_camera_param_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->camera_param_default(), output);
  }

  // optional .SensorProto.IMUFrame imu_offset = 26;
  if (has_imu_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->imu_offset(), output);
  }

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  for (int i = 0; i < this->obj_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->obj_raw(i), output);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 28;
  for (int i = 0; i < this->traffic_signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->traffic_signs(i), output);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 29;
  for (int i = 0; i < this->traffic_lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->traffic_lights(i), output);
  }

  // repeated int32 traffic_sign_types = 30;
  for (int i = 0; i < this->traffic_sign_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->traffic_sign_types(i), output);
  }

  // optional .CommonProto.Image parsing_frame = 31;
  if (has_parsing_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->parsing_frame(), output);
  }

  // optional .CommonProto.Image depth_frame = 32;
  if (has_depth_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->depth_frame(), output);
  }

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 33;
  for (int i = 0; i < this->boxes_3d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->boxes_3d(i), output);
  }

  // repeated .CommonProto.Skeleton skeletons = 34;
  for (int i = 0; i < this->skeletons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->skeletons(i), output);
  }

  // repeated .CommonProto.Box3DRaw boxes_3d_raw = 35;
  for (int i = 0; i < this->boxes_3d_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->boxes_3d_raw(i), output);
  }

  // repeated .CommonProto.SkeletonRaw skeletons_raw = 36;
  for (int i = 0; i < this->skeletons_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->skeletons_raw(i), output);
  }

  // optional .CommonProto.HighwayLocate highway_locate = 37;
  if (has_highway_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->highway_locate(), output);
  }

  // repeated .FrameV0Proto.SerializedData extra_info = 1024;
  for (int i = 0; i < this->extra_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1024, this->extra_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV0Proto.Frame)
}

::google::protobuf::uint8* Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV0Proto.Frame)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_id(), target);
  }

  // optional .CommonProto.CameraMatrix camera = 3;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camera(), target);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->img_frame(), target);
  }

  // optional .CANProto.CANFrame can_frames = 5;
  if (has_can_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->can_frames(), target);
  }

  // repeated .FrameV0Proto.ObstacleResult vehiles = 6;
  for (int i = 0; i < this->vehiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vehiles(i), target);
  }

  // repeated .CommonProto.Line lanes = 7;
  for (int i = 0; i < this->lanes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lanes(i), target);
  }

  // optional .WarningProto.FCW fcw = 8;
  if (has_fcw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fcw(), target);
  }

  // optional .WarningProto.LDW ldw = 9;
  if (has_ldw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ldw(), target);
  }

  // repeated .CANProto.CANFrameRaw can_frames_raw = 10;
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->can_frames_raw(i), target);
  }

  // optional .SensorProto.IMUFrame imu_frame = 11;
  if (has_imu_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->imu_frame(), target);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 12;
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->imu_frames_raw(i), target);
  }

  // optional .SensorProto.GPSFrame gps_frame = 13;
  if (has_gps_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->gps_frame(), target);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 14;
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->gps_frames_raw(i), target);
  }

  // repeated .CommonProto.FreeSpaceResult freespace = 15;
  for (int i = 0; i < this->freespace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->freespace(i), target);
  }

  // optional .FrameV0Proto.FrameSource source = 16;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->source(), target);
  }

  // optional .CommonProto.MotionFrame motion_frame = 17;
  if (has_motion_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->motion_frame(), target);
  }

  // optional .CommonProto.CameraParam camera_param = 18;
  if (has_camera_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->camera_param(), target);
  }

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 19;
  for (int i = 0; i < this->pedestrians_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->pedestrians(i), target);
  }

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 20;
  for (int i = 0; i < this->vehicle_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->vehicle_raw(i), target);
  }

  // repeated .CommonProto.ObstacleRaw lane_raw = 21;
  for (int i = 0; i < this->lane_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->lane_raw(i), target);
  }

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 22;
  for (int i = 0; i < this->pedestrians_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->pedestrians_raw(i), target);
  }

  // optional .WarningProto.WarningResult warning_result = 23;
  if (has_warning_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->warning_result(), target);
  }

  // optional .CommonProto.OdometryFrame odometry = 24;
  if (has_odometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->odometry(), target);
  }

  // optional .CommonProto.CameraParam camera_param_default = 25;
  if (has_camera_param_default()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->camera_param_default(), target);
  }

  // optional .SensorProto.IMUFrame imu_offset = 26;
  if (has_imu_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->imu_offset(), target);
  }

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  for (int i = 0; i < this->obj_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->obj_raw(i), target);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 28;
  for (int i = 0; i < this->traffic_signs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->traffic_signs(i), target);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 29;
  for (int i = 0; i < this->traffic_lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->traffic_lights(i), target);
  }

  // repeated int32 traffic_sign_types = 30;
  for (int i = 0; i < this->traffic_sign_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(30, this->traffic_sign_types(i), target);
  }

  // optional .CommonProto.Image parsing_frame = 31;
  if (has_parsing_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->parsing_frame(), target);
  }

  // optional .CommonProto.Image depth_frame = 32;
  if (has_depth_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->depth_frame(), target);
  }

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 33;
  for (int i = 0; i < this->boxes_3d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->boxes_3d(i), target);
  }

  // repeated .CommonProto.Skeleton skeletons = 34;
  for (int i = 0; i < this->skeletons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->skeletons(i), target);
  }

  // repeated .CommonProto.Box3DRaw boxes_3d_raw = 35;
  for (int i = 0; i < this->boxes_3d_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->boxes_3d_raw(i), target);
  }

  // repeated .CommonProto.SkeletonRaw skeletons_raw = 36;
  for (int i = 0; i < this->skeletons_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->skeletons_raw(i), target);
  }

  // optional .CommonProto.HighwayLocate highway_locate = 37;
  if (has_highway_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->highway_locate(), target);
  }

  // repeated .FrameV0Proto.SerializedData extra_info = 1024;
  for (int i = 0; i < this->extra_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1024, this->extra_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV0Proto.Frame)
  return target;
}

int Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }

    // optional .CommonProto.CameraMatrix camera = 3;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

    // optional .CommonProto.Image img_frame = 4;
    if (has_img_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img_frame());
    }

    // optional .CANProto.CANFrame can_frames = 5;
    if (has_can_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->can_frames());
    }

    // optional .WarningProto.FCW fcw = 8;
    if (has_fcw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fcw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .WarningProto.LDW ldw = 9;
    if (has_ldw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ldw());
    }

    // optional .SensorProto.IMUFrame imu_frame = 11;
    if (has_imu_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu_frame());
    }

    // optional .SensorProto.GPSFrame gps_frame = 13;
    if (has_gps_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps_frame());
    }

    // optional .FrameV0Proto.FrameSource source = 16;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CommonProto.MotionFrame motion_frame = 17;
    if (has_motion_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_frame());
    }

    // optional .CommonProto.CameraParam camera_param = 18;
    if (has_camera_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_param());
    }

    // optional .WarningProto.WarningResult warning_result = 23;
    if (has_warning_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warning_result());
    }

    // optional .CommonProto.OdometryFrame odometry = 24;
    if (has_odometry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odometry());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .CommonProto.CameraParam camera_param_default = 25;
    if (has_camera_param_default()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_param_default());
    }

    // optional .SensorProto.IMUFrame imu_offset = 26;
    if (has_imu_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu_offset());
    }

    // optional .CommonProto.Image parsing_frame = 31;
    if (has_parsing_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parsing_frame());
    }

    // optional .CommonProto.Image depth_frame = 32;
    if (has_depth_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->depth_frame());
    }

  }
  if (_has_bits_[36 / 32] & (0xffu << (36 % 32))) {
    // optional .CommonProto.HighwayLocate highway_locate = 37;
    if (has_highway_locate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highway_locate());
    }

  }
  // repeated .FrameV0Proto.ObstacleResult vehiles = 6;
  total_size += 1 * this->vehiles_size();
  for (int i = 0; i < this->vehiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehiles(i));
  }

  // repeated .CommonProto.Line lanes = 7;
  total_size += 1 * this->lanes_size();
  for (int i = 0; i < this->lanes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lanes(i));
  }

  // repeated .CANProto.CANFrameRaw can_frames_raw = 10;
  total_size += 1 * this->can_frames_raw_size();
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->can_frames_raw(i));
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 12;
  total_size += 1 * this->imu_frames_raw_size();
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imu_frames_raw(i));
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 14;
  total_size += 1 * this->gps_frames_raw_size();
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gps_frames_raw(i));
  }

  // repeated .CommonProto.FreeSpaceResult freespace = 15;
  total_size += 1 * this->freespace_size();
  for (int i = 0; i < this->freespace_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freespace(i));
  }

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 19;
  total_size += 2 * this->pedestrians_size();
  for (int i = 0; i < this->pedestrians_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pedestrians(i));
  }

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 20;
  total_size += 2 * this->vehicle_raw_size();
  for (int i = 0; i < this->vehicle_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicle_raw(i));
  }

  // repeated .CommonProto.ObstacleRaw lane_raw = 21;
  total_size += 2 * this->lane_raw_size();
  for (int i = 0; i < this->lane_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_raw(i));
  }

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 22;
  total_size += 2 * this->pedestrians_raw_size();
  for (int i = 0; i < this->pedestrians_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pedestrians_raw(i));
  }

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  total_size += 2 * this->obj_raw_size();
  for (int i = 0; i < this->obj_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obj_raw(i));
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 28;
  total_size += 2 * this->traffic_signs_size();
  for (int i = 0; i < this->traffic_signs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_signs(i));
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 29;
  total_size += 2 * this->traffic_lights_size();
  for (int i = 0; i < this->traffic_lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_lights(i));
  }

  // repeated int32 traffic_sign_types = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->traffic_sign_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->traffic_sign_types(i));
    }
    total_size += 2 * this->traffic_sign_types_size() + data_size;
  }

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 33;
  total_size += 2 * this->boxes_3d_size();
  for (int i = 0; i < this->boxes_3d_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes_3d(i));
  }

  // repeated .CommonProto.Skeleton skeletons = 34;
  total_size += 2 * this->skeletons_size();
  for (int i = 0; i < this->skeletons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skeletons(i));
  }

  // repeated .CommonProto.Box3DRaw boxes_3d_raw = 35;
  total_size += 2 * this->boxes_3d_raw_size();
  for (int i = 0; i < this->boxes_3d_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes_3d_raw(i));
  }

  // repeated .CommonProto.SkeletonRaw skeletons_raw = 36;
  total_size += 2 * this->skeletons_raw_size();
  for (int i = 0; i < this->skeletons_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skeletons_raw(i));
  }

  // repeated .FrameV0Proto.SerializedData extra_info = 1024;
  total_size += 2 * this->extra_info_size();
  for (int i = 0; i < this->extra_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  vehiles_.MergeFrom(from.vehiles_);
  lanes_.MergeFrom(from.lanes_);
  can_frames_raw_.MergeFrom(from.can_frames_raw_);
  imu_frames_raw_.MergeFrom(from.imu_frames_raw_);
  gps_frames_raw_.MergeFrom(from.gps_frames_raw_);
  freespace_.MergeFrom(from.freespace_);
  pedestrians_.MergeFrom(from.pedestrians_);
  vehicle_raw_.MergeFrom(from.vehicle_raw_);
  lane_raw_.MergeFrom(from.lane_raw_);
  pedestrians_raw_.MergeFrom(from.pedestrians_raw_);
  obj_raw_.MergeFrom(from.obj_raw_);
  traffic_signs_.MergeFrom(from.traffic_signs_);
  traffic_lights_.MergeFrom(from.traffic_lights_);
  traffic_sign_types_.MergeFrom(from.traffic_sign_types_);
  boxes_3d_.MergeFrom(from.boxes_3d_);
  skeletons_.MergeFrom(from.skeletons_);
  boxes_3d_raw_.MergeFrom(from.boxes_3d_raw_);
  skeletons_raw_.MergeFrom(from.skeletons_raw_);
  extra_info_.MergeFrom(from.extra_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_camera()) {
      mutable_camera()->::CommonProto::CameraMatrix::MergeFrom(from.camera());
    }
    if (from.has_img_frame()) {
      mutable_img_frame()->::CommonProto::Image::MergeFrom(from.img_frame());
    }
    if (from.has_can_frames()) {
      mutable_can_frames()->::CANProto::CANFrame::MergeFrom(from.can_frames());
    }
    if (from.has_fcw()) {
      mutable_fcw()->::WarningProto::FCW::MergeFrom(from.fcw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ldw()) {
      mutable_ldw()->::WarningProto::LDW::MergeFrom(from.ldw());
    }
    if (from.has_imu_frame()) {
      mutable_imu_frame()->::SensorProto::IMUFrame::MergeFrom(from.imu_frame());
    }
    if (from.has_gps_frame()) {
      mutable_gps_frame()->::SensorProto::GPSFrame::MergeFrom(from.gps_frame());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_motion_frame()) {
      mutable_motion_frame()->::CommonProto::MotionFrame::MergeFrom(from.motion_frame());
    }
    if (from.has_camera_param()) {
      mutable_camera_param()->::CommonProto::CameraParam::MergeFrom(from.camera_param());
    }
    if (from.has_warning_result()) {
      mutable_warning_result()->::WarningProto::WarningResult::MergeFrom(from.warning_result());
    }
    if (from.has_odometry()) {
      mutable_odometry()->::CommonProto::OdometryFrame::MergeFrom(from.odometry());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_camera_param_default()) {
      mutable_camera_param_default()->::CommonProto::CameraParam::MergeFrom(from.camera_param_default());
    }
    if (from.has_imu_offset()) {
      mutable_imu_offset()->::SensorProto::IMUFrame::MergeFrom(from.imu_offset());
    }
    if (from.has_parsing_frame()) {
      mutable_parsing_frame()->::CommonProto::Image::MergeFrom(from.parsing_frame());
    }
    if (from.has_depth_frame()) {
      mutable_depth_frame()->::CommonProto::Image::MergeFrom(from.depth_frame());
    }
  }
  if (from._has_bits_[36 / 32] & (0xffu << (36 % 32))) {
    if (from.has_highway_locate()) {
      mutable_highway_locate()->::CommonProto::HighwayLocate::MergeFrom(from.highway_locate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {

  if (has_img_frame()) {
    if (!this->img_frame().IsInitialized()) return false;
  }
  if (has_can_frames()) {
    if (!this->can_frames().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->vehiles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lanes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->can_frames_raw())) return false;
  if (has_imu_frame()) {
    if (!this->imu_frame().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->imu_frames_raw())) return false;
  if (has_gps_frame()) {
    if (!this->gps_frame().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->gps_frames_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->freespace())) return false;
  if (has_motion_frame()) {
    if (!this->motion_frame().IsInitialized()) return false;
  }
  if (has_camera_param()) {
    if (!this->camera_param().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pedestrians())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vehicle_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lane_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pedestrians_raw())) return false;
  if (has_odometry()) {
    if (!this->odometry().IsInitialized()) return false;
  }
  if (has_camera_param_default()) {
    if (!this->camera_param_default().IsInitialized()) return false;
  }
  if (has_imu_offset()) {
    if (!this->imu_offset().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->obj_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_signs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_lights())) return false;
  if (has_parsing_frame()) {
    if (!this->parsing_frame().IsInitialized()) return false;
  }
  if (has_depth_frame()) {
    if (!this->depth_frame().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->boxes_3d())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skeletons())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->boxes_3d_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skeletons_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->extra_info())) return false;
  return true;
}

void Frame::Swap(Frame* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(camera_, other->camera_);
    std::swap(img_frame_, other->img_frame_);
    std::swap(can_frames_, other->can_frames_);
    vehiles_.Swap(&other->vehiles_);
    lanes_.Swap(&other->lanes_);
    std::swap(fcw_, other->fcw_);
    std::swap(ldw_, other->ldw_);
    can_frames_raw_.Swap(&other->can_frames_raw_);
    std::swap(imu_frame_, other->imu_frame_);
    imu_frames_raw_.Swap(&other->imu_frames_raw_);
    std::swap(gps_frame_, other->gps_frame_);
    gps_frames_raw_.Swap(&other->gps_frames_raw_);
    freespace_.Swap(&other->freespace_);
    std::swap(source_, other->source_);
    std::swap(motion_frame_, other->motion_frame_);
    std::swap(camera_param_, other->camera_param_);
    pedestrians_.Swap(&other->pedestrians_);
    vehicle_raw_.Swap(&other->vehicle_raw_);
    lane_raw_.Swap(&other->lane_raw_);
    pedestrians_raw_.Swap(&other->pedestrians_raw_);
    std::swap(warning_result_, other->warning_result_);
    std::swap(odometry_, other->odometry_);
    std::swap(camera_param_default_, other->camera_param_default_);
    std::swap(imu_offset_, other->imu_offset_);
    obj_raw_.Swap(&other->obj_raw_);
    traffic_signs_.Swap(&other->traffic_signs_);
    traffic_lights_.Swap(&other->traffic_lights_);
    traffic_sign_types_.Swap(&other->traffic_sign_types_);
    std::swap(parsing_frame_, other->parsing_frame_);
    std::swap(depth_frame_, other->depth_frame_);
    boxes_3d_.Swap(&other->boxes_3d_);
    skeletons_.Swap(&other->skeletons_);
    boxes_3d_raw_.Swap(&other->boxes_3d_raw_);
    skeletons_raw_.Swap(&other->skeletons_raw_);
    std::swap(highway_locate_, other->highway_locate_);
    extra_info_.Swap(&other->extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameShuffle::kVersionFieldNumber;
const int FrameShuffle::kFrameIdFieldNumber;
const int FrameShuffle::kImgFrameFieldNumber;
const int FrameShuffle::kGpsFrameFieldNumber;
const int FrameShuffle::kCameraFieldNumber;
const int FrameShuffle::kCanFramesFieldNumber;
const int FrameShuffle::kVehilesFieldNumber;
const int FrameShuffle::kLanesFieldNumber;
const int FrameShuffle::kFcwFieldNumber;
const int FrameShuffle::kLdwFieldNumber;
const int FrameShuffle::kCanFramesRawFieldNumber;
const int FrameShuffle::kImuFrameFieldNumber;
const int FrameShuffle::kImuFramesRawFieldNumber;
const int FrameShuffle::kGpsFramesRawFieldNumber;
const int FrameShuffle::kFreespaceFieldNumber;
const int FrameShuffle::kSourceFieldNumber;
const int FrameShuffle::kMotionFrameFieldNumber;
const int FrameShuffle::kCameraParamFieldNumber;
const int FrameShuffle::kPedestriansFieldNumber;
const int FrameShuffle::kBoxes3DFieldNumber;
const int FrameShuffle::kSkeletonsFieldNumber;
const int FrameShuffle::kParsingFrameFieldNumber;
const int FrameShuffle::kVehicleRawFieldNumber;
const int FrameShuffle::kLaneRawFieldNumber;
const int FrameShuffle::kPedestriansRawFieldNumber;
const int FrameShuffle::kObjRawFieldNumber;
const int FrameShuffle::kTrafficSignsFieldNumber;
const int FrameShuffle::kTrafficLightsFieldNumber;
const int FrameShuffle::kHighwayLocateFieldNumber;
const int FrameShuffle::kWarningResultFieldNumber;
const int FrameShuffle::kOdometryFieldNumber;
const int FrameShuffle::kCameraParamDefaultFieldNumber;
const int FrameShuffle::kImuOffsetFieldNumber;
const int FrameShuffle::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

FrameShuffle::FrameShuffle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV0Proto.FrameShuffle)
}

void FrameShuffle::InitAsDefaultInstance() {
  img_frame_ = const_cast< ::CommonProto::Image*>(&::CommonProto::Image::default_instance());
  gps_frame_ = const_cast< ::SensorProto::GPSFrame*>(&::SensorProto::GPSFrame::default_instance());
  camera_ = const_cast< ::CommonProto::CameraMatrix*>(&::CommonProto::CameraMatrix::default_instance());
  can_frames_ = const_cast< ::CANProto::CANFrame*>(&::CANProto::CANFrame::default_instance());
  fcw_ = const_cast< ::WarningProto::FCW*>(&::WarningProto::FCW::default_instance());
  ldw_ = const_cast< ::WarningProto::LDW*>(&::WarningProto::LDW::default_instance());
  imu_frame_ = const_cast< ::SensorProto::IMUFrame*>(&::SensorProto::IMUFrame::default_instance());
  motion_frame_ = const_cast< ::CommonProto::MotionFrame*>(&::CommonProto::MotionFrame::default_instance());
  camera_param_ = const_cast< ::CommonProto::CameraParam*>(&::CommonProto::CameraParam::default_instance());
  parsing_frame_ = const_cast< ::CommonProto::Image*>(&::CommonProto::Image::default_instance());
  highway_locate_ = const_cast< ::CommonProto::HighwayLocate*>(&::CommonProto::HighwayLocate::default_instance());
  warning_result_ = const_cast< ::WarningProto::WarningResult*>(&::WarningProto::WarningResult::default_instance());
  odometry_ = const_cast< ::CommonProto::OdometryFrame*>(&::CommonProto::OdometryFrame::default_instance());
  camera_param_default_ = const_cast< ::CommonProto::CameraParam*>(&::CommonProto::CameraParam::default_instance());
  imu_offset_ = const_cast< ::SensorProto::IMUFrame*>(&::SensorProto::IMUFrame::default_instance());
}

FrameShuffle::FrameShuffle(const FrameShuffle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV0Proto.FrameShuffle)
}

void FrameShuffle::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  frame_id_ = 0;
  img_frame_ = NULL;
  gps_frame_ = NULL;
  camera_ = NULL;
  can_frames_ = NULL;
  fcw_ = NULL;
  ldw_ = NULL;
  imu_frame_ = NULL;
  source_ = 0;
  motion_frame_ = NULL;
  camera_param_ = NULL;
  parsing_frame_ = NULL;
  highway_locate_ = NULL;
  warning_result_ = NULL;
  odometry_ = NULL;
  camera_param_default_ = NULL;
  imu_offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameShuffle::~FrameShuffle() {
  // @@protoc_insertion_point(destructor:FrameV0Proto.FrameShuffle)
  SharedDtor();
}

void FrameShuffle::SharedDtor() {
  if (this != default_instance_) {
    delete img_frame_;
    delete gps_frame_;
    delete camera_;
    delete can_frames_;
    delete fcw_;
    delete ldw_;
    delete imu_frame_;
    delete motion_frame_;
    delete camera_param_;
    delete parsing_frame_;
    delete highway_locate_;
    delete warning_result_;
    delete odometry_;
    delete camera_param_default_;
    delete imu_offset_;
  }
}

void FrameShuffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameShuffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameShuffle_descriptor_;
}

const FrameShuffle& FrameShuffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev0_2eproto();
  return *default_instance_;
}

FrameShuffle* FrameShuffle::default_instance_ = NULL;

FrameShuffle* FrameShuffle::New() const {
  return new FrameShuffle;
}

void FrameShuffle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrameShuffle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(version_, frame_id_);
    if (has_img_frame()) {
      if (img_frame_ != NULL) img_frame_->::CommonProto::Image::Clear();
    }
    if (has_gps_frame()) {
      if (gps_frame_ != NULL) gps_frame_->::SensorProto::GPSFrame::Clear();
    }
    if (has_camera()) {
      if (camera_ != NULL) camera_->::CommonProto::CameraMatrix::Clear();
    }
    if (has_can_frames()) {
      if (can_frames_ != NULL) can_frames_->::CANProto::CANFrame::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 35584) {
    if (has_fcw()) {
      if (fcw_ != NULL) fcw_->::WarningProto::FCW::Clear();
    }
    if (has_ldw()) {
      if (ldw_ != NULL) ldw_->::WarningProto::LDW::Clear();
    }
    if (has_imu_frame()) {
      if (imu_frame_ != NULL) imu_frame_->::SensorProto::IMUFrame::Clear();
    }
    source_ = 0;
  }
  if (_has_bits_[16 / 32] & 2293760) {
    if (has_motion_frame()) {
      if (motion_frame_ != NULL) motion_frame_->::CommonProto::MotionFrame::Clear();
    }
    if (has_camera_param()) {
      if (camera_param_ != NULL) camera_param_->::CommonProto::CameraParam::Clear();
    }
    if (has_parsing_frame()) {
      if (parsing_frame_ != NULL) parsing_frame_->::CommonProto::Image::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4026531840) {
    if (has_highway_locate()) {
      if (highway_locate_ != NULL) highway_locate_->::CommonProto::HighwayLocate::Clear();
    }
    if (has_warning_result()) {
      if (warning_result_ != NULL) warning_result_->::WarningProto::WarningResult::Clear();
    }
    if (has_odometry()) {
      if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
    }
    if (has_camera_param_default()) {
      if (camera_param_default_ != NULL) camera_param_default_->::CommonProto::CameraParam::Clear();
    }
  }
  if (has_imu_offset()) {
    if (imu_offset_ != NULL) imu_offset_->::SensorProto::IMUFrame::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  vehiles_.Clear();
  lanes_.Clear();
  can_frames_raw_.Clear();
  imu_frames_raw_.Clear();
  gps_frames_raw_.Clear();
  freespace_.Clear();
  pedestrians_.Clear();
  boxes_3d_.Clear();
  skeletons_.Clear();
  vehicle_raw_.Clear();
  lane_raw_.Clear();
  pedestrians_raw_.Clear();
  obj_raw_.Clear();
  traffic_signs_.Clear();
  traffic_lights_.Clear();
  extra_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameShuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV0Proto.FrameShuffle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_id;
        break;
      }

      // optional int32 frame_id = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imu_frame;
        break;
      }

      // optional .SensorProto.IMUFrame imu_frame = 3;
      case 3: {
        if (tag == 26) {
         parse_imu_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img_frame;
        break;
      }

      // optional .CommonProto.Image img_frame = 4;
      case 4: {
        if (tag == 34) {
         parse_img_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pedestrians;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult pedestrians = 5;
      case 5: {
        if (tag == 42) {
         parse_pedestrians:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pedestrians()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pedestrians;
        if (input->ExpectTag(50)) goto parse_gps_frames_raw;
        break;
      }

      // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 6;
      case 6: {
        if (tag == 50) {
         parse_gps_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gps_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gps_frames_raw;
        if (input->ExpectTag(56)) goto parse_source;
        break;
      }

      // optional .FrameV0Proto.FrameSource source = 7;
      case 7: {
        if (tag == 56) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FrameV0Proto::FrameSource_IsValid(value)) {
            set_source(static_cast< ::FrameV0Proto::FrameSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_imu_frames_raw;
        break;
      }

      // repeated .SensorProto.IMUFrame imu_frames_raw = 8;
      case 8: {
        if (tag == 66) {
         parse_imu_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imu_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_imu_frames_raw;
        if (input->ExpectTag(74)) goto parse_vehiles;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult vehiles = 9;
      case 9: {
        if (tag == 74) {
         parse_vehiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehiles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vehiles;
        if (input->ExpectTag(82)) goto parse_freespace;
        break;
      }

      // repeated .CommonProto.FreeSpaceResult freespace = 10;
      case 10: {
        if (tag == 82) {
         parse_freespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freespace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_freespace;
        if (input->ExpectTag(90)) goto parse_can_frames;
        break;
      }

      // optional .CANProto.CANFrame can_frames = 11;
      case 11: {
        if (tag == 90) {
         parse_can_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_can_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_camera_param_default;
        break;
      }

      // optional .CommonProto.CameraParam camera_param_default = 12;
      case 12: {
        if (tag == 98) {
         parse_camera_param_default:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_param_default()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_gps_frame;
        break;
      }

      // optional .SensorProto.GPSFrame gps_frame = 13;
      case 13: {
        if (tag == 106) {
         parse_gps_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_pedestrians_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw pedestrians_raw = 14;
      case 14: {
        if (tag == 114) {
         parse_pedestrians_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pedestrians_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_pedestrians_raw;
        if (input->ExpectTag(122)) goto parse_lane_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw lane_raw = 15;
      case 15: {
        if (tag == 122) {
         parse_lane_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_lane_raw;
        if (input->ExpectTag(130)) goto parse_vehicle_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw vehicle_raw = 16;
      case 16: {
        if (tag == 130) {
         parse_vehicle_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehicle_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vehicle_raw;
        if (input->ExpectTag(138)) goto parse_camera;
        break;
      }

      // optional .CommonProto.CameraMatrix camera = 17;
      case 17: {
        if (tag == 138) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_motion_frame;
        break;
      }

      // optional .CommonProto.MotionFrame motion_frame = 18;
      case 18: {
        if (tag == 146) {
         parse_motion_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_camera_param;
        break;
      }

      // optional .CommonProto.CameraParam camera_param = 19;
      case 19: {
        if (tag == 154) {
         parse_camera_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_can_frames_raw;
        break;
      }

      // repeated .CANProto.CANFrameRaw can_frames_raw = 20;
      case 20: {
        if (tag == 162) {
         parse_can_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_can_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_can_frames_raw;
        if (input->ExpectTag(170)) goto parse_warning_result;
        break;
      }

      // optional .WarningProto.WarningResult warning_result = 21;
      case 21: {
        if (tag == 170) {
         parse_warning_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warning_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_odometry;
        break;
      }

      // optional .CommonProto.OdometryFrame odometry = 22;
      case 22: {
        if (tag == 178) {
         parse_odometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_ldw;
        break;
      }

      // optional .WarningProto.LDW ldw = 23;
      case 23: {
        if (tag == 186) {
         parse_ldw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ldw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_fcw;
        break;
      }

      // optional .WarningProto.FCW fcw = 24;
      case 24: {
        if (tag == 194) {
         parse_fcw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_lanes;
        break;
      }

      // repeated .CommonProto.Line lanes = 25;
      case 25: {
        if (tag == 202) {
         parse_lanes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_lanes;
        if (input->ExpectTag(218)) goto parse_obj_raw;
        break;
      }

      // repeated .CommonProto.ObstacleRaw obj_raw = 27;
      case 27: {
        if (tag == 218) {
         parse_obj_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_obj_raw;
        if (input->ExpectTag(226)) goto parse_boxes_3d;
        break;
      }

      // repeated .FrameV0Proto.Box3DResult boxes_3d = 28;
      case 28: {
        if (tag == 226) {
         parse_boxes_3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes_3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_boxes_3d;
        if (input->ExpectTag(234)) goto parse_skeletons;
        break;
      }

      // repeated .CommonProto.Skeleton skeletons = 29;
      case 29: {
        if (tag == 234) {
         parse_skeletons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skeletons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_skeletons;
        if (input->ExpectTag(242)) goto parse_parsing_frame;
        break;
      }

      // optional .CommonProto.Image parsing_frame = 30;
      case 30: {
        if (tag == 242) {
         parse_parsing_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsing_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_imu_offset;
        break;
      }

      // optional .SensorProto.IMUFrame imu_offset = 36;
      case 36: {
        if (tag == 290) {
         parse_imu_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_extra_info;
        break;
      }

      // repeated .FrameV0Proto.SerializedData extra_info = 101;
      case 101: {
        if (tag == 810) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_extra_info;
        if (input->ExpectTag(8002)) goto parse_traffic_signs;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult traffic_signs = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_traffic_signs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_signs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_traffic_signs;
        if (input->ExpectTag(8010)) goto parse_traffic_lights;
        break;
      }

      // repeated .FrameV0Proto.ObstacleResult traffic_lights = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_traffic_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_lights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_traffic_lights;
        if (input->ExpectTag(8018)) goto parse_highway_locate;
        break;
      }

      // optional .CommonProto.HighwayLocate highway_locate = 1002;
      case 1002: {
        if (tag == 8018) {
         parse_highway_locate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highway_locate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV0Proto.FrameShuffle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV0Proto.FrameShuffle)
  return false;
#undef DO_
}

void FrameShuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV0Proto.FrameShuffle)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_id(), output);
  }

  // optional .SensorProto.IMUFrame imu_frame = 3;
  if (has_imu_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imu_frame(), output);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->img_frame(), output);
  }

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 5;
  for (int i = 0; i < this->pedestrians_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pedestrians(i), output);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 6;
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gps_frames_raw(i), output);
  }

  // optional .FrameV0Proto.FrameSource source = 7;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->source(), output);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 8;
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->imu_frames_raw(i), output);
  }

  // repeated .FrameV0Proto.ObstacleResult vehiles = 9;
  for (int i = 0; i < this->vehiles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vehiles(i), output);
  }

  // repeated .CommonProto.FreeSpaceResult freespace = 10;
  for (int i = 0; i < this->freespace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->freespace(i), output);
  }

  // optional .CANProto.CANFrame can_frames = 11;
  if (has_can_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->can_frames(), output);
  }

  // optional .CommonProto.CameraParam camera_param_default = 12;
  if (has_camera_param_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->camera_param_default(), output);
  }

  // optional .SensorProto.GPSFrame gps_frame = 13;
  if (has_gps_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gps_frame(), output);
  }

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 14;
  for (int i = 0; i < this->pedestrians_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pedestrians_raw(i), output);
  }

  // repeated .CommonProto.ObstacleRaw lane_raw = 15;
  for (int i = 0; i < this->lane_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->lane_raw(i), output);
  }

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 16;
  for (int i = 0; i < this->vehicle_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->vehicle_raw(i), output);
  }

  // optional .CommonProto.CameraMatrix camera = 17;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->camera(), output);
  }

  // optional .CommonProto.MotionFrame motion_frame = 18;
  if (has_motion_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->motion_frame(), output);
  }

  // optional .CommonProto.CameraParam camera_param = 19;
  if (has_camera_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->camera_param(), output);
  }

  // repeated .CANProto.CANFrameRaw can_frames_raw = 20;
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->can_frames_raw(i), output);
  }

  // optional .WarningProto.WarningResult warning_result = 21;
  if (has_warning_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->warning_result(), output);
  }

  // optional .CommonProto.OdometryFrame odometry = 22;
  if (has_odometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->odometry(), output);
  }

  // optional .WarningProto.LDW ldw = 23;
  if (has_ldw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->ldw(), output);
  }

  // optional .WarningProto.FCW fcw = 24;
  if (has_fcw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->fcw(), output);
  }

  // repeated .CommonProto.Line lanes = 25;
  for (int i = 0; i < this->lanes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->lanes(i), output);
  }

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  for (int i = 0; i < this->obj_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->obj_raw(i), output);
  }

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 28;
  for (int i = 0; i < this->boxes_3d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->boxes_3d(i), output);
  }

  // repeated .CommonProto.Skeleton skeletons = 29;
  for (int i = 0; i < this->skeletons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->skeletons(i), output);
  }

  // optional .CommonProto.Image parsing_frame = 30;
  if (has_parsing_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->parsing_frame(), output);
  }

  // optional .SensorProto.IMUFrame imu_offset = 36;
  if (has_imu_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->imu_offset(), output);
  }

  // repeated .FrameV0Proto.SerializedData extra_info = 101;
  for (int i = 0; i < this->extra_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->extra_info(i), output);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 1000;
  for (int i = 0; i < this->traffic_signs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->traffic_signs(i), output);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 1001;
  for (int i = 0; i < this->traffic_lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->traffic_lights(i), output);
  }

  // optional .CommonProto.HighwayLocate highway_locate = 1002;
  if (has_highway_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, this->highway_locate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV0Proto.FrameShuffle)
}

::google::protobuf::uint8* FrameShuffle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV0Proto.FrameShuffle)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_id(), target);
  }

  // optional .SensorProto.IMUFrame imu_frame = 3;
  if (has_imu_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->imu_frame(), target);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->img_frame(), target);
  }

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 5;
  for (int i = 0; i < this->pedestrians_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pedestrians(i), target);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 6;
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gps_frames_raw(i), target);
  }

  // optional .FrameV0Proto.FrameSource source = 7;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->source(), target);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 8;
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->imu_frames_raw(i), target);
  }

  // repeated .FrameV0Proto.ObstacleResult vehiles = 9;
  for (int i = 0; i < this->vehiles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vehiles(i), target);
  }

  // repeated .CommonProto.FreeSpaceResult freespace = 10;
  for (int i = 0; i < this->freespace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->freespace(i), target);
  }

  // optional .CANProto.CANFrame can_frames = 11;
  if (has_can_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->can_frames(), target);
  }

  // optional .CommonProto.CameraParam camera_param_default = 12;
  if (has_camera_param_default()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->camera_param_default(), target);
  }

  // optional .SensorProto.GPSFrame gps_frame = 13;
  if (has_gps_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->gps_frame(), target);
  }

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 14;
  for (int i = 0; i < this->pedestrians_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pedestrians_raw(i), target);
  }

  // repeated .CommonProto.ObstacleRaw lane_raw = 15;
  for (int i = 0; i < this->lane_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->lane_raw(i), target);
  }

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 16;
  for (int i = 0; i < this->vehicle_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->vehicle_raw(i), target);
  }

  // optional .CommonProto.CameraMatrix camera = 17;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->camera(), target);
  }

  // optional .CommonProto.MotionFrame motion_frame = 18;
  if (has_motion_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->motion_frame(), target);
  }

  // optional .CommonProto.CameraParam camera_param = 19;
  if (has_camera_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->camera_param(), target);
  }

  // repeated .CANProto.CANFrameRaw can_frames_raw = 20;
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->can_frames_raw(i), target);
  }

  // optional .WarningProto.WarningResult warning_result = 21;
  if (has_warning_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->warning_result(), target);
  }

  // optional .CommonProto.OdometryFrame odometry = 22;
  if (has_odometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->odometry(), target);
  }

  // optional .WarningProto.LDW ldw = 23;
  if (has_ldw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->ldw(), target);
  }

  // optional .WarningProto.FCW fcw = 24;
  if (has_fcw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->fcw(), target);
  }

  // repeated .CommonProto.Line lanes = 25;
  for (int i = 0; i < this->lanes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->lanes(i), target);
  }

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  for (int i = 0; i < this->obj_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->obj_raw(i), target);
  }

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 28;
  for (int i = 0; i < this->boxes_3d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->boxes_3d(i), target);
  }

  // repeated .CommonProto.Skeleton skeletons = 29;
  for (int i = 0; i < this->skeletons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->skeletons(i), target);
  }

  // optional .CommonProto.Image parsing_frame = 30;
  if (has_parsing_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->parsing_frame(), target);
  }

  // optional .SensorProto.IMUFrame imu_offset = 36;
  if (has_imu_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->imu_offset(), target);
  }

  // repeated .FrameV0Proto.SerializedData extra_info = 101;
  for (int i = 0; i < this->extra_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->extra_info(i), target);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 1000;
  for (int i = 0; i < this->traffic_signs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->traffic_signs(i), target);
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 1001;
  for (int i = 0; i < this->traffic_lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->traffic_lights(i), target);
  }

  // optional .CommonProto.HighwayLocate highway_locate = 1002;
  if (has_highway_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1002, this->highway_locate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV0Proto.FrameShuffle)
  return target;
}

int FrameShuffle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }

    // optional .CommonProto.Image img_frame = 4;
    if (has_img_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img_frame());
    }

    // optional .SensorProto.GPSFrame gps_frame = 13;
    if (has_gps_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps_frame());
    }

    // optional .CommonProto.CameraMatrix camera = 17;
    if (has_camera()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

    // optional .CANProto.CANFrame can_frames = 11;
    if (has_can_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->can_frames());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .WarningProto.FCW fcw = 24;
    if (has_fcw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fcw());
    }

    // optional .WarningProto.LDW ldw = 23;
    if (has_ldw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ldw());
    }

    // optional .SensorProto.IMUFrame imu_frame = 3;
    if (has_imu_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu_frame());
    }

    // optional .FrameV0Proto.FrameSource source = 7;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CommonProto.MotionFrame motion_frame = 18;
    if (has_motion_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_frame());
    }

    // optional .CommonProto.CameraParam camera_param = 19;
    if (has_camera_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_param());
    }

    // optional .CommonProto.Image parsing_frame = 30;
    if (has_parsing_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parsing_frame());
    }

  }
  if (_has_bits_[28 / 32] & (0xffu << (28 % 32))) {
    // optional .CommonProto.HighwayLocate highway_locate = 1002;
    if (has_highway_locate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highway_locate());
    }

    // optional .WarningProto.WarningResult warning_result = 21;
    if (has_warning_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warning_result());
    }

    // optional .CommonProto.OdometryFrame odometry = 22;
    if (has_odometry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odometry());
    }

    // optional .CommonProto.CameraParam camera_param_default = 12;
    if (has_camera_param_default()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_param_default());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .SensorProto.IMUFrame imu_offset = 36;
    if (has_imu_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu_offset());
    }

  }
  // repeated .FrameV0Proto.ObstacleResult vehiles = 9;
  total_size += 1 * this->vehiles_size();
  for (int i = 0; i < this->vehiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehiles(i));
  }

  // repeated .CommonProto.Line lanes = 25;
  total_size += 2 * this->lanes_size();
  for (int i = 0; i < this->lanes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lanes(i));
  }

  // repeated .CANProto.CANFrameRaw can_frames_raw = 20;
  total_size += 2 * this->can_frames_raw_size();
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->can_frames_raw(i));
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 8;
  total_size += 1 * this->imu_frames_raw_size();
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imu_frames_raw(i));
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 6;
  total_size += 1 * this->gps_frames_raw_size();
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gps_frames_raw(i));
  }

  // repeated .CommonProto.FreeSpaceResult freespace = 10;
  total_size += 1 * this->freespace_size();
  for (int i = 0; i < this->freespace_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freespace(i));
  }

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 5;
  total_size += 1 * this->pedestrians_size();
  for (int i = 0; i < this->pedestrians_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pedestrians(i));
  }

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 28;
  total_size += 2 * this->boxes_3d_size();
  for (int i = 0; i < this->boxes_3d_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes_3d(i));
  }

  // repeated .CommonProto.Skeleton skeletons = 29;
  total_size += 2 * this->skeletons_size();
  for (int i = 0; i < this->skeletons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skeletons(i));
  }

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 16;
  total_size += 2 * this->vehicle_raw_size();
  for (int i = 0; i < this->vehicle_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicle_raw(i));
  }

  // repeated .CommonProto.ObstacleRaw lane_raw = 15;
  total_size += 1 * this->lane_raw_size();
  for (int i = 0; i < this->lane_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane_raw(i));
  }

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 14;
  total_size += 1 * this->pedestrians_raw_size();
  for (int i = 0; i < this->pedestrians_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pedestrians_raw(i));
  }

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  total_size += 2 * this->obj_raw_size();
  for (int i = 0; i < this->obj_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obj_raw(i));
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 1000;
  total_size += 2 * this->traffic_signs_size();
  for (int i = 0; i < this->traffic_signs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_signs(i));
  }

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 1001;
  total_size += 2 * this->traffic_lights_size();
  for (int i = 0; i < this->traffic_lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_lights(i));
  }

  // repeated .FrameV0Proto.SerializedData extra_info = 101;
  total_size += 2 * this->extra_info_size();
  for (int i = 0; i < this->extra_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameShuffle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameShuffle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameShuffle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameShuffle::MergeFrom(const FrameShuffle& from) {
  GOOGLE_CHECK_NE(&from, this);
  vehiles_.MergeFrom(from.vehiles_);
  lanes_.MergeFrom(from.lanes_);
  can_frames_raw_.MergeFrom(from.can_frames_raw_);
  imu_frames_raw_.MergeFrom(from.imu_frames_raw_);
  gps_frames_raw_.MergeFrom(from.gps_frames_raw_);
  freespace_.MergeFrom(from.freespace_);
  pedestrians_.MergeFrom(from.pedestrians_);
  boxes_3d_.MergeFrom(from.boxes_3d_);
  skeletons_.MergeFrom(from.skeletons_);
  vehicle_raw_.MergeFrom(from.vehicle_raw_);
  lane_raw_.MergeFrom(from.lane_raw_);
  pedestrians_raw_.MergeFrom(from.pedestrians_raw_);
  obj_raw_.MergeFrom(from.obj_raw_);
  traffic_signs_.MergeFrom(from.traffic_signs_);
  traffic_lights_.MergeFrom(from.traffic_lights_);
  extra_info_.MergeFrom(from.extra_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_img_frame()) {
      mutable_img_frame()->::CommonProto::Image::MergeFrom(from.img_frame());
    }
    if (from.has_gps_frame()) {
      mutable_gps_frame()->::SensorProto::GPSFrame::MergeFrom(from.gps_frame());
    }
    if (from.has_camera()) {
      mutable_camera()->::CommonProto::CameraMatrix::MergeFrom(from.camera());
    }
    if (from.has_can_frames()) {
      mutable_can_frames()->::CANProto::CANFrame::MergeFrom(from.can_frames());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fcw()) {
      mutable_fcw()->::WarningProto::FCW::MergeFrom(from.fcw());
    }
    if (from.has_ldw()) {
      mutable_ldw()->::WarningProto::LDW::MergeFrom(from.ldw());
    }
    if (from.has_imu_frame()) {
      mutable_imu_frame()->::SensorProto::IMUFrame::MergeFrom(from.imu_frame());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_motion_frame()) {
      mutable_motion_frame()->::CommonProto::MotionFrame::MergeFrom(from.motion_frame());
    }
    if (from.has_camera_param()) {
      mutable_camera_param()->::CommonProto::CameraParam::MergeFrom(from.camera_param());
    }
    if (from.has_parsing_frame()) {
      mutable_parsing_frame()->::CommonProto::Image::MergeFrom(from.parsing_frame());
    }
  }
  if (from._has_bits_[28 / 32] & (0xffu << (28 % 32))) {
    if (from.has_highway_locate()) {
      mutable_highway_locate()->::CommonProto::HighwayLocate::MergeFrom(from.highway_locate());
    }
    if (from.has_warning_result()) {
      mutable_warning_result()->::WarningProto::WarningResult::MergeFrom(from.warning_result());
    }
    if (from.has_odometry()) {
      mutable_odometry()->::CommonProto::OdometryFrame::MergeFrom(from.odometry());
    }
    if (from.has_camera_param_default()) {
      mutable_camera_param_default()->::CommonProto::CameraParam::MergeFrom(from.camera_param_default());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_imu_offset()) {
      mutable_imu_offset()->::SensorProto::IMUFrame::MergeFrom(from.imu_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameShuffle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameShuffle::CopyFrom(const FrameShuffle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameShuffle::IsInitialized() const {

  if (has_img_frame()) {
    if (!this->img_frame().IsInitialized()) return false;
  }
  if (has_gps_frame()) {
    if (!this->gps_frame().IsInitialized()) return false;
  }
  if (has_can_frames()) {
    if (!this->can_frames().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->vehiles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lanes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->can_frames_raw())) return false;
  if (has_imu_frame()) {
    if (!this->imu_frame().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->imu_frames_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gps_frames_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->freespace())) return false;
  if (has_motion_frame()) {
    if (!this->motion_frame().IsInitialized()) return false;
  }
  if (has_camera_param()) {
    if (!this->camera_param().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pedestrians())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->boxes_3d())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skeletons())) return false;
  if (has_parsing_frame()) {
    if (!this->parsing_frame().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->vehicle_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lane_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pedestrians_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->obj_raw())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_signs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_lights())) return false;
  if (has_odometry()) {
    if (!this->odometry().IsInitialized()) return false;
  }
  if (has_camera_param_default()) {
    if (!this->camera_param_default().IsInitialized()) return false;
  }
  if (has_imu_offset()) {
    if (!this->imu_offset().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->extra_info())) return false;
  return true;
}

void FrameShuffle::Swap(FrameShuffle* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(img_frame_, other->img_frame_);
    std::swap(gps_frame_, other->gps_frame_);
    std::swap(camera_, other->camera_);
    std::swap(can_frames_, other->can_frames_);
    vehiles_.Swap(&other->vehiles_);
    lanes_.Swap(&other->lanes_);
    std::swap(fcw_, other->fcw_);
    std::swap(ldw_, other->ldw_);
    can_frames_raw_.Swap(&other->can_frames_raw_);
    std::swap(imu_frame_, other->imu_frame_);
    imu_frames_raw_.Swap(&other->imu_frames_raw_);
    gps_frames_raw_.Swap(&other->gps_frames_raw_);
    freespace_.Swap(&other->freespace_);
    std::swap(source_, other->source_);
    std::swap(motion_frame_, other->motion_frame_);
    std::swap(camera_param_, other->camera_param_);
    pedestrians_.Swap(&other->pedestrians_);
    boxes_3d_.Swap(&other->boxes_3d_);
    skeletons_.Swap(&other->skeletons_);
    std::swap(parsing_frame_, other->parsing_frame_);
    vehicle_raw_.Swap(&other->vehicle_raw_);
    lane_raw_.Swap(&other->lane_raw_);
    pedestrians_raw_.Swap(&other->pedestrians_raw_);
    obj_raw_.Swap(&other->obj_raw_);
    traffic_signs_.Swap(&other->traffic_signs_);
    traffic_lights_.Swap(&other->traffic_lights_);
    std::swap(highway_locate_, other->highway_locate_);
    std::swap(warning_result_, other->warning_result_);
    std::swap(odometry_, other->odometry_);
    std::swap(camera_param_default_, other->camera_param_default_);
    std::swap(imu_offset_, other->imu_offset_);
    extra_info_.Swap(&other->extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameShuffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameShuffle_descriptor_;
  metadata.reflection = FrameShuffle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FrameV0Proto

// @@protoc_insertion_point(global_scope)
