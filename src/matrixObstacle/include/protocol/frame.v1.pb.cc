// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.v1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "frame.v1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FrameV1Proto {

namespace {

const ::google::protobuf::Descriptor* Box3DResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box3DResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* StructurePerception_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StructurePerception_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameShuffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameShuffle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_frame_2ev1_2eproto() {
  protobuf_AddDesc_frame_2ev1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "frame.v1.proto");
  GOOGLE_CHECK(file != NULL);
  Box3DResult_descriptor_ = file->message_type(0);
  static const int Box3DResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, box_),
  };
  Box3DResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Box3DResult_descriptor_,
      Box3DResult::default_instance_,
      Box3DResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box3DResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Box3DResult));
  SensorFrame_descriptor_ = file->message_type(1);
  static const int SensorFrame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, can_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, can_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, imu_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, imu_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, imu_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, gps_frames_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, gps_frame_),
  };
  SensorFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorFrame_descriptor_,
      SensorFrame::default_instance_,
      SensorFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorFrame));
  StructurePerception_descriptor_ = file->message_type(2);
  static const int StructurePerception_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, obstacles_raws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, boxes_3d_raws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, skeletons_raws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, obstacles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, parsing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, scan_pts_),
  };
  StructurePerception_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StructurePerception_descriptor_,
      StructurePerception::default_instance_,
      StructurePerception_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructurePerception, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StructurePerception));
  Frame_descriptor_ = file->message_type(3);
  static const int Frame_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, camera_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, camera_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, data_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, motion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, odometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, structure_perception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, extra_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, online_cali_status_),
  };
  Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Frame));
  FrameShuffle_descriptor_ = file->message_type(4);
  static const int FrameShuffle_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, data_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, camera_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, camera_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, motion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, odometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, structure_perception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, extra_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, online_cali_status_),
  };
  FrameShuffle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameShuffle_descriptor_,
      FrameShuffle::default_instance_,
      FrameShuffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameShuffle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_frame_2ev1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Box3DResult_descriptor_, &Box3DResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorFrame_descriptor_, &SensorFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StructurePerception_descriptor_, &StructurePerception::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameShuffle_descriptor_, &FrameShuffle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_frame_2ev1_2eproto() {
  delete Box3DResult::default_instance_;
  delete Box3DResult_reflection_;
  delete SensorFrame::default_instance_;
  delete SensorFrame_reflection_;
  delete StructurePerception::default_instance_;
  delete StructurePerception_reflection_;
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete FrameShuffle::default_instance_;
  delete FrameShuffle_reflection_;
}

void protobuf_AddDesc_frame_2ev1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonProto::protobuf_AddDesc_common_2eproto();
  ::CANProto::protobuf_AddDesc_can_2eproto();
  ::SensorProto::protobuf_AddDesc_sensor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016frame.v1.proto\022\014FrameV1Proto\032\014common.p"
    "roto\032\tcan.proto\032\014sensor.proto\":\n\013Box3DRe"
    "sult\022\n\n\002id\030\001 \002(\005\022\037\n\003box\030\002 \002(\0132\022.CommonPr"
    "oto.Box3D\"\304\002\n\013SensorFrame\022-\n\016can_frames_"
    "raw\030\001 \003(\0132\025.CANProto.CANFrameRaw\022&\n\ncan_"
    "frames\030\002 \001(\0132\022.CANProto.CANFrame\022-\n\016imu_"
    "frames_raw\030\013 \003(\0132\025.SensorProto.IMUFrame\022"
    "(\n\timu_frame\030\014 \001(\0132\025.SensorProto.IMUFram"
    "e\022)\n\nimu_offset\030\r \001(\0132\025.SensorProto.IMUF"
    "rame\0220\n\016gps_frames_raw\030\025 \003(\0132\030.SensorPro"
    "to.GPSFrameRaw\022(\n\tgps_frame\030\026 \001(\0132\025.Sens"
    "orProto.GPSFrame\"\353\002\n\023StructurePerception"
    "\0221\n\016obstacles_raws\030\001 \003(\0132\031.CommonProto.O"
    "bstacleRaws\022-\n\rboxes_3d_raws\030\002 \003(\0132\026.Com"
    "monProto.Box3DRaws\0221\n\016skeletons_raws\030\003 \003"
    "(\0132\031.CommonProto.SkeletonRaws\022)\n\tobstacl"
    "es\030\n \003(\0132\026.CommonProto.Obstacles\022!\n\005line"
    "s\030\013 \003(\0132\022.CommonProto.Lines\022#\n\007parsing\030\024"
    " \003(\0132\022.CommonProto.Image\022!\n\005depth\030\025 \003(\0132"
    "\022.CommonProto.Image\022)\n\010scan_pts\030\036 \003(\0132\027."
    "CommonProto.ScanPoints\"\302\004\n\005Frame\022\017\n\007vers"
    "ion\030\001 \001(\005\022\020\n\010frame_id\030\002 \001(\005\022!\n\005image\030\003 \003"
    "(\0132\022.CommonProto.Image\022(\n\006camera\030\004 \003(\0132\030"
    ".CommonProto.CameraParam\0220\n\016camera_defau"
    "lt\030\005 \003(\0132\030.CommonProto.CameraParam\0220\n\rca"
    "mera_matrix\030\006 \003(\0132\031.CommonProto.CameraMa"
    "trix\0224\n\017data_descriptor\030\007 \003(\0132\033.CommonPr"
    "oto.DataDescriptor\022)\n\006sensor\030\n \001(\0132\031.Fra"
    "meV1Proto.SensorFrame\022(\n\006motion\030\013 \001(\0132\030."
    "CommonProto.MotionFrame\022,\n\010odometry\030\014 \001("
    "\0132\032.CommonProto.OdometryFrame\022\?\n\024structu"
    "re_perception\030\025 \001(\0132!.FrameV1Proto.Struc"
    "turePerception\022/\n\nextra_info\030e \003(\0132\033.Com"
    "monProto.SerializedData\022:\n\022online_cali_s"
    "tatus\030\226\001 \001(\0132\035.CommonProto.OnlineCaliSta"
    "tus\"\311\004\n\014FrameShuffle\022\017\n\007version\030\001 \002(\005\022\020\n"
    "\010frame_id\030\002 \002(\005\022!\n\005image\030\003 \003(\0132\022.CommonP"
    "roto.Image\0224\n\017data_descriptor\030\004 \003(\0132\033.Co"
    "mmonProto.DataDescriptor\022(\n\006camera\030\n \003(\013"
    "2\030.CommonProto.CameraParam\0220\n\016camera_def"
    "ault\030\013 \003(\0132\030.CommonProto.CameraParam\0220\n\r"
    "camera_matrix\030\014 \003(\0132\031.CommonProto.Camera"
    "Matrix\022)\n\006sensor\030\024 \001(\0132\031.FrameV1Proto.Se"
    "nsorFrame\022(\n\006motion\030\025 \001(\0132\030.CommonProto."
    "MotionFrame\022,\n\010odometry\030\026 \001(\0132\032.CommonPr"
    "oto.OdometryFrame\022\?\n\024structure_perceptio"
    "n\030\036 \001(\0132!.FrameV1Proto.StructurePercepti"
    "on\022/\n\nextra_info\030( \003(\0132\033.CommonProto.Ser"
    "ializedData\022:\n\022online_cali_status\030\226\001 \002(\013"
    "2\035.CommonProto.OnlineCaliStatus", 1991);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frame.v1.proto", &protobuf_RegisterTypes);
  Box3DResult::default_instance_ = new Box3DResult();
  SensorFrame::default_instance_ = new SensorFrame();
  StructurePerception::default_instance_ = new StructurePerception();
  Frame::default_instance_ = new Frame();
  FrameShuffle::default_instance_ = new FrameShuffle();
  Box3DResult::default_instance_->InitAsDefaultInstance();
  SensorFrame::default_instance_->InitAsDefaultInstance();
  StructurePerception::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  FrameShuffle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_frame_2ev1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_frame_2ev1_2eproto {
  StaticDescriptorInitializer_frame_2ev1_2eproto() {
    protobuf_AddDesc_frame_2ev1_2eproto();
  }
} static_descriptor_initializer_frame_2ev1_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Box3DResult::kIdFieldNumber;
const int Box3DResult::kBoxFieldNumber;
#endif  // !_MSC_VER

Box3DResult::Box3DResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV1Proto.Box3DResult)
}

void Box3DResult::InitAsDefaultInstance() {
  box_ = const_cast< ::CommonProto::Box3D*>(&::CommonProto::Box3D::default_instance());
}

Box3DResult::Box3DResult(const Box3DResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV1Proto.Box3DResult)
}

void Box3DResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  box_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Box3DResult::~Box3DResult() {
  // @@protoc_insertion_point(destructor:FrameV1Proto.Box3DResult)
  SharedDtor();
}

void Box3DResult::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void Box3DResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box3DResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box3DResult_descriptor_;
}

const Box3DResult& Box3DResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev1_2eproto();
  return *default_instance_;
}

Box3DResult* Box3DResult::default_instance_ = NULL;

Box3DResult* Box3DResult::New() const {
  return new Box3DResult;
}

void Box3DResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_box()) {
      if (box_ != NULL) box_->::CommonProto::Box3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Box3DResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV1Proto.Box3DResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // required .CommonProto.Box3D box = 2;
      case 2: {
        if (tag == 18) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV1Proto.Box3DResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV1Proto.Box3DResult)
  return false;
#undef DO_
}

void Box3DResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV1Proto.Box3DResult)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .CommonProto.Box3D box = 2;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->box(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV1Proto.Box3DResult)
}

::google::protobuf::uint8* Box3DResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV1Proto.Box3DResult)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .CommonProto.Box3D box = 2;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->box(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV1Proto.Box3DResult)
  return target;
}

int Box3DResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .CommonProto.Box3D box = 2;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box3DResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Box3DResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Box3DResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Box3DResult::MergeFrom(const Box3DResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_box()) {
      mutable_box()->::CommonProto::Box3D::MergeFrom(from.box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Box3DResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3DResult::CopyFrom(const Box3DResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3DResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  return true;
}

void Box3DResult::Swap(Box3DResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(box_, other->box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Box3DResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box3DResult_descriptor_;
  metadata.reflection = Box3DResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorFrame::kCanFramesRawFieldNumber;
const int SensorFrame::kCanFramesFieldNumber;
const int SensorFrame::kImuFramesRawFieldNumber;
const int SensorFrame::kImuFrameFieldNumber;
const int SensorFrame::kImuOffsetFieldNumber;
const int SensorFrame::kGpsFramesRawFieldNumber;
const int SensorFrame::kGpsFrameFieldNumber;
#endif  // !_MSC_VER

SensorFrame::SensorFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV1Proto.SensorFrame)
}

void SensorFrame::InitAsDefaultInstance() {
  can_frames_ = const_cast< ::CANProto::CANFrame*>(&::CANProto::CANFrame::default_instance());
  imu_frame_ = const_cast< ::SensorProto::IMUFrame*>(&::SensorProto::IMUFrame::default_instance());
  imu_offset_ = const_cast< ::SensorProto::IMUFrame*>(&::SensorProto::IMUFrame::default_instance());
  gps_frame_ = const_cast< ::SensorProto::GPSFrame*>(&::SensorProto::GPSFrame::default_instance());
}

SensorFrame::SensorFrame(const SensorFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV1Proto.SensorFrame)
}

void SensorFrame::SharedCtor() {
  _cached_size_ = 0;
  can_frames_ = NULL;
  imu_frame_ = NULL;
  imu_offset_ = NULL;
  gps_frame_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorFrame::~SensorFrame() {
  // @@protoc_insertion_point(destructor:FrameV1Proto.SensorFrame)
  SharedDtor();
}

void SensorFrame::SharedDtor() {
  if (this != default_instance_) {
    delete can_frames_;
    delete imu_frame_;
    delete imu_offset_;
    delete gps_frame_;
  }
}

void SensorFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorFrame_descriptor_;
}

const SensorFrame& SensorFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev1_2eproto();
  return *default_instance_;
}

SensorFrame* SensorFrame::default_instance_ = NULL;

SensorFrame* SensorFrame::New() const {
  return new SensorFrame;
}

void SensorFrame::Clear() {
  if (_has_bits_[0 / 32] & 90) {
    if (has_can_frames()) {
      if (can_frames_ != NULL) can_frames_->::CANProto::CANFrame::Clear();
    }
    if (has_imu_frame()) {
      if (imu_frame_ != NULL) imu_frame_->::SensorProto::IMUFrame::Clear();
    }
    if (has_imu_offset()) {
      if (imu_offset_ != NULL) imu_offset_->::SensorProto::IMUFrame::Clear();
    }
    if (has_gps_frame()) {
      if (gps_frame_ != NULL) gps_frame_->::SensorProto::GPSFrame::Clear();
    }
  }
  can_frames_raw_.Clear();
  imu_frames_raw_.Clear();
  gps_frames_raw_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV1Proto.SensorFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
      case 1: {
        if (tag == 10) {
         parse_can_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_can_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_can_frames_raw;
        if (input->ExpectTag(18)) goto parse_can_frames;
        break;
      }

      // optional .CANProto.CANFrame can_frames = 2;
      case 2: {
        if (tag == 18) {
         parse_can_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_can_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_imu_frames_raw;
        break;
      }

      // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
      case 11: {
        if (tag == 90) {
         parse_imu_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imu_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_imu_frames_raw;
        if (input->ExpectTag(98)) goto parse_imu_frame;
        break;
      }

      // optional .SensorProto.IMUFrame imu_frame = 12;
      case 12: {
        if (tag == 98) {
         parse_imu_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_imu_offset;
        break;
      }

      // optional .SensorProto.IMUFrame imu_offset = 13;
      case 13: {
        if (tag == 106) {
         parse_imu_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_gps_frames_raw;
        break;
      }

      // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
      case 21: {
        if (tag == 170) {
         parse_gps_frames_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gps_frames_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_gps_frames_raw;
        if (input->ExpectTag(178)) goto parse_gps_frame;
        break;
      }

      // optional .SensorProto.GPSFrame gps_frame = 22;
      case 22: {
        if (tag == 178) {
         parse_gps_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV1Proto.SensorFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV1Proto.SensorFrame)
  return false;
#undef DO_
}

void SensorFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV1Proto.SensorFrame)
  // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->can_frames_raw(i), output);
  }

  // optional .CANProto.CANFrame can_frames = 2;
  if (has_can_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->can_frames(), output);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->imu_frames_raw(i), output);
  }

  // optional .SensorProto.IMUFrame imu_frame = 12;
  if (has_imu_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->imu_frame(), output);
  }

  // optional .SensorProto.IMUFrame imu_offset = 13;
  if (has_imu_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->imu_offset(), output);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->gps_frames_raw(i), output);
  }

  // optional .SensorProto.GPSFrame gps_frame = 22;
  if (has_gps_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->gps_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV1Proto.SensorFrame)
}

::google::protobuf::uint8* SensorFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV1Proto.SensorFrame)
  // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->can_frames_raw(i), target);
  }

  // optional .CANProto.CANFrame can_frames = 2;
  if (has_can_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->can_frames(), target);
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->imu_frames_raw(i), target);
  }

  // optional .SensorProto.IMUFrame imu_frame = 12;
  if (has_imu_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->imu_frame(), target);
  }

  // optional .SensorProto.IMUFrame imu_offset = 13;
  if (has_imu_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->imu_offset(), target);
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->gps_frames_raw(i), target);
  }

  // optional .SensorProto.GPSFrame gps_frame = 22;
  if (has_gps_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->gps_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV1Proto.SensorFrame)
  return target;
}

int SensorFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .CANProto.CANFrame can_frames = 2;
    if (has_can_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->can_frames());
    }

    // optional .SensorProto.IMUFrame imu_frame = 12;
    if (has_imu_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu_frame());
    }

    // optional .SensorProto.IMUFrame imu_offset = 13;
    if (has_imu_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu_offset());
    }

    // optional .SensorProto.GPSFrame gps_frame = 22;
    if (has_gps_frame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps_frame());
    }

  }
  // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
  total_size += 1 * this->can_frames_raw_size();
  for (int i = 0; i < this->can_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->can_frames_raw(i));
  }

  // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
  total_size += 1 * this->imu_frames_raw_size();
  for (int i = 0; i < this->imu_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imu_frames_raw(i));
  }

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
  total_size += 2 * this->gps_frames_raw_size();
  for (int i = 0; i < this->gps_frames_raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gps_frames_raw(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorFrame::MergeFrom(const SensorFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  can_frames_raw_.MergeFrom(from.can_frames_raw_);
  imu_frames_raw_.MergeFrom(from.imu_frames_raw_);
  gps_frames_raw_.MergeFrom(from.gps_frames_raw_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_can_frames()) {
      mutable_can_frames()->::CANProto::CANFrame::MergeFrom(from.can_frames());
    }
    if (from.has_imu_frame()) {
      mutable_imu_frame()->::SensorProto::IMUFrame::MergeFrom(from.imu_frame());
    }
    if (from.has_imu_offset()) {
      mutable_imu_offset()->::SensorProto::IMUFrame::MergeFrom(from.imu_offset());
    }
    if (from.has_gps_frame()) {
      mutable_gps_frame()->::SensorProto::GPSFrame::MergeFrom(from.gps_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorFrame::CopyFrom(const SensorFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorFrame::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->can_frames_raw())) return false;
  if (has_can_frames()) {
    if (!this->can_frames().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->imu_frames_raw())) return false;
  if (has_imu_frame()) {
    if (!this->imu_frame().IsInitialized()) return false;
  }
  if (has_imu_offset()) {
    if (!this->imu_offset().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->gps_frames_raw())) return false;
  if (has_gps_frame()) {
    if (!this->gps_frame().IsInitialized()) return false;
  }
  return true;
}

void SensorFrame::Swap(SensorFrame* other) {
  if (other != this) {
    can_frames_raw_.Swap(&other->can_frames_raw_);
    std::swap(can_frames_, other->can_frames_);
    imu_frames_raw_.Swap(&other->imu_frames_raw_);
    std::swap(imu_frame_, other->imu_frame_);
    std::swap(imu_offset_, other->imu_offset_);
    gps_frames_raw_.Swap(&other->gps_frames_raw_);
    std::swap(gps_frame_, other->gps_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorFrame_descriptor_;
  metadata.reflection = SensorFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StructurePerception::kObstaclesRawsFieldNumber;
const int StructurePerception::kBoxes3DRawsFieldNumber;
const int StructurePerception::kSkeletonsRawsFieldNumber;
const int StructurePerception::kObstaclesFieldNumber;
const int StructurePerception::kLinesFieldNumber;
const int StructurePerception::kParsingFieldNumber;
const int StructurePerception::kDepthFieldNumber;
const int StructurePerception::kScanPtsFieldNumber;
#endif  // !_MSC_VER

StructurePerception::StructurePerception()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV1Proto.StructurePerception)
}

void StructurePerception::InitAsDefaultInstance() {
}

StructurePerception::StructurePerception(const StructurePerception& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV1Proto.StructurePerception)
}

void StructurePerception::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StructurePerception::~StructurePerception() {
  // @@protoc_insertion_point(destructor:FrameV1Proto.StructurePerception)
  SharedDtor();
}

void StructurePerception::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StructurePerception::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StructurePerception::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StructurePerception_descriptor_;
}

const StructurePerception& StructurePerception::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev1_2eproto();
  return *default_instance_;
}

StructurePerception* StructurePerception::default_instance_ = NULL;

StructurePerception* StructurePerception::New() const {
  return new StructurePerception;
}

void StructurePerception::Clear() {
  obstacles_raws_.Clear();
  boxes_3d_raws_.Clear();
  skeletons_raws_.Clear();
  obstacles_.Clear();
  lines_.Clear();
  parsing_.Clear();
  depth_.Clear();
  scan_pts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StructurePerception::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV1Proto.StructurePerception)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
      case 1: {
        if (tag == 10) {
         parse_obstacles_raws:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles_raws()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_obstacles_raws;
        if (input->ExpectTag(18)) goto parse_boxes_3d_raws;
        break;
      }

      // repeated .CommonProto.Box3DRaws boxes_3d_raws = 2;
      case 2: {
        if (tag == 18) {
         parse_boxes_3d_raws:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes_3d_raws()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_boxes_3d_raws;
        if (input->ExpectTag(26)) goto parse_skeletons_raws;
        break;
      }

      // repeated .CommonProto.SkeletonRaws skeletons_raws = 3;
      case 3: {
        if (tag == 26) {
         parse_skeletons_raws:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skeletons_raws()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skeletons_raws;
        if (input->ExpectTag(82)) goto parse_obstacles;
        break;
      }

      // repeated .CommonProto.Obstacles obstacles = 10;
      case 10: {
        if (tag == 82) {
         parse_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_obstacles;
        if (input->ExpectTag(90)) goto parse_lines;
        break;
      }

      // repeated .CommonProto.Lines lines = 11;
      case 11: {
        if (tag == 90) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_lines;
        if (input->ExpectTag(162)) goto parse_parsing;
        break;
      }

      // repeated .CommonProto.Image parsing = 20;
      case 20: {
        if (tag == 162) {
         parse_parsing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parsing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_parsing;
        if (input->ExpectTag(170)) goto parse_depth;
        break;
      }

      // repeated .CommonProto.Image depth = 21;
      case 21: {
        if (tag == 170) {
         parse_depth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_depth;
        if (input->ExpectTag(242)) goto parse_scan_pts;
        break;
      }

      // repeated .CommonProto.ScanPoints scan_pts = 30;
      case 30: {
        if (tag == 242) {
         parse_scan_pts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scan_pts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_scan_pts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV1Proto.StructurePerception)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV1Proto.StructurePerception)
  return false;
#undef DO_
}

void StructurePerception::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV1Proto.StructurePerception)
  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  for (int i = 0; i < this->obstacles_raws_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obstacles_raws(i), output);
  }

  // repeated .CommonProto.Box3DRaws boxes_3d_raws = 2;
  for (int i = 0; i < this->boxes_3d_raws_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boxes_3d_raws(i), output);
  }

  // repeated .CommonProto.SkeletonRaws skeletons_raws = 3;
  for (int i = 0; i < this->skeletons_raws_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skeletons_raws(i), output);
  }

  // repeated .CommonProto.Obstacles obstacles = 10;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->obstacles(i), output);
  }

  // repeated .CommonProto.Lines lines = 11;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lines(i), output);
  }

  // repeated .CommonProto.Image parsing = 20;
  for (int i = 0; i < this->parsing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->parsing(i), output);
  }

  // repeated .CommonProto.Image depth = 21;
  for (int i = 0; i < this->depth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->depth(i), output);
  }

  // repeated .CommonProto.ScanPoints scan_pts = 30;
  for (int i = 0; i < this->scan_pts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->scan_pts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV1Proto.StructurePerception)
}

::google::protobuf::uint8* StructurePerception::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV1Proto.StructurePerception)
  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  for (int i = 0; i < this->obstacles_raws_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obstacles_raws(i), target);
  }

  // repeated .CommonProto.Box3DRaws boxes_3d_raws = 2;
  for (int i = 0; i < this->boxes_3d_raws_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boxes_3d_raws(i), target);
  }

  // repeated .CommonProto.SkeletonRaws skeletons_raws = 3;
  for (int i = 0; i < this->skeletons_raws_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skeletons_raws(i), target);
  }

  // repeated .CommonProto.Obstacles obstacles = 10;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->obstacles(i), target);
  }

  // repeated .CommonProto.Lines lines = 11;
  for (int i = 0; i < this->lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lines(i), target);
  }

  // repeated .CommonProto.Image parsing = 20;
  for (int i = 0; i < this->parsing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->parsing(i), target);
  }

  // repeated .CommonProto.Image depth = 21;
  for (int i = 0; i < this->depth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->depth(i), target);
  }

  // repeated .CommonProto.ScanPoints scan_pts = 30;
  for (int i = 0; i < this->scan_pts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->scan_pts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV1Proto.StructurePerception)
  return target;
}

int StructurePerception::ByteSize() const {
  int total_size = 0;

  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  total_size += 1 * this->obstacles_raws_size();
  for (int i = 0; i < this->obstacles_raws_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles_raws(i));
  }

  // repeated .CommonProto.Box3DRaws boxes_3d_raws = 2;
  total_size += 1 * this->boxes_3d_raws_size();
  for (int i = 0; i < this->boxes_3d_raws_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes_3d_raws(i));
  }

  // repeated .CommonProto.SkeletonRaws skeletons_raws = 3;
  total_size += 1 * this->skeletons_raws_size();
  for (int i = 0; i < this->skeletons_raws_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skeletons_raws(i));
  }

  // repeated .CommonProto.Obstacles obstacles = 10;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }

  // repeated .CommonProto.Lines lines = 11;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  // repeated .CommonProto.Image parsing = 20;
  total_size += 2 * this->parsing_size();
  for (int i = 0; i < this->parsing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parsing(i));
  }

  // repeated .CommonProto.Image depth = 21;
  total_size += 2 * this->depth_size();
  for (int i = 0; i < this->depth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depth(i));
  }

  // repeated .CommonProto.ScanPoints scan_pts = 30;
  total_size += 2 * this->scan_pts_size();
  for (int i = 0; i < this->scan_pts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scan_pts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StructurePerception::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StructurePerception* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StructurePerception*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StructurePerception::MergeFrom(const StructurePerception& from) {
  GOOGLE_CHECK_NE(&from, this);
  obstacles_raws_.MergeFrom(from.obstacles_raws_);
  boxes_3d_raws_.MergeFrom(from.boxes_3d_raws_);
  skeletons_raws_.MergeFrom(from.skeletons_raws_);
  obstacles_.MergeFrom(from.obstacles_);
  lines_.MergeFrom(from.lines_);
  parsing_.MergeFrom(from.parsing_);
  depth_.MergeFrom(from.depth_);
  scan_pts_.MergeFrom(from.scan_pts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StructurePerception::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructurePerception::CopyFrom(const StructurePerception& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructurePerception::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles_raws())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->boxes_3d_raws())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skeletons_raws())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->parsing())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->depth())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->scan_pts())) return false;
  return true;
}

void StructurePerception::Swap(StructurePerception* other) {
  if (other != this) {
    obstacles_raws_.Swap(&other->obstacles_raws_);
    boxes_3d_raws_.Swap(&other->boxes_3d_raws_);
    skeletons_raws_.Swap(&other->skeletons_raws_);
    obstacles_.Swap(&other->obstacles_);
    lines_.Swap(&other->lines_);
    parsing_.Swap(&other->parsing_);
    depth_.Swap(&other->depth_);
    scan_pts_.Swap(&other->scan_pts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StructurePerception::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StructurePerception_descriptor_;
  metadata.reflection = StructurePerception_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Frame::kVersionFieldNumber;
const int Frame::kFrameIdFieldNumber;
const int Frame::kImageFieldNumber;
const int Frame::kCameraFieldNumber;
const int Frame::kCameraDefaultFieldNumber;
const int Frame::kCameraMatrixFieldNumber;
const int Frame::kDataDescriptorFieldNumber;
const int Frame::kSensorFieldNumber;
const int Frame::kMotionFieldNumber;
const int Frame::kOdometryFieldNumber;
const int Frame::kStructurePerceptionFieldNumber;
const int Frame::kExtraInfoFieldNumber;
const int Frame::kOnlineCaliStatusFieldNumber;
#endif  // !_MSC_VER

Frame::Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV1Proto.Frame)
}

void Frame::InitAsDefaultInstance() {
  sensor_ = const_cast< ::FrameV1Proto::SensorFrame*>(&::FrameV1Proto::SensorFrame::default_instance());
  motion_ = const_cast< ::CommonProto::MotionFrame*>(&::CommonProto::MotionFrame::default_instance());
  odometry_ = const_cast< ::CommonProto::OdometryFrame*>(&::CommonProto::OdometryFrame::default_instance());
  structure_perception_ = const_cast< ::FrameV1Proto::StructurePerception*>(&::FrameV1Proto::StructurePerception::default_instance());
  online_cali_status_ = const_cast< ::CommonProto::OnlineCaliStatus*>(&::CommonProto::OnlineCaliStatus::default_instance());
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV1Proto.Frame)
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  frame_id_ = 0;
  sensor_ = NULL;
  motion_ = NULL;
  odometry_ = NULL;
  structure_perception_ = NULL;
  online_cali_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:FrameV1Proto.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_;
    delete motion_;
    delete odometry_;
    delete structure_perception_;
    delete online_cali_status_;
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev1_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New() const {
  return new Frame;
}

void Frame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Frame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 131) {
    ZR_(version_, frame_id_);
    if (has_sensor()) {
      if (sensor_ != NULL) sensor_->::FrameV1Proto::SensorFrame::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 5888) {
    if (has_motion()) {
      if (motion_ != NULL) motion_->::CommonProto::MotionFrame::Clear();
    }
    if (has_odometry()) {
      if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
    }
    if (has_structure_perception()) {
      if (structure_perception_ != NULL) structure_perception_->::FrameV1Proto::StructurePerception::Clear();
    }
    if (has_online_cali_status()) {
      if (online_cali_status_ != NULL) online_cali_status_->::CommonProto::OnlineCaliStatus::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  image_.Clear();
  camera_.Clear();
  camera_default_.Clear();
  camera_matrix_.Clear();
  data_descriptor_.Clear();
  extra_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV1Proto.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_id;
        break;
      }

      // optional int32 frame_id = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // repeated .CommonProto.Image image = 3;
      case 3: {
        if (tag == 26) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image;
        if (input->ExpectTag(34)) goto parse_camera;
        break;
      }

      // repeated .CommonProto.CameraParam camera = 4;
      case 4: {
        if (tag == 34) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_camera;
        if (input->ExpectTag(42)) goto parse_camera_default;
        break;
      }

      // repeated .CommonProto.CameraParam camera_default = 5;
      case 5: {
        if (tag == 42) {
         parse_camera_default:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_default()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_camera_default;
        if (input->ExpectTag(50)) goto parse_camera_matrix;
        break;
      }

      // repeated .CommonProto.CameraMatrix camera_matrix = 6;
      case 6: {
        if (tag == 50) {
         parse_camera_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_camera_matrix;
        if (input->ExpectTag(58)) goto parse_data_descriptor;
        break;
      }

      // repeated .CommonProto.DataDescriptor data_descriptor = 7;
      case 7: {
        if (tag == 58) {
         parse_data_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_descriptor;
        if (input->ExpectTag(82)) goto parse_sensor;
        break;
      }

      // optional .FrameV1Proto.SensorFrame sensor = 10;
      case 10: {
        if (tag == 82) {
         parse_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_motion;
        break;
      }

      // optional .CommonProto.MotionFrame motion = 11;
      case 11: {
        if (tag == 90) {
         parse_motion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_odometry;
        break;
      }

      // optional .CommonProto.OdometryFrame odometry = 12;
      case 12: {
        if (tag == 98) {
         parse_odometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_structure_perception;
        break;
      }

      // optional .FrameV1Proto.StructurePerception structure_perception = 21;
      case 21: {
        if (tag == 170) {
         parse_structure_perception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_structure_perception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_extra_info;
        break;
      }

      // repeated .CommonProto.SerializedData extra_info = 101;
      case 101: {
        if (tag == 810) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_extra_info;
        if (input->ExpectTag(1202)) goto parse_online_cali_status;
        break;
      }

      // optional .CommonProto.OnlineCaliStatus online_cali_status = 150;
      case 150: {
        if (tag == 1202) {
         parse_online_cali_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_cali_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV1Proto.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV1Proto.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV1Proto.Frame)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_id(), output);
  }

  // repeated .CommonProto.Image image = 3;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(i), output);
  }

  // repeated .CommonProto.CameraParam camera = 4;
  for (int i = 0; i < this->camera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->camera(i), output);
  }

  // repeated .CommonProto.CameraParam camera_default = 5;
  for (int i = 0; i < this->camera_default_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_default(i), output);
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 6;
  for (int i = 0; i < this->camera_matrix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->camera_matrix(i), output);
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 7;
  for (int i = 0; i < this->data_descriptor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data_descriptor(i), output);
  }

  // optional .FrameV1Proto.SensorFrame sensor = 10;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sensor(), output);
  }

  // optional .CommonProto.MotionFrame motion = 11;
  if (has_motion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->motion(), output);
  }

  // optional .CommonProto.OdometryFrame odometry = 12;
  if (has_odometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->odometry(), output);
  }

  // optional .FrameV1Proto.StructurePerception structure_perception = 21;
  if (has_structure_perception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->structure_perception(), output);
  }

  // repeated .CommonProto.SerializedData extra_info = 101;
  for (int i = 0; i < this->extra_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->extra_info(i), output);
  }

  // optional .CommonProto.OnlineCaliStatus online_cali_status = 150;
  if (has_online_cali_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->online_cali_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV1Proto.Frame)
}

::google::protobuf::uint8* Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV1Proto.Frame)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_id(), target);
  }

  // repeated .CommonProto.Image image = 3;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->image(i), target);
  }

  // repeated .CommonProto.CameraParam camera = 4;
  for (int i = 0; i < this->camera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->camera(i), target);
  }

  // repeated .CommonProto.CameraParam camera_default = 5;
  for (int i = 0; i < this->camera_default_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->camera_default(i), target);
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 6;
  for (int i = 0; i < this->camera_matrix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->camera_matrix(i), target);
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 7;
  for (int i = 0; i < this->data_descriptor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data_descriptor(i), target);
  }

  // optional .FrameV1Proto.SensorFrame sensor = 10;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->sensor(), target);
  }

  // optional .CommonProto.MotionFrame motion = 11;
  if (has_motion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->motion(), target);
  }

  // optional .CommonProto.OdometryFrame odometry = 12;
  if (has_odometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->odometry(), target);
  }

  // optional .FrameV1Proto.StructurePerception structure_perception = 21;
  if (has_structure_perception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->structure_perception(), target);
  }

  // repeated .CommonProto.SerializedData extra_info = 101;
  for (int i = 0; i < this->extra_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->extra_info(i), target);
  }

  // optional .CommonProto.OnlineCaliStatus online_cali_status = 150;
  if (has_online_cali_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->online_cali_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV1Proto.Frame)
  return target;
}

int Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }

    // optional .FrameV1Proto.SensorFrame sensor = 10;
    if (has_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CommonProto.MotionFrame motion = 11;
    if (has_motion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion());
    }

    // optional .CommonProto.OdometryFrame odometry = 12;
    if (has_odometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odometry());
    }

    // optional .FrameV1Proto.StructurePerception structure_perception = 21;
    if (has_structure_perception()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->structure_perception());
    }

    // optional .CommonProto.OnlineCaliStatus online_cali_status = 150;
    if (has_online_cali_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_cali_status());
    }

  }
  // repeated .CommonProto.Image image = 3;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated .CommonProto.CameraParam camera = 4;
  total_size += 1 * this->camera_size();
  for (int i = 0; i < this->camera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera(i));
  }

  // repeated .CommonProto.CameraParam camera_default = 5;
  total_size += 1 * this->camera_default_size();
  for (int i = 0; i < this->camera_default_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_default(i));
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 6;
  total_size += 1 * this->camera_matrix_size();
  for (int i = 0; i < this->camera_matrix_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_matrix(i));
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 7;
  total_size += 1 * this->data_descriptor_size();
  for (int i = 0; i < this->data_descriptor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_descriptor(i));
  }

  // repeated .CommonProto.SerializedData extra_info = 101;
  total_size += 2 * this->extra_info_size();
  for (int i = 0; i < this->extra_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  camera_.MergeFrom(from.camera_);
  camera_default_.MergeFrom(from.camera_default_);
  camera_matrix_.MergeFrom(from.camera_matrix_);
  data_descriptor_.MergeFrom(from.data_descriptor_);
  extra_info_.MergeFrom(from.extra_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_sensor()) {
      mutable_sensor()->::FrameV1Proto::SensorFrame::MergeFrom(from.sensor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motion()) {
      mutable_motion()->::CommonProto::MotionFrame::MergeFrom(from.motion());
    }
    if (from.has_odometry()) {
      mutable_odometry()->::CommonProto::OdometryFrame::MergeFrom(from.odometry());
    }
    if (from.has_structure_perception()) {
      mutable_structure_perception()->::FrameV1Proto::StructurePerception::MergeFrom(from.structure_perception());
    }
    if (from.has_online_cali_status()) {
      mutable_online_cali_status()->::CommonProto::OnlineCaliStatus::MergeFrom(from.online_cali_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->camera())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->camera_default())) return false;
  if (has_sensor()) {
    if (!this->sensor().IsInitialized()) return false;
  }
  if (has_motion()) {
    if (!this->motion().IsInitialized()) return false;
  }
  if (has_odometry()) {
    if (!this->odometry().IsInitialized()) return false;
  }
  if (has_structure_perception()) {
    if (!this->structure_perception().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->extra_info())) return false;
  if (has_online_cali_status()) {
    if (!this->online_cali_status().IsInitialized()) return false;
  }
  return true;
}

void Frame::Swap(Frame* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(frame_id_, other->frame_id_);
    image_.Swap(&other->image_);
    camera_.Swap(&other->camera_);
    camera_default_.Swap(&other->camera_default_);
    camera_matrix_.Swap(&other->camera_matrix_);
    data_descriptor_.Swap(&other->data_descriptor_);
    std::swap(sensor_, other->sensor_);
    std::swap(motion_, other->motion_);
    std::swap(odometry_, other->odometry_);
    std::swap(structure_perception_, other->structure_perception_);
    extra_info_.Swap(&other->extra_info_);
    std::swap(online_cali_status_, other->online_cali_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameShuffle::kVersionFieldNumber;
const int FrameShuffle::kFrameIdFieldNumber;
const int FrameShuffle::kImageFieldNumber;
const int FrameShuffle::kDataDescriptorFieldNumber;
const int FrameShuffle::kCameraFieldNumber;
const int FrameShuffle::kCameraDefaultFieldNumber;
const int FrameShuffle::kCameraMatrixFieldNumber;
const int FrameShuffle::kSensorFieldNumber;
const int FrameShuffle::kMotionFieldNumber;
const int FrameShuffle::kOdometryFieldNumber;
const int FrameShuffle::kStructurePerceptionFieldNumber;
const int FrameShuffle::kExtraInfoFieldNumber;
const int FrameShuffle::kOnlineCaliStatusFieldNumber;
#endif  // !_MSC_VER

FrameShuffle::FrameShuffle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameV1Proto.FrameShuffle)
}

void FrameShuffle::InitAsDefaultInstance() {
  sensor_ = const_cast< ::FrameV1Proto::SensorFrame*>(&::FrameV1Proto::SensorFrame::default_instance());
  motion_ = const_cast< ::CommonProto::MotionFrame*>(&::CommonProto::MotionFrame::default_instance());
  odometry_ = const_cast< ::CommonProto::OdometryFrame*>(&::CommonProto::OdometryFrame::default_instance());
  structure_perception_ = const_cast< ::FrameV1Proto::StructurePerception*>(&::FrameV1Proto::StructurePerception::default_instance());
  online_cali_status_ = const_cast< ::CommonProto::OnlineCaliStatus*>(&::CommonProto::OnlineCaliStatus::default_instance());
}

FrameShuffle::FrameShuffle(const FrameShuffle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameV1Proto.FrameShuffle)
}

void FrameShuffle::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  frame_id_ = 0;
  sensor_ = NULL;
  motion_ = NULL;
  odometry_ = NULL;
  structure_perception_ = NULL;
  online_cali_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameShuffle::~FrameShuffle() {
  // @@protoc_insertion_point(destructor:FrameV1Proto.FrameShuffle)
  SharedDtor();
}

void FrameShuffle::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_;
    delete motion_;
    delete odometry_;
    delete structure_perception_;
    delete online_cali_status_;
  }
}

void FrameShuffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameShuffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameShuffle_descriptor_;
}

const FrameShuffle& FrameShuffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2ev1_2eproto();
  return *default_instance_;
}

FrameShuffle* FrameShuffle::default_instance_ = NULL;

FrameShuffle* FrameShuffle::New() const {
  return new FrameShuffle;
}

void FrameShuffle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrameShuffle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 131) {
    ZR_(version_, frame_id_);
    if (has_sensor()) {
      if (sensor_ != NULL) sensor_->::FrameV1Proto::SensorFrame::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 5888) {
    if (has_motion()) {
      if (motion_ != NULL) motion_->::CommonProto::MotionFrame::Clear();
    }
    if (has_odometry()) {
      if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
    }
    if (has_structure_perception()) {
      if (structure_perception_ != NULL) structure_perception_->::FrameV1Proto::StructurePerception::Clear();
    }
    if (has_online_cali_status()) {
      if (online_cali_status_ != NULL) online_cali_status_->::CommonProto::OnlineCaliStatus::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  image_.Clear();
  data_descriptor_.Clear();
  camera_.Clear();
  camera_default_.Clear();
  camera_matrix_.Clear();
  extra_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameShuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameV1Proto.FrameShuffle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_id;
        break;
      }

      // required int32 frame_id = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // repeated .CommonProto.Image image = 3;
      case 3: {
        if (tag == 26) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image;
        if (input->ExpectTag(34)) goto parse_data_descriptor;
        break;
      }

      // repeated .CommonProto.DataDescriptor data_descriptor = 4;
      case 4: {
        if (tag == 34) {
         parse_data_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data_descriptor;
        if (input->ExpectTag(82)) goto parse_camera;
        break;
      }

      // repeated .CommonProto.CameraParam camera = 10;
      case 10: {
        if (tag == 82) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_camera;
        if (input->ExpectTag(90)) goto parse_camera_default;
        break;
      }

      // repeated .CommonProto.CameraParam camera_default = 11;
      case 11: {
        if (tag == 90) {
         parse_camera_default:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_default()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_camera_default;
        if (input->ExpectTag(98)) goto parse_camera_matrix;
        break;
      }

      // repeated .CommonProto.CameraMatrix camera_matrix = 12;
      case 12: {
        if (tag == 98) {
         parse_camera_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_camera_matrix;
        if (input->ExpectTag(162)) goto parse_sensor;
        break;
      }

      // optional .FrameV1Proto.SensorFrame sensor = 20;
      case 20: {
        if (tag == 162) {
         parse_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_motion;
        break;
      }

      // optional .CommonProto.MotionFrame motion = 21;
      case 21: {
        if (tag == 170) {
         parse_motion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_odometry;
        break;
      }

      // optional .CommonProto.OdometryFrame odometry = 22;
      case 22: {
        if (tag == 178) {
         parse_odometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_structure_perception;
        break;
      }

      // optional .FrameV1Proto.StructurePerception structure_perception = 30;
      case 30: {
        if (tag == 242) {
         parse_structure_perception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_structure_perception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_extra_info;
        break;
      }

      // repeated .CommonProto.SerializedData extra_info = 40;
      case 40: {
        if (tag == 322) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_extra_info;
        if (input->ExpectTag(1202)) goto parse_online_cali_status;
        break;
      }

      // required .CommonProto.OnlineCaliStatus online_cali_status = 150;
      case 150: {
        if (tag == 1202) {
         parse_online_cali_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_cali_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameV1Proto.FrameShuffle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameV1Proto.FrameShuffle)
  return false;
#undef DO_
}

void FrameShuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameV1Proto.FrameShuffle)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_id(), output);
  }

  // repeated .CommonProto.Image image = 3;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(i), output);
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 4;
  for (int i = 0; i < this->data_descriptor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_descriptor(i), output);
  }

  // repeated .CommonProto.CameraParam camera = 10;
  for (int i = 0; i < this->camera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->camera(i), output);
  }

  // repeated .CommonProto.CameraParam camera_default = 11;
  for (int i = 0; i < this->camera_default_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->camera_default(i), output);
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  for (int i = 0; i < this->camera_matrix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->camera_matrix(i), output);
  }

  // optional .FrameV1Proto.SensorFrame sensor = 20;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->sensor(), output);
  }

  // optional .CommonProto.MotionFrame motion = 21;
  if (has_motion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->motion(), output);
  }

  // optional .CommonProto.OdometryFrame odometry = 22;
  if (has_odometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->odometry(), output);
  }

  // optional .FrameV1Proto.StructurePerception structure_perception = 30;
  if (has_structure_perception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->structure_perception(), output);
  }

  // repeated .CommonProto.SerializedData extra_info = 40;
  for (int i = 0; i < this->extra_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->extra_info(i), output);
  }

  // required .CommonProto.OnlineCaliStatus online_cali_status = 150;
  if (has_online_cali_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->online_cali_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameV1Proto.FrameShuffle)
}

::google::protobuf::uint8* FrameShuffle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameV1Proto.FrameShuffle)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_id(), target);
  }

  // repeated .CommonProto.Image image = 3;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->image(i), target);
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 4;
  for (int i = 0; i < this->data_descriptor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_descriptor(i), target);
  }

  // repeated .CommonProto.CameraParam camera = 10;
  for (int i = 0; i < this->camera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->camera(i), target);
  }

  // repeated .CommonProto.CameraParam camera_default = 11;
  for (int i = 0; i < this->camera_default_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->camera_default(i), target);
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  for (int i = 0; i < this->camera_matrix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->camera_matrix(i), target);
  }

  // optional .FrameV1Proto.SensorFrame sensor = 20;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->sensor(), target);
  }

  // optional .CommonProto.MotionFrame motion = 21;
  if (has_motion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->motion(), target);
  }

  // optional .CommonProto.OdometryFrame odometry = 22;
  if (has_odometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->odometry(), target);
  }

  // optional .FrameV1Proto.StructurePerception structure_perception = 30;
  if (has_structure_perception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->structure_perception(), target);
  }

  // repeated .CommonProto.SerializedData extra_info = 40;
  for (int i = 0; i < this->extra_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->extra_info(i), target);
  }

  // required .CommonProto.OnlineCaliStatus online_cali_status = 150;
  if (has_online_cali_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->online_cali_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameV1Proto.FrameShuffle)
  return target;
}

int FrameShuffle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required int32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }

    // optional .FrameV1Proto.SensorFrame sensor = 20;
    if (has_sensor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CommonProto.MotionFrame motion = 21;
    if (has_motion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion());
    }

    // optional .CommonProto.OdometryFrame odometry = 22;
    if (has_odometry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odometry());
    }

    // optional .FrameV1Proto.StructurePerception structure_perception = 30;
    if (has_structure_perception()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->structure_perception());
    }

    // required .CommonProto.OnlineCaliStatus online_cali_status = 150;
    if (has_online_cali_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_cali_status());
    }

  }
  // repeated .CommonProto.Image image = 3;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated .CommonProto.DataDescriptor data_descriptor = 4;
  total_size += 1 * this->data_descriptor_size();
  for (int i = 0; i < this->data_descriptor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_descriptor(i));
  }

  // repeated .CommonProto.CameraParam camera = 10;
  total_size += 1 * this->camera_size();
  for (int i = 0; i < this->camera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera(i));
  }

  // repeated .CommonProto.CameraParam camera_default = 11;
  total_size += 1 * this->camera_default_size();
  for (int i = 0; i < this->camera_default_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_default(i));
  }

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  total_size += 1 * this->camera_matrix_size();
  for (int i = 0; i < this->camera_matrix_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_matrix(i));
  }

  // repeated .CommonProto.SerializedData extra_info = 40;
  total_size += 2 * this->extra_info_size();
  for (int i = 0; i < this->extra_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameShuffle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameShuffle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameShuffle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameShuffle::MergeFrom(const FrameShuffle& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  data_descriptor_.MergeFrom(from.data_descriptor_);
  camera_.MergeFrom(from.camera_);
  camera_default_.MergeFrom(from.camera_default_);
  camera_matrix_.MergeFrom(from.camera_matrix_);
  extra_info_.MergeFrom(from.extra_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_sensor()) {
      mutable_sensor()->::FrameV1Proto::SensorFrame::MergeFrom(from.sensor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motion()) {
      mutable_motion()->::CommonProto::MotionFrame::MergeFrom(from.motion());
    }
    if (from.has_odometry()) {
      mutable_odometry()->::CommonProto::OdometryFrame::MergeFrom(from.odometry());
    }
    if (from.has_structure_perception()) {
      mutable_structure_perception()->::FrameV1Proto::StructurePerception::MergeFrom(from.structure_perception());
    }
    if (from.has_online_cali_status()) {
      mutable_online_cali_status()->::CommonProto::OnlineCaliStatus::MergeFrom(from.online_cali_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameShuffle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameShuffle::CopyFrom(const FrameShuffle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameShuffle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001003) != 0x00001003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->camera())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->camera_default())) return false;
  if (has_sensor()) {
    if (!this->sensor().IsInitialized()) return false;
  }
  if (has_motion()) {
    if (!this->motion().IsInitialized()) return false;
  }
  if (has_odometry()) {
    if (!this->odometry().IsInitialized()) return false;
  }
  if (has_structure_perception()) {
    if (!this->structure_perception().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->extra_info())) return false;
  if (has_online_cali_status()) {
    if (!this->online_cali_status().IsInitialized()) return false;
  }
  return true;
}

void FrameShuffle::Swap(FrameShuffle* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(frame_id_, other->frame_id_);
    image_.Swap(&other->image_);
    data_descriptor_.Swap(&other->data_descriptor_);
    camera_.Swap(&other->camera_);
    camera_default_.Swap(&other->camera_default_);
    camera_matrix_.Swap(&other->camera_matrix_);
    std::swap(sensor_, other->sensor_);
    std::swap(motion_, other->motion_);
    std::swap(odometry_, other->odometry_);
    std::swap(structure_perception_, other->structure_perception_);
    extra_info_.Swap(&other->extra_info_);
    std::swap(online_cali_status_, other->online_cali_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameShuffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameShuffle_descriptor_;
  metadata.reflection = FrameShuffle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FrameV1Proto

// @@protoc_insertion_point(global_scope)
