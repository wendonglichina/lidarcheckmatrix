// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: warning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "warning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WarningProto {

namespace {

const ::google::protobuf::Descriptor* FCW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FCW_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FCW_FCWType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LDW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LDW_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LDW_LDWType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WarningResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarningResult_FCW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningResult_FCW_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarningResult_HMW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningResult_HMW_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarningResult_UFCW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningResult_UFCW_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarningResult_PCW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningResult_PCW_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarningResult_LDW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarningResult_LDW_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WarningResult_WarningLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WarningResult_LDWType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WarningResult_WarningType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_warning_2eproto() {
  protobuf_AddDesc_warning_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "warning.proto");
  GOOGLE_CHECK(file != NULL);
  FCW_descriptor_ = file->message_type(0);
  static const int FCW_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCW, ttc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCW, hmw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCW, warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCW, warning_type_),
  };
  FCW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FCW_descriptor_,
      FCW::default_instance_,
      FCW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FCW));
  FCW_FCWType_descriptor_ = FCW_descriptor_->enum_type(0);
  LDW_descriptor_ = file->message_type(1);
  static const int LDW_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDW, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDW, warning_),
  };
  LDW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LDW_descriptor_,
      LDW::default_instance_,
      LDW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LDW));
  LDW_LDWType_descriptor_ = LDW_descriptor_->enum_type(0);
  WarningResult_descriptor_ = file->message_type(2);
  static const int WarningResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, fcw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, hmw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, ufcw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, pcw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, ldw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, warn_type_),
  };
  WarningResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningResult_descriptor_,
      WarningResult::default_instance_,
      WarningResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningResult));
  WarningResult_FCW_descriptor_ = WarningResult_descriptor_->nested_type(0);
  static const int WarningResult_FCW_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_FCW, veh_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_FCW, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_FCW, ttc_),
  };
  WarningResult_FCW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningResult_FCW_descriptor_,
      WarningResult_FCW::default_instance_,
      WarningResult_FCW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_FCW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_FCW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningResult_FCW));
  WarningResult_HMW_descriptor_ = WarningResult_descriptor_->nested_type(1);
  static const int WarningResult_HMW_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_HMW, veh_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_HMW, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_HMW, hmw_),
  };
  WarningResult_HMW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningResult_HMW_descriptor_,
      WarningResult_HMW::default_instance_,
      WarningResult_HMW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_HMW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_HMW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningResult_HMW));
  WarningResult_UFCW_descriptor_ = WarningResult_descriptor_->nested_type(2);
  static const int WarningResult_UFCW_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_UFCW, veh_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_UFCW, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_UFCW, dist_),
  };
  WarningResult_UFCW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningResult_UFCW_descriptor_,
      WarningResult_UFCW::default_instance_,
      WarningResult_UFCW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_UFCW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_UFCW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningResult_UFCW));
  WarningResult_PCW_descriptor_ = WarningResult_descriptor_->nested_type(3);
  static const int WarningResult_PCW_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_PCW, ped_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_PCW, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_PCW, dist_),
  };
  WarningResult_PCW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningResult_PCW_descriptor_,
      WarningResult_PCW::default_instance_,
      WarningResult_PCW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_PCW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_PCW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningResult_PCW));
  WarningResult_LDW_descriptor_ = WarningResult_descriptor_->nested_type(4);
  static const int WarningResult_LDW_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_LDW, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_LDW, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_LDW, ldw_type_),
  };
  WarningResult_LDW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarningResult_LDW_descriptor_,
      WarningResult_LDW::default_instance_,
      WarningResult_LDW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_LDW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarningResult_LDW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarningResult_LDW));
  WarningResult_WarningLevel_descriptor_ = WarningResult_descriptor_->enum_type(0);
  WarningResult_LDWType_descriptor_ = WarningResult_descriptor_->enum_type(1);
  WarningResult_WarningType_descriptor_ = WarningResult_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_warning_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FCW_descriptor_, &FCW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LDW_descriptor_, &LDW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningResult_descriptor_, &WarningResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningResult_FCW_descriptor_, &WarningResult_FCW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningResult_HMW_descriptor_, &WarningResult_HMW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningResult_UFCW_descriptor_, &WarningResult_UFCW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningResult_PCW_descriptor_, &WarningResult_PCW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarningResult_LDW_descriptor_, &WarningResult_LDW::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_warning_2eproto() {
  delete FCW::default_instance_;
  delete FCW_reflection_;
  delete LDW::default_instance_;
  delete LDW_reflection_;
  delete WarningResult::default_instance_;
  delete WarningResult_reflection_;
  delete WarningResult_FCW::default_instance_;
  delete WarningResult_FCW_reflection_;
  delete WarningResult_HMW::default_instance_;
  delete WarningResult_HMW_reflection_;
  delete WarningResult_UFCW::default_instance_;
  delete WarningResult_UFCW_reflection_;
  delete WarningResult_PCW::default_instance_;
  delete WarningResult_PCW_reflection_;
  delete WarningResult_LDW::default_instance_;
  delete WarningResult_LDW_reflection_;
}

void protobuf_AddDesc_warning_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwarning.proto\022\014WarningProto\"\257\001\n\003FCW\022\013\n"
    "\003ttc\030\001 \001(\002\022\013\n\003hmw\030\002 \001(\002\022\017\n\007warning\030\003 \001(\010"
    "\022/\n\014warning_type\030\004 \001(\0162\031.WarningProto.FC"
    "W.FCWType\"L\n\007FCWType\022\014\n\010FCW_NONE\020\000\022\013\n\007FC"
    "W_TTC\020\001\022\022\n\016FCW_HMW_LEVEL1\020\002\022\022\n\016FCW_HMW_L"
    "EVEL2\020\004\"u\n\003LDW\022\'\n\004type\030\001 \001(\0162\031.WarningPr"
    "oto.LDW.LDWType\022\017\n\007warning\030\002 \001(\010\"4\n\007LDWT"
    "ype\022\014\n\010LDW_NONE\020\000\022\014\n\010LDW_LEFT\020\001\022\r\n\tLDW_R"
    "IGHT\020\002\"\330\006\n\rWarningResult\022,\n\003fcw\030\001 \001(\0132\037."
    "WarningProto.WarningResult.FCW\022,\n\003hmw\030\002 "
    "\001(\0132\037.WarningProto.WarningResult.HMW\022.\n\004"
    "ufcw\030\003 \001(\0132 .WarningProto.WarningResult."
    "UFCW\022,\n\003pcw\030\004 \001(\0132\037.WarningProto.Warning"
    "Result.PCW\022,\n\003ldw\030\005 \001(\0132\037.WarningProto.W"
    "arningResult.LDW\022\021\n\twarn_type\030\006 \001(\005\0321\n\003F"
    "CW\022\016\n\006veh_id\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\013\n\003ttc"
    "\030\003 \001(\002\0321\n\003HMW\022\016\n\006veh_id\030\001 \001(\005\022\r\n\005level\030\002"
    " \001(\005\022\013\n\003hmw\030\003 \001(\002\0323\n\004UFCW\022\016\n\006veh_id\030\001 \001("
    "\005\022\r\n\005level\030\002 \001(\005\022\014\n\004dist\030\003 \001(\002\0322\n\003PCW\022\016\n"
    "\006ped_id\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\014\n\004dist\030\003 \001"
    "(\002\0327\n\003LDW\022\017\n\007line_id\030\001 \001(\005\022\r\n\005level\030\002 \001("
    "\005\022\020\n\010ldw_type\030\003 \001(\005\"r\n\014WarningLevel\022\025\n\021W"
    "arningLevel_None\020\000\022\030\n\024WarningLevel_Warni"
    "ng\020\001\022\027\n\023WarningLevel_Impact\020\002\022\030\n\023Warning"
    "Level_Notice\020\200\010\"@\n\007LDWType\022\020\n\014LDWType_No"
    "ne\020\000\022\020\n\014LDWType_Left\020\001\022\021\n\rLDWType_Right\020"
    "\002\"\215\001\n\013WarningType\022\024\n\020WarningType_None\020\000\022"
    "\023\n\017WarningType_FCW\020\001\022\023\n\017WarningType_HMW\020"
    "\002\022\024\n\020WarningType_UFCW\020\004\022\023\n\017WarningType_L"
    "DW\020\010\022\023\n\017WarningType_PCW\020\020", 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "warning.proto", &protobuf_RegisterTypes);
  FCW::default_instance_ = new FCW();
  LDW::default_instance_ = new LDW();
  WarningResult::default_instance_ = new WarningResult();
  WarningResult_FCW::default_instance_ = new WarningResult_FCW();
  WarningResult_HMW::default_instance_ = new WarningResult_HMW();
  WarningResult_UFCW::default_instance_ = new WarningResult_UFCW();
  WarningResult_PCW::default_instance_ = new WarningResult_PCW();
  WarningResult_LDW::default_instance_ = new WarningResult_LDW();
  FCW::default_instance_->InitAsDefaultInstance();
  LDW::default_instance_->InitAsDefaultInstance();
  WarningResult::default_instance_->InitAsDefaultInstance();
  WarningResult_FCW::default_instance_->InitAsDefaultInstance();
  WarningResult_HMW::default_instance_->InitAsDefaultInstance();
  WarningResult_UFCW::default_instance_->InitAsDefaultInstance();
  WarningResult_PCW::default_instance_->InitAsDefaultInstance();
  WarningResult_LDW::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_warning_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_warning_2eproto {
  StaticDescriptorInitializer_warning_2eproto() {
    protobuf_AddDesc_warning_2eproto();
  }
} static_descriptor_initializer_warning_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FCW_FCWType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCW_FCWType_descriptor_;
}
bool FCW_FCWType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FCW_FCWType FCW::FCW_NONE;
const FCW_FCWType FCW::FCW_TTC;
const FCW_FCWType FCW::FCW_HMW_LEVEL1;
const FCW_FCWType FCW::FCW_HMW_LEVEL2;
const FCW_FCWType FCW::FCWType_MIN;
const FCW_FCWType FCW::FCWType_MAX;
const int FCW::FCWType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FCW::kTtcFieldNumber;
const int FCW::kHmwFieldNumber;
const int FCW::kWarningFieldNumber;
const int FCW::kWarningTypeFieldNumber;
#endif  // !_MSC_VER

FCW::FCW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.FCW)
}

void FCW::InitAsDefaultInstance() {
}

FCW::FCW(const FCW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.FCW)
}

void FCW::SharedCtor() {
  _cached_size_ = 0;
  ttc_ = 0;
  hmw_ = 0;
  warning_ = false;
  warning_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FCW::~FCW() {
  // @@protoc_insertion_point(destructor:WarningProto.FCW)
  SharedDtor();
}

void FCW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FCW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCW_descriptor_;
}

const FCW& FCW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

FCW* FCW::default_instance_ = NULL;

FCW* FCW::New() const {
  return new FCW;
}

void FCW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FCW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ttc_, warning_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FCW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.FCW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ttc = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttc_)));
          set_has_ttc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_hmw;
        break;
      }

      // optional float hmw = 2;
      case 2: {
        if (tag == 21) {
         parse_hmw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hmw_)));
          set_has_hmw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_warning;
        break;
      }

      // optional bool warning = 3;
      case 3: {
        if (tag == 24) {
         parse_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warning_)));
          set_has_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_warning_type;
        break;
      }

      // optional .WarningProto.FCW.FCWType warning_type = 4;
      case 4: {
        if (tag == 32) {
         parse_warning_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WarningProto::FCW_FCWType_IsValid(value)) {
            set_warning_type(static_cast< ::WarningProto::FCW_FCWType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.FCW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.FCW)
  return false;
#undef DO_
}

void FCW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.FCW)
  // optional float ttc = 1;
  if (has_ttc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ttc(), output);
  }

  // optional float hmw = 2;
  if (has_hmw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->hmw(), output);
  }

  // optional bool warning = 3;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->warning(), output);
  }

  // optional .WarningProto.FCW.FCWType warning_type = 4;
  if (has_warning_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->warning_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.FCW)
}

::google::protobuf::uint8* FCW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.FCW)
  // optional float ttc = 1;
  if (has_ttc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ttc(), target);
  }

  // optional float hmw = 2;
  if (has_hmw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->hmw(), target);
  }

  // optional bool warning = 3;
  if (has_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->warning(), target);
  }

  // optional .WarningProto.FCW.FCWType warning_type = 4;
  if (has_warning_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->warning_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.FCW)
  return target;
}

int FCW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float ttc = 1;
    if (has_ttc()) {
      total_size += 1 + 4;
    }

    // optional float hmw = 2;
    if (has_hmw()) {
      total_size += 1 + 4;
    }

    // optional bool warning = 3;
    if (has_warning()) {
      total_size += 1 + 1;
    }

    // optional .WarningProto.FCW.FCWType warning_type = 4;
    if (has_warning_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->warning_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FCW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FCW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FCW::MergeFrom(const FCW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ttc()) {
      set_ttc(from.ttc());
    }
    if (from.has_hmw()) {
      set_hmw(from.hmw());
    }
    if (from.has_warning()) {
      set_warning(from.warning());
    }
    if (from.has_warning_type()) {
      set_warning_type(from.warning_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FCW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCW::CopyFrom(const FCW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCW::IsInitialized() const {

  return true;
}

void FCW::Swap(FCW* other) {
  if (other != this) {
    std::swap(ttc_, other->ttc_);
    std::swap(hmw_, other->hmw_);
    std::swap(warning_, other->warning_);
    std::swap(warning_type_, other->warning_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FCW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FCW_descriptor_;
  metadata.reflection = FCW_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LDW_LDWType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LDW_LDWType_descriptor_;
}
bool LDW_LDWType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LDW_LDWType LDW::LDW_NONE;
const LDW_LDWType LDW::LDW_LEFT;
const LDW_LDWType LDW::LDW_RIGHT;
const LDW_LDWType LDW::LDWType_MIN;
const LDW_LDWType LDW::LDWType_MAX;
const int LDW::LDWType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LDW::kTypeFieldNumber;
const int LDW::kWarningFieldNumber;
#endif  // !_MSC_VER

LDW::LDW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.LDW)
}

void LDW::InitAsDefaultInstance() {
}

LDW::LDW(const LDW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.LDW)
}

void LDW::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  warning_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LDW::~LDW() {
  // @@protoc_insertion_point(destructor:WarningProto.LDW)
  SharedDtor();
}

void LDW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LDW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LDW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LDW_descriptor_;
}

const LDW& LDW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

LDW* LDW::default_instance_ = NULL;

LDW* LDW::New() const {
  return new LDW;
}

void LDW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LDW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, warning_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LDW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.LDW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WarningProto.LDW.LDWType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WarningProto::LDW_LDWType_IsValid(value)) {
            set_type(static_cast< ::WarningProto::LDW_LDWType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_warning;
        break;
      }

      // optional bool warning = 2;
      case 2: {
        if (tag == 16) {
         parse_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warning_)));
          set_has_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.LDW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.LDW)
  return false;
#undef DO_
}

void LDW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.LDW)
  // optional .WarningProto.LDW.LDWType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool warning = 2;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->warning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.LDW)
}

::google::protobuf::uint8* LDW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.LDW)
  // optional .WarningProto.LDW.LDWType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool warning = 2;
  if (has_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->warning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.LDW)
  return target;
}

int LDW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WarningProto.LDW.LDWType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool warning = 2;
    if (has_warning()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LDW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LDW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LDW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LDW::MergeFrom(const LDW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_warning()) {
      set_warning(from.warning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LDW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LDW::CopyFrom(const LDW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LDW::IsInitialized() const {

  return true;
}

void LDW::Swap(LDW* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(warning_, other->warning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LDW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LDW_descriptor_;
  metadata.reflection = LDW_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WarningResult_WarningLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_WarningLevel_descriptor_;
}
bool WarningResult_WarningLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 1024:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WarningResult_WarningLevel WarningResult::WarningLevel_None;
const WarningResult_WarningLevel WarningResult::WarningLevel_Warning;
const WarningResult_WarningLevel WarningResult::WarningLevel_Impact;
const WarningResult_WarningLevel WarningResult::WarningLevel_Notice;
const WarningResult_WarningLevel WarningResult::WarningLevel_MIN;
const WarningResult_WarningLevel WarningResult::WarningLevel_MAX;
const int WarningResult::WarningLevel_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* WarningResult_LDWType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_LDWType_descriptor_;
}
bool WarningResult_LDWType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WarningResult_LDWType WarningResult::LDWType_None;
const WarningResult_LDWType WarningResult::LDWType_Left;
const WarningResult_LDWType WarningResult::LDWType_Right;
const WarningResult_LDWType WarningResult::LDWType_MIN;
const WarningResult_LDWType WarningResult::LDWType_MAX;
const int WarningResult::LDWType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* WarningResult_WarningType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_WarningType_descriptor_;
}
bool WarningResult_WarningType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WarningResult_WarningType WarningResult::WarningType_None;
const WarningResult_WarningType WarningResult::WarningType_FCW;
const WarningResult_WarningType WarningResult::WarningType_HMW;
const WarningResult_WarningType WarningResult::WarningType_UFCW;
const WarningResult_WarningType WarningResult::WarningType_LDW;
const WarningResult_WarningType WarningResult::WarningType_PCW;
const WarningResult_WarningType WarningResult::WarningType_MIN;
const WarningResult_WarningType WarningResult::WarningType_MAX;
const int WarningResult::WarningType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WarningResult_FCW::kVehIdFieldNumber;
const int WarningResult_FCW::kLevelFieldNumber;
const int WarningResult_FCW::kTtcFieldNumber;
#endif  // !_MSC_VER

WarningResult_FCW::WarningResult_FCW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.WarningResult.FCW)
}

void WarningResult_FCW::InitAsDefaultInstance() {
}

WarningResult_FCW::WarningResult_FCW(const WarningResult_FCW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.WarningResult.FCW)
}

void WarningResult_FCW::SharedCtor() {
  _cached_size_ = 0;
  veh_id_ = 0;
  level_ = 0;
  ttc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningResult_FCW::~WarningResult_FCW() {
  // @@protoc_insertion_point(destructor:WarningProto.WarningResult.FCW)
  SharedDtor();
}

void WarningResult_FCW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarningResult_FCW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningResult_FCW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_FCW_descriptor_;
}

const WarningResult_FCW& WarningResult_FCW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

WarningResult_FCW* WarningResult_FCW::default_instance_ = NULL;

WarningResult_FCW* WarningResult_FCW::New() const {
  return new WarningResult_FCW;
}

void WarningResult_FCW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WarningResult_FCW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(veh_id_, ttc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningResult_FCW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.WarningResult.FCW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 veh_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &veh_id_)));
          set_has_veh_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_ttc;
        break;
      }

      // optional float ttc = 3;
      case 3: {
        if (tag == 29) {
         parse_ttc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttc_)));
          set_has_ttc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.WarningResult.FCW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.WarningResult.FCW)
  return false;
#undef DO_
}

void WarningResult_FCW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.WarningResult.FCW)
  // optional int32 veh_id = 1;
  if (has_veh_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->veh_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional float ttc = 3;
  if (has_ttc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ttc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.WarningResult.FCW)
}

::google::protobuf::uint8* WarningResult_FCW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.WarningResult.FCW)
  // optional int32 veh_id = 1;
  if (has_veh_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->veh_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional float ttc = 3;
  if (has_ttc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ttc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.WarningResult.FCW)
  return target;
}

int WarningResult_FCW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 veh_id = 1;
    if (has_veh_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->veh_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional float ttc = 3;
    if (has_ttc()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningResult_FCW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningResult_FCW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningResult_FCW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningResult_FCW::MergeFrom(const WarningResult_FCW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_veh_id()) {
      set_veh_id(from.veh_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ttc()) {
      set_ttc(from.ttc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningResult_FCW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningResult_FCW::CopyFrom(const WarningResult_FCW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningResult_FCW::IsInitialized() const {

  return true;
}

void WarningResult_FCW::Swap(WarningResult_FCW* other) {
  if (other != this) {
    std::swap(veh_id_, other->veh_id_);
    std::swap(level_, other->level_);
    std::swap(ttc_, other->ttc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningResult_FCW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningResult_FCW_descriptor_;
  metadata.reflection = WarningResult_FCW_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WarningResult_HMW::kVehIdFieldNumber;
const int WarningResult_HMW::kLevelFieldNumber;
const int WarningResult_HMW::kHmwFieldNumber;
#endif  // !_MSC_VER

WarningResult_HMW::WarningResult_HMW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.WarningResult.HMW)
}

void WarningResult_HMW::InitAsDefaultInstance() {
}

WarningResult_HMW::WarningResult_HMW(const WarningResult_HMW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.WarningResult.HMW)
}

void WarningResult_HMW::SharedCtor() {
  _cached_size_ = 0;
  veh_id_ = 0;
  level_ = 0;
  hmw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningResult_HMW::~WarningResult_HMW() {
  // @@protoc_insertion_point(destructor:WarningProto.WarningResult.HMW)
  SharedDtor();
}

void WarningResult_HMW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarningResult_HMW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningResult_HMW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_HMW_descriptor_;
}

const WarningResult_HMW& WarningResult_HMW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

WarningResult_HMW* WarningResult_HMW::default_instance_ = NULL;

WarningResult_HMW* WarningResult_HMW::New() const {
  return new WarningResult_HMW;
}

void WarningResult_HMW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WarningResult_HMW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(veh_id_, hmw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningResult_HMW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.WarningResult.HMW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 veh_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &veh_id_)));
          set_has_veh_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_hmw;
        break;
      }

      // optional float hmw = 3;
      case 3: {
        if (tag == 29) {
         parse_hmw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hmw_)));
          set_has_hmw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.WarningResult.HMW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.WarningResult.HMW)
  return false;
#undef DO_
}

void WarningResult_HMW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.WarningResult.HMW)
  // optional int32 veh_id = 1;
  if (has_veh_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->veh_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional float hmw = 3;
  if (has_hmw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->hmw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.WarningResult.HMW)
}

::google::protobuf::uint8* WarningResult_HMW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.WarningResult.HMW)
  // optional int32 veh_id = 1;
  if (has_veh_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->veh_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional float hmw = 3;
  if (has_hmw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->hmw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.WarningResult.HMW)
  return target;
}

int WarningResult_HMW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 veh_id = 1;
    if (has_veh_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->veh_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional float hmw = 3;
    if (has_hmw()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningResult_HMW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningResult_HMW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningResult_HMW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningResult_HMW::MergeFrom(const WarningResult_HMW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_veh_id()) {
      set_veh_id(from.veh_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hmw()) {
      set_hmw(from.hmw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningResult_HMW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningResult_HMW::CopyFrom(const WarningResult_HMW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningResult_HMW::IsInitialized() const {

  return true;
}

void WarningResult_HMW::Swap(WarningResult_HMW* other) {
  if (other != this) {
    std::swap(veh_id_, other->veh_id_);
    std::swap(level_, other->level_);
    std::swap(hmw_, other->hmw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningResult_HMW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningResult_HMW_descriptor_;
  metadata.reflection = WarningResult_HMW_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WarningResult_UFCW::kVehIdFieldNumber;
const int WarningResult_UFCW::kLevelFieldNumber;
const int WarningResult_UFCW::kDistFieldNumber;
#endif  // !_MSC_VER

WarningResult_UFCW::WarningResult_UFCW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.WarningResult.UFCW)
}

void WarningResult_UFCW::InitAsDefaultInstance() {
}

WarningResult_UFCW::WarningResult_UFCW(const WarningResult_UFCW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.WarningResult.UFCW)
}

void WarningResult_UFCW::SharedCtor() {
  _cached_size_ = 0;
  veh_id_ = 0;
  level_ = 0;
  dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningResult_UFCW::~WarningResult_UFCW() {
  // @@protoc_insertion_point(destructor:WarningProto.WarningResult.UFCW)
  SharedDtor();
}

void WarningResult_UFCW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarningResult_UFCW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningResult_UFCW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_UFCW_descriptor_;
}

const WarningResult_UFCW& WarningResult_UFCW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

WarningResult_UFCW* WarningResult_UFCW::default_instance_ = NULL;

WarningResult_UFCW* WarningResult_UFCW::New() const {
  return new WarningResult_UFCW;
}

void WarningResult_UFCW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WarningResult_UFCW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(veh_id_, dist_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningResult_UFCW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.WarningResult.UFCW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 veh_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &veh_id_)));
          set_has_veh_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_dist;
        break;
      }

      // optional float dist = 3;
      case 3: {
        if (tag == 29) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_)));
          set_has_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.WarningResult.UFCW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.WarningResult.UFCW)
  return false;
#undef DO_
}

void WarningResult_UFCW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.WarningResult.UFCW)
  // optional int32 veh_id = 1;
  if (has_veh_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->veh_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional float dist = 3;
  if (has_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.WarningResult.UFCW)
}

::google::protobuf::uint8* WarningResult_UFCW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.WarningResult.UFCW)
  // optional int32 veh_id = 1;
  if (has_veh_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->veh_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional float dist = 3;
  if (has_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.WarningResult.UFCW)
  return target;
}

int WarningResult_UFCW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 veh_id = 1;
    if (has_veh_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->veh_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional float dist = 3;
    if (has_dist()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningResult_UFCW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningResult_UFCW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningResult_UFCW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningResult_UFCW::MergeFrom(const WarningResult_UFCW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_veh_id()) {
      set_veh_id(from.veh_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_dist()) {
      set_dist(from.dist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningResult_UFCW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningResult_UFCW::CopyFrom(const WarningResult_UFCW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningResult_UFCW::IsInitialized() const {

  return true;
}

void WarningResult_UFCW::Swap(WarningResult_UFCW* other) {
  if (other != this) {
    std::swap(veh_id_, other->veh_id_);
    std::swap(level_, other->level_);
    std::swap(dist_, other->dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningResult_UFCW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningResult_UFCW_descriptor_;
  metadata.reflection = WarningResult_UFCW_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WarningResult_PCW::kPedIdFieldNumber;
const int WarningResult_PCW::kLevelFieldNumber;
const int WarningResult_PCW::kDistFieldNumber;
#endif  // !_MSC_VER

WarningResult_PCW::WarningResult_PCW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.WarningResult.PCW)
}

void WarningResult_PCW::InitAsDefaultInstance() {
}

WarningResult_PCW::WarningResult_PCW(const WarningResult_PCW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.WarningResult.PCW)
}

void WarningResult_PCW::SharedCtor() {
  _cached_size_ = 0;
  ped_id_ = 0;
  level_ = 0;
  dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningResult_PCW::~WarningResult_PCW() {
  // @@protoc_insertion_point(destructor:WarningProto.WarningResult.PCW)
  SharedDtor();
}

void WarningResult_PCW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarningResult_PCW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningResult_PCW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_PCW_descriptor_;
}

const WarningResult_PCW& WarningResult_PCW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

WarningResult_PCW* WarningResult_PCW::default_instance_ = NULL;

WarningResult_PCW* WarningResult_PCW::New() const {
  return new WarningResult_PCW;
}

void WarningResult_PCW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WarningResult_PCW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ped_id_, dist_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningResult_PCW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.WarningResult.PCW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ped_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ped_id_)));
          set_has_ped_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_dist;
        break;
      }

      // optional float dist = 3;
      case 3: {
        if (tag == 29) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_)));
          set_has_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.WarningResult.PCW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.WarningResult.PCW)
  return false;
#undef DO_
}

void WarningResult_PCW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.WarningResult.PCW)
  // optional int32 ped_id = 1;
  if (has_ped_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ped_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional float dist = 3;
  if (has_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.WarningResult.PCW)
}

::google::protobuf::uint8* WarningResult_PCW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.WarningResult.PCW)
  // optional int32 ped_id = 1;
  if (has_ped_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ped_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional float dist = 3;
  if (has_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.WarningResult.PCW)
  return target;
}

int WarningResult_PCW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ped_id = 1;
    if (has_ped_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ped_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional float dist = 3;
    if (has_dist()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningResult_PCW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningResult_PCW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningResult_PCW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningResult_PCW::MergeFrom(const WarningResult_PCW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ped_id()) {
      set_ped_id(from.ped_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_dist()) {
      set_dist(from.dist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningResult_PCW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningResult_PCW::CopyFrom(const WarningResult_PCW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningResult_PCW::IsInitialized() const {

  return true;
}

void WarningResult_PCW::Swap(WarningResult_PCW* other) {
  if (other != this) {
    std::swap(ped_id_, other->ped_id_);
    std::swap(level_, other->level_);
    std::swap(dist_, other->dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningResult_PCW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningResult_PCW_descriptor_;
  metadata.reflection = WarningResult_PCW_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WarningResult_LDW::kLineIdFieldNumber;
const int WarningResult_LDW::kLevelFieldNumber;
const int WarningResult_LDW::kLdwTypeFieldNumber;
#endif  // !_MSC_VER

WarningResult_LDW::WarningResult_LDW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.WarningResult.LDW)
}

void WarningResult_LDW::InitAsDefaultInstance() {
}

WarningResult_LDW::WarningResult_LDW(const WarningResult_LDW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.WarningResult.LDW)
}

void WarningResult_LDW::SharedCtor() {
  _cached_size_ = 0;
  line_id_ = 0;
  level_ = 0;
  ldw_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningResult_LDW::~WarningResult_LDW() {
  // @@protoc_insertion_point(destructor:WarningProto.WarningResult.LDW)
  SharedDtor();
}

void WarningResult_LDW::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarningResult_LDW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningResult_LDW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_LDW_descriptor_;
}

const WarningResult_LDW& WarningResult_LDW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

WarningResult_LDW* WarningResult_LDW::default_instance_ = NULL;

WarningResult_LDW* WarningResult_LDW::New() const {
  return new WarningResult_LDW;
}

void WarningResult_LDW::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WarningResult_LDW*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(line_id_, ldw_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningResult_LDW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.WarningResult.LDW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 line_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ldw_type;
        break;
      }

      // optional int32 ldw_type = 3;
      case 3: {
        if (tag == 24) {
         parse_ldw_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ldw_type_)));
          set_has_ldw_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.WarningResult.LDW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.WarningResult.LDW)
  return false;
#undef DO_
}

void WarningResult_LDW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.WarningResult.LDW)
  // optional int32 line_id = 1;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 ldw_type = 3;
  if (has_ldw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ldw_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.WarningResult.LDW)
}

::google::protobuf::uint8* WarningResult_LDW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.WarningResult.LDW)
  // optional int32 line_id = 1;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 ldw_type = 3;
  if (has_ldw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ldw_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.WarningResult.LDW)
  return target;
}

int WarningResult_LDW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 line_id = 1;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 ldw_type = 3;
    if (has_ldw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ldw_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningResult_LDW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningResult_LDW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningResult_LDW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningResult_LDW::MergeFrom(const WarningResult_LDW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ldw_type()) {
      set_ldw_type(from.ldw_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningResult_LDW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningResult_LDW::CopyFrom(const WarningResult_LDW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningResult_LDW::IsInitialized() const {

  return true;
}

void WarningResult_LDW::Swap(WarningResult_LDW* other) {
  if (other != this) {
    std::swap(line_id_, other->line_id_);
    std::swap(level_, other->level_);
    std::swap(ldw_type_, other->ldw_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningResult_LDW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningResult_LDW_descriptor_;
  metadata.reflection = WarningResult_LDW_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WarningResult::kFcwFieldNumber;
const int WarningResult::kHmwFieldNumber;
const int WarningResult::kUfcwFieldNumber;
const int WarningResult::kPcwFieldNumber;
const int WarningResult::kLdwFieldNumber;
const int WarningResult::kWarnTypeFieldNumber;
#endif  // !_MSC_VER

WarningResult::WarningResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WarningProto.WarningResult)
}

void WarningResult::InitAsDefaultInstance() {
  fcw_ = const_cast< ::WarningProto::WarningResult_FCW*>(&::WarningProto::WarningResult_FCW::default_instance());
  hmw_ = const_cast< ::WarningProto::WarningResult_HMW*>(&::WarningProto::WarningResult_HMW::default_instance());
  ufcw_ = const_cast< ::WarningProto::WarningResult_UFCW*>(&::WarningProto::WarningResult_UFCW::default_instance());
  pcw_ = const_cast< ::WarningProto::WarningResult_PCW*>(&::WarningProto::WarningResult_PCW::default_instance());
  ldw_ = const_cast< ::WarningProto::WarningResult_LDW*>(&::WarningProto::WarningResult_LDW::default_instance());
}

WarningResult::WarningResult(const WarningResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WarningProto.WarningResult)
}

void WarningResult::SharedCtor() {
  _cached_size_ = 0;
  fcw_ = NULL;
  hmw_ = NULL;
  ufcw_ = NULL;
  pcw_ = NULL;
  ldw_ = NULL;
  warn_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarningResult::~WarningResult() {
  // @@protoc_insertion_point(destructor:WarningProto.WarningResult)
  SharedDtor();
}

void WarningResult::SharedDtor() {
  if (this != default_instance_) {
    delete fcw_;
    delete hmw_;
    delete ufcw_;
    delete pcw_;
    delete ldw_;
  }
}

void WarningResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarningResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarningResult_descriptor_;
}

const WarningResult& WarningResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warning_2eproto();
  return *default_instance_;
}

WarningResult* WarningResult::default_instance_ = NULL;

WarningResult* WarningResult::New() const {
  return new WarningResult;
}

void WarningResult::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_fcw()) {
      if (fcw_ != NULL) fcw_->::WarningProto::WarningResult_FCW::Clear();
    }
    if (has_hmw()) {
      if (hmw_ != NULL) hmw_->::WarningProto::WarningResult_HMW::Clear();
    }
    if (has_ufcw()) {
      if (ufcw_ != NULL) ufcw_->::WarningProto::WarningResult_UFCW::Clear();
    }
    if (has_pcw()) {
      if (pcw_ != NULL) pcw_->::WarningProto::WarningResult_PCW::Clear();
    }
    if (has_ldw()) {
      if (ldw_ != NULL) ldw_->::WarningProto::WarningResult_LDW::Clear();
    }
    warn_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarningResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WarningProto.WarningResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WarningProto.WarningResult.FCW fcw = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fcw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hmw;
        break;
      }

      // optional .WarningProto.WarningResult.HMW hmw = 2;
      case 2: {
        if (tag == 18) {
         parse_hmw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hmw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ufcw;
        break;
      }

      // optional .WarningProto.WarningResult.UFCW ufcw = 3;
      case 3: {
        if (tag == 26) {
         parse_ufcw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ufcw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pcw;
        break;
      }

      // optional .WarningProto.WarningResult.PCW pcw = 4;
      case 4: {
        if (tag == 34) {
         parse_pcw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pcw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ldw;
        break;
      }

      // optional .WarningProto.WarningResult.LDW ldw = 5;
      case 5: {
        if (tag == 42) {
         parse_ldw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ldw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_warn_type;
        break;
      }

      // optional int32 warn_type = 6;
      case 6: {
        if (tag == 48) {
         parse_warn_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warn_type_)));
          set_has_warn_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WarningProto.WarningResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WarningProto.WarningResult)
  return false;
#undef DO_
}

void WarningResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WarningProto.WarningResult)
  // optional .WarningProto.WarningResult.FCW fcw = 1;
  if (has_fcw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fcw(), output);
  }

  // optional .WarningProto.WarningResult.HMW hmw = 2;
  if (has_hmw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hmw(), output);
  }

  // optional .WarningProto.WarningResult.UFCW ufcw = 3;
  if (has_ufcw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ufcw(), output);
  }

  // optional .WarningProto.WarningResult.PCW pcw = 4;
  if (has_pcw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pcw(), output);
  }

  // optional .WarningProto.WarningResult.LDW ldw = 5;
  if (has_ldw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ldw(), output);
  }

  // optional int32 warn_type = 6;
  if (has_warn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->warn_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WarningProto.WarningResult)
}

::google::protobuf::uint8* WarningResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WarningProto.WarningResult)
  // optional .WarningProto.WarningResult.FCW fcw = 1;
  if (has_fcw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fcw(), target);
  }

  // optional .WarningProto.WarningResult.HMW hmw = 2;
  if (has_hmw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hmw(), target);
  }

  // optional .WarningProto.WarningResult.UFCW ufcw = 3;
  if (has_ufcw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ufcw(), target);
  }

  // optional .WarningProto.WarningResult.PCW pcw = 4;
  if (has_pcw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pcw(), target);
  }

  // optional .WarningProto.WarningResult.LDW ldw = 5;
  if (has_ldw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ldw(), target);
  }

  // optional int32 warn_type = 6;
  if (has_warn_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->warn_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WarningProto.WarningResult)
  return target;
}

int WarningResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WarningProto.WarningResult.FCW fcw = 1;
    if (has_fcw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fcw());
    }

    // optional .WarningProto.WarningResult.HMW hmw = 2;
    if (has_hmw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hmw());
    }

    // optional .WarningProto.WarningResult.UFCW ufcw = 3;
    if (has_ufcw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ufcw());
    }

    // optional .WarningProto.WarningResult.PCW pcw = 4;
    if (has_pcw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pcw());
    }

    // optional .WarningProto.WarningResult.LDW ldw = 5;
    if (has_ldw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ldw());
    }

    // optional int32 warn_type = 6;
    if (has_warn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warn_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarningResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarningResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarningResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarningResult::MergeFrom(const WarningResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fcw()) {
      mutable_fcw()->::WarningProto::WarningResult_FCW::MergeFrom(from.fcw());
    }
    if (from.has_hmw()) {
      mutable_hmw()->::WarningProto::WarningResult_HMW::MergeFrom(from.hmw());
    }
    if (from.has_ufcw()) {
      mutable_ufcw()->::WarningProto::WarningResult_UFCW::MergeFrom(from.ufcw());
    }
    if (from.has_pcw()) {
      mutable_pcw()->::WarningProto::WarningResult_PCW::MergeFrom(from.pcw());
    }
    if (from.has_ldw()) {
      mutable_ldw()->::WarningProto::WarningResult_LDW::MergeFrom(from.ldw());
    }
    if (from.has_warn_type()) {
      set_warn_type(from.warn_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarningResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarningResult::CopyFrom(const WarningResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarningResult::IsInitialized() const {

  return true;
}

void WarningResult::Swap(WarningResult* other) {
  if (other != this) {
    std::swap(fcw_, other->fcw_);
    std::swap(hmw_, other->hmw_);
    std::swap(ufcw_, other->ufcw_);
    std::swap(pcw_, other->pcw_);
    std::swap(ldw_, other->ldw_);
    std::swap(warn_type_, other->warn_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarningResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarningResult_descriptor_;
  metadata.reflection = WarningResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WarningProto

// @@protoc_insertion_point(global_scope)
