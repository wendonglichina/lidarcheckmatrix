// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#ifndef PROTOBUF_sensor_2eproto__INCLUDED
#define PROTOBUF_sensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SensorProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sensor_2eproto();
void protobuf_AssignDesc_sensor_2eproto();
void protobuf_ShutdownFile_sensor_2eproto();

class IMUFrame;
class GPSFrame;
class GPSFrameRaw;
class LidarBaseInfo;
class VelodyneLaserParam;
class VelodyneLasers;
class VelodyneParmas;
class VelodyneFrame;
class RobosenseParmas;
class RobosenseFrame;

// ===================================================================

class IMUFrame : public ::google::protobuf::Message {
 public:
  IMUFrame();
  virtual ~IMUFrame();

  IMUFrame(const IMUFrame& from);

  inline IMUFrame& operator=(const IMUFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUFrame& default_instance();

  void Swap(IMUFrame* other);

  // implements Message ----------------------------------------------

  IMUFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMUFrame& from);
  void MergeFrom(const IMUFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float acc_x = 1;
  inline bool has_acc_x() const;
  inline void clear_acc_x();
  static const int kAccXFieldNumber = 1;
  inline float acc_x() const;
  inline void set_acc_x(float value);

  // optional float acc_y = 2;
  inline bool has_acc_y() const;
  inline void clear_acc_y();
  static const int kAccYFieldNumber = 2;
  inline float acc_y() const;
  inline void set_acc_y(float value);

  // optional float acc_z = 3;
  inline bool has_acc_z() const;
  inline void clear_acc_z();
  static const int kAccZFieldNumber = 3;
  inline float acc_z() const;
  inline void set_acc_z(float value);

  // optional float gyro_x = 4;
  inline bool has_gyro_x() const;
  inline void clear_gyro_x();
  static const int kGyroXFieldNumber = 4;
  inline float gyro_x() const;
  inline void set_gyro_x(float value);

  // optional float gyro_y = 5;
  inline bool has_gyro_y() const;
  inline void clear_gyro_y();
  static const int kGyroYFieldNumber = 5;
  inline float gyro_y() const;
  inline void set_gyro_y(float value);

  // optional float gyro_z = 6;
  inline bool has_gyro_z() const;
  inline void clear_gyro_z();
  static const int kGyroZFieldNumber = 6;
  inline float gyro_z() const;
  inline void set_gyro_z(float value);

  // optional float temperature = 7;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 7;
  inline float temperature() const;
  inline void set_temperature(float value);

  // required int64 time_stamp = 8;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 8;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SensorProto.IMUFrame)
 private:
  inline void set_has_acc_x();
  inline void clear_has_acc_x();
  inline void set_has_acc_y();
  inline void clear_has_acc_y();
  inline void set_has_acc_z();
  inline void clear_has_acc_z();
  inline void set_has_gyro_x();
  inline void clear_has_gyro_x();
  inline void set_has_gyro_y();
  inline void clear_has_gyro_y();
  inline void set_has_gyro_z();
  inline void clear_has_gyro_z();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float acc_x_;
  float acc_y_;
  float acc_z_;
  float gyro_x_;
  float gyro_y_;
  float gyro_z_;
  ::google::protobuf::int64 time_stamp_;
  float temperature_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static IMUFrame* default_instance_;
};
// -------------------------------------------------------------------

class GPSFrame : public ::google::protobuf::Message {
 public:
  GPSFrame();
  virtual ~GPSFrame();

  GPSFrame(const GPSFrame& from);

  inline GPSFrame& operator=(const GPSFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSFrame& default_instance();

  void Swap(GPSFrame* other);

  // implements Message ----------------------------------------------

  GPSFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPSFrame& from);
  void MergeFrom(const GPSFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float longitude = 1;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  inline float longitude() const;
  inline void set_longitude(float value);

  // required float latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline float latitude() const;
  inline void set_latitude(float value);

  // required int64 time_stamp = 3;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // optional float longitude_cent = 4;
  inline bool has_longitude_cent() const;
  inline void clear_longitude_cent();
  static const int kLongitudeCentFieldNumber = 4;
  inline float longitude_cent() const;
  inline void set_longitude_cent(float value);

  // optional string longitude_dir = 5;
  inline bool has_longitude_dir() const;
  inline void clear_longitude_dir();
  static const int kLongitudeDirFieldNumber = 5;
  inline const ::std::string& longitude_dir() const;
  inline void set_longitude_dir(const ::std::string& value);
  inline void set_longitude_dir(const char* value);
  inline void set_longitude_dir(const char* value, size_t size);
  inline ::std::string* mutable_longitude_dir();
  inline ::std::string* release_longitude_dir();
  inline void set_allocated_longitude_dir(::std::string* longitude_dir);

  // optional float latitude_cent = 6;
  inline bool has_latitude_cent() const;
  inline void clear_latitude_cent();
  static const int kLatitudeCentFieldNumber = 6;
  inline float latitude_cent() const;
  inline void set_latitude_cent(float value);

  // optional string latitude_dir = 7;
  inline bool has_latitude_dir() const;
  inline void clear_latitude_dir();
  static const int kLatitudeDirFieldNumber = 7;
  inline const ::std::string& latitude_dir() const;
  inline void set_latitude_dir(const ::std::string& value);
  inline void set_latitude_dir(const char* value);
  inline void set_latitude_dir(const char* value, size_t size);
  inline ::std::string* mutable_latitude_dir();
  inline ::std::string* release_latitude_dir();
  inline void set_allocated_latitude_dir(::std::string* latitude_dir);

  // optional float ground_speed = 8;
  inline bool has_ground_speed() const;
  inline void clear_ground_speed();
  static const int kGroundSpeedFieldNumber = 8;
  inline float ground_speed() const;
  inline void set_ground_speed(float value);

  // optional float ground_course = 9;
  inline bool has_ground_course() const;
  inline void clear_ground_course();
  static const int kGroundCourseFieldNumber = 9;
  inline float ground_course() const;
  inline void set_ground_course(float value);

  // optional int64 gps_time = 10;
  inline bool has_gps_time() const;
  inline void clear_gps_time();
  static const int kGpsTimeFieldNumber = 10;
  inline ::google::protobuf::int64 gps_time() const;
  inline void set_gps_time(::google::protobuf::int64 value);

  // optional float altitude = 11;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 11;
  inline float altitude() const;
  inline void set_altitude(float value);

  // optional float accuracy = 12;
  inline bool has_accuracy() const;
  inline void clear_accuracy();
  static const int kAccuracyFieldNumber = 12;
  inline float accuracy() const;
  inline void set_accuracy(float value);

  // @@protoc_insertion_point(class_scope:SensorProto.GPSFrame)
 private:
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_longitude_cent();
  inline void clear_has_longitude_cent();
  inline void set_has_longitude_dir();
  inline void clear_has_longitude_dir();
  inline void set_has_latitude_cent();
  inline void clear_has_latitude_cent();
  inline void set_has_latitude_dir();
  inline void clear_has_latitude_dir();
  inline void set_has_ground_speed();
  inline void clear_has_ground_speed();
  inline void set_has_ground_course();
  inline void clear_has_ground_course();
  inline void set_has_gps_time();
  inline void clear_has_gps_time();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_accuracy();
  inline void clear_has_accuracy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float longitude_;
  float latitude_;
  ::google::protobuf::int64 time_stamp_;
  ::std::string* longitude_dir_;
  float longitude_cent_;
  float latitude_cent_;
  ::std::string* latitude_dir_;
  float ground_speed_;
  float ground_course_;
  ::google::protobuf::int64 gps_time_;
  float altitude_;
  float accuracy_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static GPSFrame* default_instance_;
};
// -------------------------------------------------------------------

class GPSFrameRaw : public ::google::protobuf::Message {
 public:
  GPSFrameRaw();
  virtual ~GPSFrameRaw();

  GPSFrameRaw(const GPSFrameRaw& from);

  inline GPSFrameRaw& operator=(const GPSFrameRaw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSFrameRaw& default_instance();

  void Swap(GPSFrameRaw* other);

  // implements Message ----------------------------------------------

  GPSFrameRaw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPSFrameRaw& from);
  void MergeFrom(const GPSFrameRaw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // required int64 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // optional .SensorProto.GPSFrame parsed = 3;
  inline bool has_parsed() const;
  inline void clear_parsed();
  static const int kParsedFieldNumber = 3;
  inline const ::SensorProto::GPSFrame& parsed() const;
  inline ::SensorProto::GPSFrame* mutable_parsed();
  inline ::SensorProto::GPSFrame* release_parsed();
  inline void set_allocated_parsed(::SensorProto::GPSFrame* parsed);

  // @@protoc_insertion_point(class_scope:SensorProto.GPSFrameRaw)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_parsed();
  inline void clear_has_parsed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::google::protobuf::int64 time_stamp_;
  ::SensorProto::GPSFrame* parsed_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static GPSFrameRaw* default_instance_;
};
// -------------------------------------------------------------------

class LidarBaseInfo : public ::google::protobuf::Message {
 public:
  LidarBaseInfo();
  virtual ~LidarBaseInfo();

  LidarBaseInfo(const LidarBaseInfo& from);

  inline LidarBaseInfo& operator=(const LidarBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarBaseInfo& default_instance();

  void Swap(LidarBaseInfo* other);

  // implements Message ----------------------------------------------

  LidarBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LidarBaseInfo& from);
  void MergeFrom(const LidarBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vendor_name = 1;
  inline bool has_vendor_name() const;
  inline void clear_vendor_name();
  static const int kVendorNameFieldNumber = 1;
  inline const ::std::string& vendor_name() const;
  inline void set_vendor_name(const ::std::string& value);
  inline void set_vendor_name(const char* value);
  inline void set_vendor_name(const char* value, size_t size);
  inline ::std::string* mutable_vendor_name();
  inline ::std::string* release_vendor_name();
  inline void set_allocated_vendor_name(::std::string* vendor_name);

  // optional string model = 2;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 2;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional int64 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int64 port() const;
  inline void set_port(::google::protobuf::int64 value);

  // optional float rpm = 6;
  inline bool has_rpm() const;
  inline void clear_rpm();
  static const int kRpmFieldNumber = 6;
  inline float rpm() const;
  inline void set_rpm(float value);

  // optional float time_offset = 7;
  inline bool has_time_offset() const;
  inline void clear_time_offset();
  static const int kTimeOffsetFieldNumber = 7;
  inline float time_offset() const;
  inline void set_time_offset(float value);

  // optional float repeat_delay = 8;
  inline bool has_repeat_delay() const;
  inline void clear_repeat_delay();
  static const int kRepeatDelayFieldNumber = 8;
  inline float repeat_delay() const;
  inline void set_repeat_delay(float value);

  // optional float max_range = 9;
  inline bool has_max_range() const;
  inline void clear_max_range();
  static const int kMaxRangeFieldNumber = 9;
  inline float max_range() const;
  inline void set_max_range(float value);

  // optional float min_range = 10;
  inline bool has_min_range() const;
  inline void clear_min_range();
  static const int kMinRangeFieldNumber = 10;
  inline float min_range() const;
  inline void set_min_range(float value);

  // optional float view_direction = 11;
  inline bool has_view_direction() const;
  inline void clear_view_direction();
  static const int kViewDirectionFieldNumber = 11;
  inline float view_direction() const;
  inline void set_view_direction(float value);

  // optional float view_width = 12;
  inline bool has_view_width() const;
  inline void clear_view_width();
  static const int kViewWidthFieldNumber = 12;
  inline float view_width() const;
  inline void set_view_width(float value);

  // optional float min_angle = 13;
  inline bool has_min_angle() const;
  inline void clear_min_angle();
  static const int kMinAngleFieldNumber = 13;
  inline float min_angle() const;
  inline void set_min_angle(float value);

  // optional float max_angle = 14;
  inline bool has_max_angle() const;
  inline void clear_max_angle();
  static const int kMaxAngleFieldNumber = 14;
  inline float max_angle() const;
  inline void set_max_angle(float value);

  // optional float packet_rate = 15;
  inline bool has_packet_rate() const;
  inline void clear_packet_rate();
  static const int kPacketRateFieldNumber = 15;
  inline float packet_rate() const;
  inline void set_packet_rate(float value);

  // optional float pitch = 16;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 16;
  inline float pitch() const;
  inline void set_pitch(float value);

  // optional float yaw = 17;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 17;
  inline float yaw() const;
  inline void set_yaw(float value);

  // optional float roll = 18;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 18;
  inline float roll() const;
  inline void set_roll(float value);

  // optional float x_offset = 19;
  inline bool has_x_offset() const;
  inline void clear_x_offset();
  static const int kXOffsetFieldNumber = 19;
  inline float x_offset() const;
  inline void set_x_offset(float value);

  // optional float y_offset = 20;
  inline bool has_y_offset() const;
  inline void clear_y_offset();
  static const int kYOffsetFieldNumber = 20;
  inline float y_offset() const;
  inline void set_y_offset(float value);

  // optional float z_offset = 21;
  inline bool has_z_offset() const;
  inline void clear_z_offset();
  static const int kZOffsetFieldNumber = 21;
  inline float z_offset() const;
  inline void set_z_offset(float value);

  // @@protoc_insertion_point(class_scope:SensorProto.LidarBaseInfo)
 private:
  inline void set_has_vendor_name();
  inline void clear_has_vendor_name();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_rpm();
  inline void clear_has_rpm();
  inline void set_has_time_offset();
  inline void clear_has_time_offset();
  inline void set_has_repeat_delay();
  inline void clear_has_repeat_delay();
  inline void set_has_max_range();
  inline void clear_has_max_range();
  inline void set_has_min_range();
  inline void clear_has_min_range();
  inline void set_has_view_direction();
  inline void clear_has_view_direction();
  inline void set_has_view_width();
  inline void clear_has_view_width();
  inline void set_has_min_angle();
  inline void clear_has_min_angle();
  inline void set_has_max_angle();
  inline void clear_has_max_angle();
  inline void set_has_packet_rate();
  inline void clear_has_packet_rate();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_x_offset();
  inline void clear_has_x_offset();
  inline void set_has_y_offset();
  inline void clear_has_y_offset();
  inline void set_has_z_offset();
  inline void clear_has_z_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vendor_name_;
  ::std::string* model_;
  ::std::string* ip_;
  ::std::string* desc_;
  ::google::protobuf::int64 port_;
  float rpm_;
  float time_offset_;
  float repeat_delay_;
  float max_range_;
  float min_range_;
  float view_direction_;
  float view_width_;
  float min_angle_;
  float max_angle_;
  float packet_rate_;
  float pitch_;
  float yaw_;
  float roll_;
  float x_offset_;
  float y_offset_;
  float z_offset_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static LidarBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class VelodyneLaserParam : public ::google::protobuf::Message {
 public:
  VelodyneLaserParam();
  virtual ~VelodyneLaserParam();

  VelodyneLaserParam(const VelodyneLaserParam& from);

  inline VelodyneLaserParam& operator=(const VelodyneLaserParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VelodyneLaserParam& default_instance();

  void Swap(VelodyneLaserParam* other);

  // implements Message ----------------------------------------------

  VelodyneLaserParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VelodyneLaserParam& from);
  void MergeFrom(const VelodyneLaserParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional float dist_correction = 2;
  inline bool has_dist_correction() const;
  inline void clear_dist_correction();
  static const int kDistCorrectionFieldNumber = 2;
  inline float dist_correction() const;
  inline void set_dist_correction(float value);

  // optional float dist_correction_x = 3;
  inline bool has_dist_correction_x() const;
  inline void clear_dist_correction_x();
  static const int kDistCorrectionXFieldNumber = 3;
  inline float dist_correction_x() const;
  inline void set_dist_correction_x(float value);

  // optional float dist_correction_y = 4;
  inline bool has_dist_correction_y() const;
  inline void clear_dist_correction_y();
  static const int kDistCorrectionYFieldNumber = 4;
  inline float dist_correction_y() const;
  inline void set_dist_correction_y(float value);

  // optional float focal_distance = 5;
  inline bool has_focal_distance() const;
  inline void clear_focal_distance();
  static const int kFocalDistanceFieldNumber = 5;
  inline float focal_distance() const;
  inline void set_focal_distance(float value);

  // optional float focal_slope = 6;
  inline bool has_focal_slope() const;
  inline void clear_focal_slope();
  static const int kFocalSlopeFieldNumber = 6;
  inline float focal_slope() const;
  inline void set_focal_slope(float value);

  // optional float horiz_offset_correction = 7;
  inline bool has_horiz_offset_correction() const;
  inline void clear_horiz_offset_correction();
  static const int kHorizOffsetCorrectionFieldNumber = 7;
  inline float horiz_offset_correction() const;
  inline void set_horiz_offset_correction(float value);

  // optional float rot_correction = 8;
  inline bool has_rot_correction() const;
  inline void clear_rot_correction();
  static const int kRotCorrectionFieldNumber = 8;
  inline float rot_correction() const;
  inline void set_rot_correction(float value);

  // optional float vert_correction = 9;
  inline bool has_vert_correction() const;
  inline void clear_vert_correction();
  static const int kVertCorrectionFieldNumber = 9;
  inline float vert_correction() const;
  inline void set_vert_correction(float value);

  // optional float vert_offset_correction = 10;
  inline bool has_vert_offset_correction() const;
  inline void clear_vert_offset_correction();
  static const int kVertOffsetCorrectionFieldNumber = 10;
  inline float vert_offset_correction() const;
  inline void set_vert_offset_correction(float value);

  // optional float max_intensity = 11;
  inline bool has_max_intensity() const;
  inline void clear_max_intensity();
  static const int kMaxIntensityFieldNumber = 11;
  inline float max_intensity() const;
  inline void set_max_intensity(float value);

  // optional float min_intensity = 12;
  inline bool has_min_intensity() const;
  inline void clear_min_intensity();
  static const int kMinIntensityFieldNumber = 12;
  inline float min_intensity() const;
  inline void set_min_intensity(float value);

  // @@protoc_insertion_point(class_scope:SensorProto.VelodyneLaserParam)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_dist_correction();
  inline void clear_has_dist_correction();
  inline void set_has_dist_correction_x();
  inline void clear_has_dist_correction_x();
  inline void set_has_dist_correction_y();
  inline void clear_has_dist_correction_y();
  inline void set_has_focal_distance();
  inline void clear_has_focal_distance();
  inline void set_has_focal_slope();
  inline void clear_has_focal_slope();
  inline void set_has_horiz_offset_correction();
  inline void clear_has_horiz_offset_correction();
  inline void set_has_rot_correction();
  inline void clear_has_rot_correction();
  inline void set_has_vert_correction();
  inline void clear_has_vert_correction();
  inline void set_has_vert_offset_correction();
  inline void clear_has_vert_offset_correction();
  inline void set_has_max_intensity();
  inline void clear_has_max_intensity();
  inline void set_has_min_intensity();
  inline void clear_has_min_intensity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  float dist_correction_;
  float dist_correction_x_;
  float dist_correction_y_;
  float focal_distance_;
  float focal_slope_;
  float horiz_offset_correction_;
  float rot_correction_;
  float vert_correction_;
  float vert_offset_correction_;
  float max_intensity_;
  float min_intensity_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static VelodyneLaserParam* default_instance_;
};
// -------------------------------------------------------------------

class VelodyneLasers : public ::google::protobuf::Message {
 public:
  VelodyneLasers();
  virtual ~VelodyneLasers();

  VelodyneLasers(const VelodyneLasers& from);

  inline VelodyneLasers& operator=(const VelodyneLasers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VelodyneLasers& default_instance();

  void Swap(VelodyneLasers* other);

  // implements Message ----------------------------------------------

  VelodyneLasers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VelodyneLasers& from);
  void MergeFrom(const VelodyneLasers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated .SensorProto.VelodyneLaserParam param = 2;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline const ::SensorProto::VelodyneLaserParam& param(int index) const;
  inline ::SensorProto::VelodyneLaserParam* mutable_param(int index);
  inline ::SensorProto::VelodyneLaserParam* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::VelodyneLaserParam >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorProto::VelodyneLaserParam >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:SensorProto.VelodyneLasers)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SensorProto::VelodyneLaserParam > param_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static VelodyneLasers* default_instance_;
};
// -------------------------------------------------------------------

class VelodyneParmas : public ::google::protobuf::Message {
 public:
  VelodyneParmas();
  virtual ~VelodyneParmas();

  VelodyneParmas(const VelodyneParmas& from);

  inline VelodyneParmas& operator=(const VelodyneParmas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VelodyneParmas& default_instance();

  void Swap(VelodyneParmas* other);

  // implements Message ----------------------------------------------

  VelodyneParmas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VelodyneParmas& from);
  void MergeFrom(const VelodyneParmas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SensorProto.LidarBaseInfo base_info = 1;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::SensorProto::LidarBaseInfo& base_info() const;
  inline ::SensorProto::LidarBaseInfo* mutable_base_info();
  inline ::SensorProto::LidarBaseInfo* release_base_info();
  inline void set_allocated_base_info(::SensorProto::LidarBaseInfo* base_info);

  // optional .SensorProto.VelodyneLasers lasers = 2;
  inline bool has_lasers() const;
  inline void clear_lasers();
  static const int kLasersFieldNumber = 2;
  inline const ::SensorProto::VelodyneLasers& lasers() const;
  inline ::SensorProto::VelodyneLasers* mutable_lasers();
  inline ::SensorProto::VelodyneLasers* release_lasers();
  inline void set_allocated_lasers(::SensorProto::VelodyneLasers* lasers);

  // @@protoc_insertion_point(class_scope:SensorProto.VelodyneParmas)
 private:
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_lasers();
  inline void clear_has_lasers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SensorProto::LidarBaseInfo* base_info_;
  ::SensorProto::VelodyneLasers* lasers_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static VelodyneParmas* default_instance_;
};
// -------------------------------------------------------------------

class VelodyneFrame : public ::google::protobuf::Message {
 public:
  VelodyneFrame();
  virtual ~VelodyneFrame();

  VelodyneFrame(const VelodyneFrame& from);

  inline VelodyneFrame& operator=(const VelodyneFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VelodyneFrame& default_instance();

  void Swap(VelodyneFrame* other);

  // implements Message ----------------------------------------------

  VelodyneFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VelodyneFrame& from);
  void MergeFrom(const VelodyneFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // optional .SensorProto.VelodyneParmas parms = 2;
  inline bool has_parms() const;
  inline void clear_parms();
  static const int kParmsFieldNumber = 2;
  inline const ::SensorProto::VelodyneParmas& parms() const;
  inline ::SensorProto::VelodyneParmas* mutable_parms();
  inline ::SensorProto::VelodyneParmas* release_parms();
  inline void set_allocated_parms(::SensorProto::VelodyneParmas* parms);

  // @@protoc_insertion_point(class_scope:SensorProto.VelodyneFrame)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_parms();
  inline void clear_has_parms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_stamp_;
  ::SensorProto::VelodyneParmas* parms_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static VelodyneFrame* default_instance_;
};
// -------------------------------------------------------------------

class RobosenseParmas : public ::google::protobuf::Message {
 public:
  RobosenseParmas();
  virtual ~RobosenseParmas();

  RobosenseParmas(const RobosenseParmas& from);

  inline RobosenseParmas& operator=(const RobosenseParmas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobosenseParmas& default_instance();

  void Swap(RobosenseParmas* other);

  // implements Message ----------------------------------------------

  RobosenseParmas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobosenseParmas& from);
  void MergeFrom(const RobosenseParmas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SensorProto.LidarBaseInfo base_info = 1;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::SensorProto::LidarBaseInfo& base_info() const;
  inline ::SensorProto::LidarBaseInfo* mutable_base_info();
  inline ::SensorProto::LidarBaseInfo* release_base_info();
  inline void set_allocated_base_info(::SensorProto::LidarBaseInfo* base_info);

  // optional string server_ip = 2;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 2;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  inline void set_allocated_server_ip(::std::string* server_ip);

  // @@protoc_insertion_point(class_scope:SensorProto.RobosenseParmas)
 private:
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SensorProto::LidarBaseInfo* base_info_;
  ::std::string* server_ip_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static RobosenseParmas* default_instance_;
};
// -------------------------------------------------------------------

class RobosenseFrame : public ::google::protobuf::Message {
 public:
  RobosenseFrame();
  virtual ~RobosenseFrame();

  RobosenseFrame(const RobosenseFrame& from);

  inline RobosenseFrame& operator=(const RobosenseFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobosenseFrame& default_instance();

  void Swap(RobosenseFrame* other);

  // implements Message ----------------------------------------------

  RobosenseFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobosenseFrame& from);
  void MergeFrom(const RobosenseFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);

  // optional .SensorProto.RobosenseParmas parms = 2;
  inline bool has_parms() const;
  inline void clear_parms();
  static const int kParmsFieldNumber = 2;
  inline const ::SensorProto::RobosenseParmas& parms() const;
  inline ::SensorProto::RobosenseParmas* mutable_parms();
  inline ::SensorProto::RobosenseParmas* release_parms();
  inline void set_allocated_parms(::SensorProto::RobosenseParmas* parms);

  // @@protoc_insertion_point(class_scope:SensorProto.RobosenseFrame)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_parms();
  inline void clear_has_parms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_stamp_;
  ::SensorProto::RobosenseParmas* parms_;
  friend void  protobuf_AddDesc_sensor_2eproto();
  friend void protobuf_AssignDesc_sensor_2eproto();
  friend void protobuf_ShutdownFile_sensor_2eproto();

  void InitAsDefaultInstance();
  static RobosenseFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// IMUFrame

// optional float acc_x = 1;
inline bool IMUFrame::has_acc_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUFrame::set_has_acc_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUFrame::clear_has_acc_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUFrame::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
inline float IMUFrame::acc_x() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.acc_x)
  return acc_x_;
}
inline void IMUFrame::set_acc_x(float value) {
  set_has_acc_x();
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.acc_x)
}

// optional float acc_y = 2;
inline bool IMUFrame::has_acc_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUFrame::set_has_acc_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUFrame::clear_has_acc_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUFrame::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
inline float IMUFrame::acc_y() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.acc_y)
  return acc_y_;
}
inline void IMUFrame::set_acc_y(float value) {
  set_has_acc_y();
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.acc_y)
}

// optional float acc_z = 3;
inline bool IMUFrame::has_acc_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUFrame::set_has_acc_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUFrame::clear_has_acc_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUFrame::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
inline float IMUFrame::acc_z() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.acc_z)
  return acc_z_;
}
inline void IMUFrame::set_acc_z(float value) {
  set_has_acc_z();
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.acc_z)
}

// optional float gyro_x = 4;
inline bool IMUFrame::has_gyro_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUFrame::set_has_gyro_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUFrame::clear_has_gyro_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUFrame::clear_gyro_x() {
  gyro_x_ = 0;
  clear_has_gyro_x();
}
inline float IMUFrame::gyro_x() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.gyro_x)
  return gyro_x_;
}
inline void IMUFrame::set_gyro_x(float value) {
  set_has_gyro_x();
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.gyro_x)
}

// optional float gyro_y = 5;
inline bool IMUFrame::has_gyro_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUFrame::set_has_gyro_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUFrame::clear_has_gyro_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUFrame::clear_gyro_y() {
  gyro_y_ = 0;
  clear_has_gyro_y();
}
inline float IMUFrame::gyro_y() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.gyro_y)
  return gyro_y_;
}
inline void IMUFrame::set_gyro_y(float value) {
  set_has_gyro_y();
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.gyro_y)
}

// optional float gyro_z = 6;
inline bool IMUFrame::has_gyro_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMUFrame::set_has_gyro_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMUFrame::clear_has_gyro_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMUFrame::clear_gyro_z() {
  gyro_z_ = 0;
  clear_has_gyro_z();
}
inline float IMUFrame::gyro_z() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.gyro_z)
  return gyro_z_;
}
inline void IMUFrame::set_gyro_z(float value) {
  set_has_gyro_z();
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.gyro_z)
}

// optional float temperature = 7;
inline bool IMUFrame::has_temperature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMUFrame::set_has_temperature() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMUFrame::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMUFrame::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline float IMUFrame::temperature() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.temperature)
  return temperature_;
}
inline void IMUFrame::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.temperature)
}

// required int64 time_stamp = 8;
inline bool IMUFrame::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMUFrame::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMUFrame::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMUFrame::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 IMUFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.IMUFrame.time_stamp)
  return time_stamp_;
}
inline void IMUFrame::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.IMUFrame.time_stamp)
}

// -------------------------------------------------------------------

// GPSFrame

// required float longitude = 1;
inline bool GPSFrame::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPSFrame::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPSFrame::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPSFrame::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float GPSFrame::longitude() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.longitude)
  return longitude_;
}
inline void GPSFrame::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.longitude)
}

// required float latitude = 2;
inline bool GPSFrame::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPSFrame::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPSFrame::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPSFrame::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float GPSFrame::latitude() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.latitude)
  return latitude_;
}
inline void GPSFrame::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.latitude)
}

// required int64 time_stamp = 3;
inline bool GPSFrame::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPSFrame::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPSFrame::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPSFrame::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 GPSFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.time_stamp)
  return time_stamp_;
}
inline void GPSFrame::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.time_stamp)
}

// optional float longitude_cent = 4;
inline bool GPSFrame::has_longitude_cent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GPSFrame::set_has_longitude_cent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GPSFrame::clear_has_longitude_cent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GPSFrame::clear_longitude_cent() {
  longitude_cent_ = 0;
  clear_has_longitude_cent();
}
inline float GPSFrame::longitude_cent() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.longitude_cent)
  return longitude_cent_;
}
inline void GPSFrame::set_longitude_cent(float value) {
  set_has_longitude_cent();
  longitude_cent_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.longitude_cent)
}

// optional string longitude_dir = 5;
inline bool GPSFrame::has_longitude_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GPSFrame::set_has_longitude_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GPSFrame::clear_has_longitude_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GPSFrame::clear_longitude_dir() {
  if (longitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_dir_->clear();
  }
  clear_has_longitude_dir();
}
inline const ::std::string& GPSFrame::longitude_dir() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.longitude_dir)
  return *longitude_dir_;
}
inline void GPSFrame::set_longitude_dir(const ::std::string& value) {
  set_has_longitude_dir();
  if (longitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_dir_ = new ::std::string;
  }
  longitude_dir_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.longitude_dir)
}
inline void GPSFrame::set_longitude_dir(const char* value) {
  set_has_longitude_dir();
  if (longitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_dir_ = new ::std::string;
  }
  longitude_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.GPSFrame.longitude_dir)
}
inline void GPSFrame::set_longitude_dir(const char* value, size_t size) {
  set_has_longitude_dir();
  if (longitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_dir_ = new ::std::string;
  }
  longitude_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.GPSFrame.longitude_dir)
}
inline ::std::string* GPSFrame::mutable_longitude_dir() {
  set_has_longitude_dir();
  if (longitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrame.longitude_dir)
  return longitude_dir_;
}
inline ::std::string* GPSFrame::release_longitude_dir() {
  clear_has_longitude_dir();
  if (longitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = longitude_dir_;
    longitude_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GPSFrame::set_allocated_longitude_dir(::std::string* longitude_dir) {
  if (longitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_dir_;
  }
  if (longitude_dir) {
    set_has_longitude_dir();
    longitude_dir_ = longitude_dir;
  } else {
    clear_has_longitude_dir();
    longitude_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrame.longitude_dir)
}

// optional float latitude_cent = 6;
inline bool GPSFrame::has_latitude_cent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GPSFrame::set_has_latitude_cent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GPSFrame::clear_has_latitude_cent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GPSFrame::clear_latitude_cent() {
  latitude_cent_ = 0;
  clear_has_latitude_cent();
}
inline float GPSFrame::latitude_cent() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.latitude_cent)
  return latitude_cent_;
}
inline void GPSFrame::set_latitude_cent(float value) {
  set_has_latitude_cent();
  latitude_cent_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.latitude_cent)
}

// optional string latitude_dir = 7;
inline bool GPSFrame::has_latitude_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GPSFrame::set_has_latitude_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GPSFrame::clear_has_latitude_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GPSFrame::clear_latitude_dir() {
  if (latitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_dir_->clear();
  }
  clear_has_latitude_dir();
}
inline const ::std::string& GPSFrame::latitude_dir() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.latitude_dir)
  return *latitude_dir_;
}
inline void GPSFrame::set_latitude_dir(const ::std::string& value) {
  set_has_latitude_dir();
  if (latitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_dir_ = new ::std::string;
  }
  latitude_dir_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.latitude_dir)
}
inline void GPSFrame::set_latitude_dir(const char* value) {
  set_has_latitude_dir();
  if (latitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_dir_ = new ::std::string;
  }
  latitude_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.GPSFrame.latitude_dir)
}
inline void GPSFrame::set_latitude_dir(const char* value, size_t size) {
  set_has_latitude_dir();
  if (latitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_dir_ = new ::std::string;
  }
  latitude_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.GPSFrame.latitude_dir)
}
inline ::std::string* GPSFrame::mutable_latitude_dir() {
  set_has_latitude_dir();
  if (latitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrame.latitude_dir)
  return latitude_dir_;
}
inline ::std::string* GPSFrame::release_latitude_dir() {
  clear_has_latitude_dir();
  if (latitude_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = latitude_dir_;
    latitude_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GPSFrame::set_allocated_latitude_dir(::std::string* latitude_dir) {
  if (latitude_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_dir_;
  }
  if (latitude_dir) {
    set_has_latitude_dir();
    latitude_dir_ = latitude_dir;
  } else {
    clear_has_latitude_dir();
    latitude_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrame.latitude_dir)
}

// optional float ground_speed = 8;
inline bool GPSFrame::has_ground_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GPSFrame::set_has_ground_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GPSFrame::clear_has_ground_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GPSFrame::clear_ground_speed() {
  ground_speed_ = 0;
  clear_has_ground_speed();
}
inline float GPSFrame::ground_speed() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.ground_speed)
  return ground_speed_;
}
inline void GPSFrame::set_ground_speed(float value) {
  set_has_ground_speed();
  ground_speed_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.ground_speed)
}

// optional float ground_course = 9;
inline bool GPSFrame::has_ground_course() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GPSFrame::set_has_ground_course() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GPSFrame::clear_has_ground_course() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GPSFrame::clear_ground_course() {
  ground_course_ = 0;
  clear_has_ground_course();
}
inline float GPSFrame::ground_course() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.ground_course)
  return ground_course_;
}
inline void GPSFrame::set_ground_course(float value) {
  set_has_ground_course();
  ground_course_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.ground_course)
}

// optional int64 gps_time = 10;
inline bool GPSFrame::has_gps_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GPSFrame::set_has_gps_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GPSFrame::clear_has_gps_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GPSFrame::clear_gps_time() {
  gps_time_ = GOOGLE_LONGLONG(0);
  clear_has_gps_time();
}
inline ::google::protobuf::int64 GPSFrame::gps_time() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.gps_time)
  return gps_time_;
}
inline void GPSFrame::set_gps_time(::google::protobuf::int64 value) {
  set_has_gps_time();
  gps_time_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.gps_time)
}

// optional float altitude = 11;
inline bool GPSFrame::has_altitude() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GPSFrame::set_has_altitude() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GPSFrame::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GPSFrame::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline float GPSFrame::altitude() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.altitude)
  return altitude_;
}
inline void GPSFrame::set_altitude(float value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.altitude)
}

// optional float accuracy = 12;
inline bool GPSFrame::has_accuracy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GPSFrame::set_has_accuracy() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GPSFrame::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GPSFrame::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
inline float GPSFrame::accuracy() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrame.accuracy)
  return accuracy_;
}
inline void GPSFrame::set_accuracy(float value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrame.accuracy)
}

// -------------------------------------------------------------------

// GPSFrameRaw

// optional string info = 1;
inline bool GPSFrameRaw::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPSFrameRaw::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPSFrameRaw::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPSFrameRaw::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& GPSFrameRaw::info() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrameRaw.info)
  return *info_;
}
inline void GPSFrameRaw::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrameRaw.info)
}
inline void GPSFrameRaw::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.GPSFrameRaw.info)
}
inline void GPSFrameRaw::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.GPSFrameRaw.info)
}
inline ::std::string* GPSFrameRaw::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrameRaw.info)
  return info_;
}
inline ::std::string* GPSFrameRaw::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GPSFrameRaw::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrameRaw.info)
}

// required int64 time_stamp = 2;
inline bool GPSFrameRaw::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPSFrameRaw::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPSFrameRaw::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPSFrameRaw::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 GPSFrameRaw::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrameRaw.time_stamp)
  return time_stamp_;
}
inline void GPSFrameRaw::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.GPSFrameRaw.time_stamp)
}

// optional .SensorProto.GPSFrame parsed = 3;
inline bool GPSFrameRaw::has_parsed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPSFrameRaw::set_has_parsed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPSFrameRaw::clear_has_parsed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPSFrameRaw::clear_parsed() {
  if (parsed_ != NULL) parsed_->::SensorProto::GPSFrame::Clear();
  clear_has_parsed();
}
inline const ::SensorProto::GPSFrame& GPSFrameRaw::parsed() const {
  // @@protoc_insertion_point(field_get:SensorProto.GPSFrameRaw.parsed)
  return parsed_ != NULL ? *parsed_ : *default_instance_->parsed_;
}
inline ::SensorProto::GPSFrame* GPSFrameRaw::mutable_parsed() {
  set_has_parsed();
  if (parsed_ == NULL) parsed_ = new ::SensorProto::GPSFrame;
  // @@protoc_insertion_point(field_mutable:SensorProto.GPSFrameRaw.parsed)
  return parsed_;
}
inline ::SensorProto::GPSFrame* GPSFrameRaw::release_parsed() {
  clear_has_parsed();
  ::SensorProto::GPSFrame* temp = parsed_;
  parsed_ = NULL;
  return temp;
}
inline void GPSFrameRaw::set_allocated_parsed(::SensorProto::GPSFrame* parsed) {
  delete parsed_;
  parsed_ = parsed;
  if (parsed) {
    set_has_parsed();
  } else {
    clear_has_parsed();
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.GPSFrameRaw.parsed)
}

// -------------------------------------------------------------------

// LidarBaseInfo

// optional string vendor_name = 1;
inline bool LidarBaseInfo::has_vendor_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarBaseInfo::set_has_vendor_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarBaseInfo::clear_has_vendor_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarBaseInfo::clear_vendor_name() {
  if (vendor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_name_->clear();
  }
  clear_has_vendor_name();
}
inline const ::std::string& LidarBaseInfo::vendor_name() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.vendor_name)
  return *vendor_name_;
}
inline void LidarBaseInfo::set_vendor_name(const ::std::string& value) {
  set_has_vendor_name();
  if (vendor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_name_ = new ::std::string;
  }
  vendor_name_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.vendor_name)
}
inline void LidarBaseInfo::set_vendor_name(const char* value) {
  set_has_vendor_name();
  if (vendor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_name_ = new ::std::string;
  }
  vendor_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.LidarBaseInfo.vendor_name)
}
inline void LidarBaseInfo::set_vendor_name(const char* value, size_t size) {
  set_has_vendor_name();
  if (vendor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_name_ = new ::std::string;
  }
  vendor_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.LidarBaseInfo.vendor_name)
}
inline ::std::string* LidarBaseInfo::mutable_vendor_name() {
  set_has_vendor_name();
  if (vendor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vendor_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.LidarBaseInfo.vendor_name)
  return vendor_name_;
}
inline ::std::string* LidarBaseInfo::release_vendor_name() {
  clear_has_vendor_name();
  if (vendor_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vendor_name_;
    vendor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LidarBaseInfo::set_allocated_vendor_name(::std::string* vendor_name) {
  if (vendor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_name_;
  }
  if (vendor_name) {
    set_has_vendor_name();
    vendor_name_ = vendor_name;
  } else {
    clear_has_vendor_name();
    vendor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.LidarBaseInfo.vendor_name)
}

// optional string model = 2;
inline bool LidarBaseInfo::has_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarBaseInfo::set_has_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarBaseInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarBaseInfo::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& LidarBaseInfo::model() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.model)
  return *model_;
}
inline void LidarBaseInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.model)
}
inline void LidarBaseInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.LidarBaseInfo.model)
}
inline void LidarBaseInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.LidarBaseInfo.model)
}
inline ::std::string* LidarBaseInfo::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.LidarBaseInfo.model)
  return model_;
}
inline ::std::string* LidarBaseInfo::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LidarBaseInfo::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.LidarBaseInfo.model)
}

// optional string ip = 3;
inline bool LidarBaseInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarBaseInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarBaseInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarBaseInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LidarBaseInfo::ip() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.ip)
  return *ip_;
}
inline void LidarBaseInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.ip)
}
inline void LidarBaseInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.LidarBaseInfo.ip)
}
inline void LidarBaseInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.LidarBaseInfo.ip)
}
inline ::std::string* LidarBaseInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.LidarBaseInfo.ip)
  return ip_;
}
inline ::std::string* LidarBaseInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LidarBaseInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.LidarBaseInfo.ip)
}

// optional string desc = 4;
inline bool LidarBaseInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarBaseInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarBaseInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarBaseInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& LidarBaseInfo::desc() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.desc)
  return *desc_;
}
inline void LidarBaseInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.desc)
}
inline void LidarBaseInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.LidarBaseInfo.desc)
}
inline void LidarBaseInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.LidarBaseInfo.desc)
}
inline ::std::string* LidarBaseInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.LidarBaseInfo.desc)
  return desc_;
}
inline ::std::string* LidarBaseInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LidarBaseInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.LidarBaseInfo.desc)
}

// optional int64 port = 5;
inline bool LidarBaseInfo::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LidarBaseInfo::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LidarBaseInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LidarBaseInfo::clear_port() {
  port_ = GOOGLE_LONGLONG(0);
  clear_has_port();
}
inline ::google::protobuf::int64 LidarBaseInfo::port() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.port)
  return port_;
}
inline void LidarBaseInfo::set_port(::google::protobuf::int64 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.port)
}

// optional float rpm = 6;
inline bool LidarBaseInfo::has_rpm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LidarBaseInfo::set_has_rpm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LidarBaseInfo::clear_has_rpm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LidarBaseInfo::clear_rpm() {
  rpm_ = 0;
  clear_has_rpm();
}
inline float LidarBaseInfo::rpm() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.rpm)
  return rpm_;
}
inline void LidarBaseInfo::set_rpm(float value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.rpm)
}

// optional float time_offset = 7;
inline bool LidarBaseInfo::has_time_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LidarBaseInfo::set_has_time_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LidarBaseInfo::clear_has_time_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LidarBaseInfo::clear_time_offset() {
  time_offset_ = 0;
  clear_has_time_offset();
}
inline float LidarBaseInfo::time_offset() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.time_offset)
  return time_offset_;
}
inline void LidarBaseInfo::set_time_offset(float value) {
  set_has_time_offset();
  time_offset_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.time_offset)
}

// optional float repeat_delay = 8;
inline bool LidarBaseInfo::has_repeat_delay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LidarBaseInfo::set_has_repeat_delay() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LidarBaseInfo::clear_has_repeat_delay() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LidarBaseInfo::clear_repeat_delay() {
  repeat_delay_ = 0;
  clear_has_repeat_delay();
}
inline float LidarBaseInfo::repeat_delay() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.repeat_delay)
  return repeat_delay_;
}
inline void LidarBaseInfo::set_repeat_delay(float value) {
  set_has_repeat_delay();
  repeat_delay_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.repeat_delay)
}

// optional float max_range = 9;
inline bool LidarBaseInfo::has_max_range() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LidarBaseInfo::set_has_max_range() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LidarBaseInfo::clear_has_max_range() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LidarBaseInfo::clear_max_range() {
  max_range_ = 0;
  clear_has_max_range();
}
inline float LidarBaseInfo::max_range() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.max_range)
  return max_range_;
}
inline void LidarBaseInfo::set_max_range(float value) {
  set_has_max_range();
  max_range_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.max_range)
}

// optional float min_range = 10;
inline bool LidarBaseInfo::has_min_range() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LidarBaseInfo::set_has_min_range() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LidarBaseInfo::clear_has_min_range() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LidarBaseInfo::clear_min_range() {
  min_range_ = 0;
  clear_has_min_range();
}
inline float LidarBaseInfo::min_range() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.min_range)
  return min_range_;
}
inline void LidarBaseInfo::set_min_range(float value) {
  set_has_min_range();
  min_range_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.min_range)
}

// optional float view_direction = 11;
inline bool LidarBaseInfo::has_view_direction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LidarBaseInfo::set_has_view_direction() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LidarBaseInfo::clear_has_view_direction() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LidarBaseInfo::clear_view_direction() {
  view_direction_ = 0;
  clear_has_view_direction();
}
inline float LidarBaseInfo::view_direction() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.view_direction)
  return view_direction_;
}
inline void LidarBaseInfo::set_view_direction(float value) {
  set_has_view_direction();
  view_direction_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.view_direction)
}

// optional float view_width = 12;
inline bool LidarBaseInfo::has_view_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LidarBaseInfo::set_has_view_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LidarBaseInfo::clear_has_view_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LidarBaseInfo::clear_view_width() {
  view_width_ = 0;
  clear_has_view_width();
}
inline float LidarBaseInfo::view_width() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.view_width)
  return view_width_;
}
inline void LidarBaseInfo::set_view_width(float value) {
  set_has_view_width();
  view_width_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.view_width)
}

// optional float min_angle = 13;
inline bool LidarBaseInfo::has_min_angle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LidarBaseInfo::set_has_min_angle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LidarBaseInfo::clear_has_min_angle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LidarBaseInfo::clear_min_angle() {
  min_angle_ = 0;
  clear_has_min_angle();
}
inline float LidarBaseInfo::min_angle() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.min_angle)
  return min_angle_;
}
inline void LidarBaseInfo::set_min_angle(float value) {
  set_has_min_angle();
  min_angle_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.min_angle)
}

// optional float max_angle = 14;
inline bool LidarBaseInfo::has_max_angle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LidarBaseInfo::set_has_max_angle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LidarBaseInfo::clear_has_max_angle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LidarBaseInfo::clear_max_angle() {
  max_angle_ = 0;
  clear_has_max_angle();
}
inline float LidarBaseInfo::max_angle() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.max_angle)
  return max_angle_;
}
inline void LidarBaseInfo::set_max_angle(float value) {
  set_has_max_angle();
  max_angle_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.max_angle)
}

// optional float packet_rate = 15;
inline bool LidarBaseInfo::has_packet_rate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LidarBaseInfo::set_has_packet_rate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LidarBaseInfo::clear_has_packet_rate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LidarBaseInfo::clear_packet_rate() {
  packet_rate_ = 0;
  clear_has_packet_rate();
}
inline float LidarBaseInfo::packet_rate() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.packet_rate)
  return packet_rate_;
}
inline void LidarBaseInfo::set_packet_rate(float value) {
  set_has_packet_rate();
  packet_rate_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.packet_rate)
}

// optional float pitch = 16;
inline bool LidarBaseInfo::has_pitch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LidarBaseInfo::set_has_pitch() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LidarBaseInfo::clear_has_pitch() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LidarBaseInfo::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float LidarBaseInfo::pitch() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.pitch)
  return pitch_;
}
inline void LidarBaseInfo::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.pitch)
}

// optional float yaw = 17;
inline bool LidarBaseInfo::has_yaw() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LidarBaseInfo::set_has_yaw() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LidarBaseInfo::clear_has_yaw() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LidarBaseInfo::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float LidarBaseInfo::yaw() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.yaw)
  return yaw_;
}
inline void LidarBaseInfo::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.yaw)
}

// optional float roll = 18;
inline bool LidarBaseInfo::has_roll() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LidarBaseInfo::set_has_roll() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LidarBaseInfo::clear_has_roll() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LidarBaseInfo::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float LidarBaseInfo::roll() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.roll)
  return roll_;
}
inline void LidarBaseInfo::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.roll)
}

// optional float x_offset = 19;
inline bool LidarBaseInfo::has_x_offset() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LidarBaseInfo::set_has_x_offset() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LidarBaseInfo::clear_has_x_offset() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LidarBaseInfo::clear_x_offset() {
  x_offset_ = 0;
  clear_has_x_offset();
}
inline float LidarBaseInfo::x_offset() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.x_offset)
  return x_offset_;
}
inline void LidarBaseInfo::set_x_offset(float value) {
  set_has_x_offset();
  x_offset_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.x_offset)
}

// optional float y_offset = 20;
inline bool LidarBaseInfo::has_y_offset() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LidarBaseInfo::set_has_y_offset() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LidarBaseInfo::clear_has_y_offset() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LidarBaseInfo::clear_y_offset() {
  y_offset_ = 0;
  clear_has_y_offset();
}
inline float LidarBaseInfo::y_offset() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.y_offset)
  return y_offset_;
}
inline void LidarBaseInfo::set_y_offset(float value) {
  set_has_y_offset();
  y_offset_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.y_offset)
}

// optional float z_offset = 21;
inline bool LidarBaseInfo::has_z_offset() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LidarBaseInfo::set_has_z_offset() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LidarBaseInfo::clear_has_z_offset() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LidarBaseInfo::clear_z_offset() {
  z_offset_ = 0;
  clear_has_z_offset();
}
inline float LidarBaseInfo::z_offset() const {
  // @@protoc_insertion_point(field_get:SensorProto.LidarBaseInfo.z_offset)
  return z_offset_;
}
inline void LidarBaseInfo::set_z_offset(float value) {
  set_has_z_offset();
  z_offset_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.LidarBaseInfo.z_offset)
}

// -------------------------------------------------------------------

// VelodyneLaserParam

// optional int32 id = 1;
inline bool VelodyneLaserParam::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VelodyneLaserParam::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VelodyneLaserParam::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VelodyneLaserParam::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 VelodyneLaserParam::id() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.id)
  return id_;
}
inline void VelodyneLaserParam::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.id)
}

// optional float dist_correction = 2;
inline bool VelodyneLaserParam::has_dist_correction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VelodyneLaserParam::set_has_dist_correction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VelodyneLaserParam::clear_has_dist_correction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VelodyneLaserParam::clear_dist_correction() {
  dist_correction_ = 0;
  clear_has_dist_correction();
}
inline float VelodyneLaserParam::dist_correction() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.dist_correction)
  return dist_correction_;
}
inline void VelodyneLaserParam::set_dist_correction(float value) {
  set_has_dist_correction();
  dist_correction_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.dist_correction)
}

// optional float dist_correction_x = 3;
inline bool VelodyneLaserParam::has_dist_correction_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VelodyneLaserParam::set_has_dist_correction_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VelodyneLaserParam::clear_has_dist_correction_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VelodyneLaserParam::clear_dist_correction_x() {
  dist_correction_x_ = 0;
  clear_has_dist_correction_x();
}
inline float VelodyneLaserParam::dist_correction_x() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.dist_correction_x)
  return dist_correction_x_;
}
inline void VelodyneLaserParam::set_dist_correction_x(float value) {
  set_has_dist_correction_x();
  dist_correction_x_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.dist_correction_x)
}

// optional float dist_correction_y = 4;
inline bool VelodyneLaserParam::has_dist_correction_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VelodyneLaserParam::set_has_dist_correction_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VelodyneLaserParam::clear_has_dist_correction_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VelodyneLaserParam::clear_dist_correction_y() {
  dist_correction_y_ = 0;
  clear_has_dist_correction_y();
}
inline float VelodyneLaserParam::dist_correction_y() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.dist_correction_y)
  return dist_correction_y_;
}
inline void VelodyneLaserParam::set_dist_correction_y(float value) {
  set_has_dist_correction_y();
  dist_correction_y_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.dist_correction_y)
}

// optional float focal_distance = 5;
inline bool VelodyneLaserParam::has_focal_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VelodyneLaserParam::set_has_focal_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VelodyneLaserParam::clear_has_focal_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VelodyneLaserParam::clear_focal_distance() {
  focal_distance_ = 0;
  clear_has_focal_distance();
}
inline float VelodyneLaserParam::focal_distance() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.focal_distance)
  return focal_distance_;
}
inline void VelodyneLaserParam::set_focal_distance(float value) {
  set_has_focal_distance();
  focal_distance_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.focal_distance)
}

// optional float focal_slope = 6;
inline bool VelodyneLaserParam::has_focal_slope() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VelodyneLaserParam::set_has_focal_slope() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VelodyneLaserParam::clear_has_focal_slope() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VelodyneLaserParam::clear_focal_slope() {
  focal_slope_ = 0;
  clear_has_focal_slope();
}
inline float VelodyneLaserParam::focal_slope() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.focal_slope)
  return focal_slope_;
}
inline void VelodyneLaserParam::set_focal_slope(float value) {
  set_has_focal_slope();
  focal_slope_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.focal_slope)
}

// optional float horiz_offset_correction = 7;
inline bool VelodyneLaserParam::has_horiz_offset_correction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VelodyneLaserParam::set_has_horiz_offset_correction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VelodyneLaserParam::clear_has_horiz_offset_correction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VelodyneLaserParam::clear_horiz_offset_correction() {
  horiz_offset_correction_ = 0;
  clear_has_horiz_offset_correction();
}
inline float VelodyneLaserParam::horiz_offset_correction() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.horiz_offset_correction)
  return horiz_offset_correction_;
}
inline void VelodyneLaserParam::set_horiz_offset_correction(float value) {
  set_has_horiz_offset_correction();
  horiz_offset_correction_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.horiz_offset_correction)
}

// optional float rot_correction = 8;
inline bool VelodyneLaserParam::has_rot_correction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VelodyneLaserParam::set_has_rot_correction() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VelodyneLaserParam::clear_has_rot_correction() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VelodyneLaserParam::clear_rot_correction() {
  rot_correction_ = 0;
  clear_has_rot_correction();
}
inline float VelodyneLaserParam::rot_correction() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.rot_correction)
  return rot_correction_;
}
inline void VelodyneLaserParam::set_rot_correction(float value) {
  set_has_rot_correction();
  rot_correction_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.rot_correction)
}

// optional float vert_correction = 9;
inline bool VelodyneLaserParam::has_vert_correction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VelodyneLaserParam::set_has_vert_correction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VelodyneLaserParam::clear_has_vert_correction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VelodyneLaserParam::clear_vert_correction() {
  vert_correction_ = 0;
  clear_has_vert_correction();
}
inline float VelodyneLaserParam::vert_correction() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.vert_correction)
  return vert_correction_;
}
inline void VelodyneLaserParam::set_vert_correction(float value) {
  set_has_vert_correction();
  vert_correction_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.vert_correction)
}

// optional float vert_offset_correction = 10;
inline bool VelodyneLaserParam::has_vert_offset_correction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VelodyneLaserParam::set_has_vert_offset_correction() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VelodyneLaserParam::clear_has_vert_offset_correction() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VelodyneLaserParam::clear_vert_offset_correction() {
  vert_offset_correction_ = 0;
  clear_has_vert_offset_correction();
}
inline float VelodyneLaserParam::vert_offset_correction() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.vert_offset_correction)
  return vert_offset_correction_;
}
inline void VelodyneLaserParam::set_vert_offset_correction(float value) {
  set_has_vert_offset_correction();
  vert_offset_correction_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.vert_offset_correction)
}

// optional float max_intensity = 11;
inline bool VelodyneLaserParam::has_max_intensity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VelodyneLaserParam::set_has_max_intensity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VelodyneLaserParam::clear_has_max_intensity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VelodyneLaserParam::clear_max_intensity() {
  max_intensity_ = 0;
  clear_has_max_intensity();
}
inline float VelodyneLaserParam::max_intensity() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.max_intensity)
  return max_intensity_;
}
inline void VelodyneLaserParam::set_max_intensity(float value) {
  set_has_max_intensity();
  max_intensity_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.max_intensity)
}

// optional float min_intensity = 12;
inline bool VelodyneLaserParam::has_min_intensity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VelodyneLaserParam::set_has_min_intensity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VelodyneLaserParam::clear_has_min_intensity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VelodyneLaserParam::clear_min_intensity() {
  min_intensity_ = 0;
  clear_has_min_intensity();
}
inline float VelodyneLaserParam::min_intensity() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLaserParam.min_intensity)
  return min_intensity_;
}
inline void VelodyneLaserParam::set_min_intensity(float value) {
  set_has_min_intensity();
  min_intensity_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLaserParam.min_intensity)
}

// -------------------------------------------------------------------

// VelodyneLasers

// optional int32 num = 1;
inline bool VelodyneLasers::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VelodyneLasers::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VelodyneLasers::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VelodyneLasers::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 VelodyneLasers::num() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLasers.num)
  return num_;
}
inline void VelodyneLasers::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneLasers.num)
}

// repeated .SensorProto.VelodyneLaserParam param = 2;
inline int VelodyneLasers::param_size() const {
  return param_.size();
}
inline void VelodyneLasers::clear_param() {
  param_.Clear();
}
inline const ::SensorProto::VelodyneLaserParam& VelodyneLasers::param(int index) const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneLasers.param)
  return param_.Get(index);
}
inline ::SensorProto::VelodyneLaserParam* VelodyneLasers::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:SensorProto.VelodyneLasers.param)
  return param_.Mutable(index);
}
inline ::SensorProto::VelodyneLaserParam* VelodyneLasers::add_param() {
  // @@protoc_insertion_point(field_add:SensorProto.VelodyneLasers.param)
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::VelodyneLaserParam >&
VelodyneLasers::param() const {
  // @@protoc_insertion_point(field_list:SensorProto.VelodyneLasers.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorProto::VelodyneLaserParam >*
VelodyneLasers::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:SensorProto.VelodyneLasers.param)
  return &param_;
}

// -------------------------------------------------------------------

// VelodyneParmas

// optional .SensorProto.LidarBaseInfo base_info = 1;
inline bool VelodyneParmas::has_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VelodyneParmas::set_has_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VelodyneParmas::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VelodyneParmas::clear_base_info() {
  if (base_info_ != NULL) base_info_->::SensorProto::LidarBaseInfo::Clear();
  clear_has_base_info();
}
inline const ::SensorProto::LidarBaseInfo& VelodyneParmas::base_info() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneParmas.base_info)
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::SensorProto::LidarBaseInfo* VelodyneParmas::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::SensorProto::LidarBaseInfo;
  // @@protoc_insertion_point(field_mutable:SensorProto.VelodyneParmas.base_info)
  return base_info_;
}
inline ::SensorProto::LidarBaseInfo* VelodyneParmas::release_base_info() {
  clear_has_base_info();
  ::SensorProto::LidarBaseInfo* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void VelodyneParmas::set_allocated_base_info(::SensorProto::LidarBaseInfo* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.VelodyneParmas.base_info)
}

// optional .SensorProto.VelodyneLasers lasers = 2;
inline bool VelodyneParmas::has_lasers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VelodyneParmas::set_has_lasers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VelodyneParmas::clear_has_lasers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VelodyneParmas::clear_lasers() {
  if (lasers_ != NULL) lasers_->::SensorProto::VelodyneLasers::Clear();
  clear_has_lasers();
}
inline const ::SensorProto::VelodyneLasers& VelodyneParmas::lasers() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneParmas.lasers)
  return lasers_ != NULL ? *lasers_ : *default_instance_->lasers_;
}
inline ::SensorProto::VelodyneLasers* VelodyneParmas::mutable_lasers() {
  set_has_lasers();
  if (lasers_ == NULL) lasers_ = new ::SensorProto::VelodyneLasers;
  // @@protoc_insertion_point(field_mutable:SensorProto.VelodyneParmas.lasers)
  return lasers_;
}
inline ::SensorProto::VelodyneLasers* VelodyneParmas::release_lasers() {
  clear_has_lasers();
  ::SensorProto::VelodyneLasers* temp = lasers_;
  lasers_ = NULL;
  return temp;
}
inline void VelodyneParmas::set_allocated_lasers(::SensorProto::VelodyneLasers* lasers) {
  delete lasers_;
  lasers_ = lasers;
  if (lasers) {
    set_has_lasers();
  } else {
    clear_has_lasers();
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.VelodyneParmas.lasers)
}

// -------------------------------------------------------------------

// VelodyneFrame

// required int64 time_stamp = 1;
inline bool VelodyneFrame::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VelodyneFrame::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VelodyneFrame::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VelodyneFrame::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 VelodyneFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneFrame.time_stamp)
  return time_stamp_;
}
inline void VelodyneFrame::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.VelodyneFrame.time_stamp)
}

// optional .SensorProto.VelodyneParmas parms = 2;
inline bool VelodyneFrame::has_parms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VelodyneFrame::set_has_parms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VelodyneFrame::clear_has_parms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VelodyneFrame::clear_parms() {
  if (parms_ != NULL) parms_->::SensorProto::VelodyneParmas::Clear();
  clear_has_parms();
}
inline const ::SensorProto::VelodyneParmas& VelodyneFrame::parms() const {
  // @@protoc_insertion_point(field_get:SensorProto.VelodyneFrame.parms)
  return parms_ != NULL ? *parms_ : *default_instance_->parms_;
}
inline ::SensorProto::VelodyneParmas* VelodyneFrame::mutable_parms() {
  set_has_parms();
  if (parms_ == NULL) parms_ = new ::SensorProto::VelodyneParmas;
  // @@protoc_insertion_point(field_mutable:SensorProto.VelodyneFrame.parms)
  return parms_;
}
inline ::SensorProto::VelodyneParmas* VelodyneFrame::release_parms() {
  clear_has_parms();
  ::SensorProto::VelodyneParmas* temp = parms_;
  parms_ = NULL;
  return temp;
}
inline void VelodyneFrame::set_allocated_parms(::SensorProto::VelodyneParmas* parms) {
  delete parms_;
  parms_ = parms;
  if (parms) {
    set_has_parms();
  } else {
    clear_has_parms();
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.VelodyneFrame.parms)
}

// -------------------------------------------------------------------

// RobosenseParmas

// optional .SensorProto.LidarBaseInfo base_info = 1;
inline bool RobosenseParmas::has_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobosenseParmas::set_has_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobosenseParmas::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobosenseParmas::clear_base_info() {
  if (base_info_ != NULL) base_info_->::SensorProto::LidarBaseInfo::Clear();
  clear_has_base_info();
}
inline const ::SensorProto::LidarBaseInfo& RobosenseParmas::base_info() const {
  // @@protoc_insertion_point(field_get:SensorProto.RobosenseParmas.base_info)
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::SensorProto::LidarBaseInfo* RobosenseParmas::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::SensorProto::LidarBaseInfo;
  // @@protoc_insertion_point(field_mutable:SensorProto.RobosenseParmas.base_info)
  return base_info_;
}
inline ::SensorProto::LidarBaseInfo* RobosenseParmas::release_base_info() {
  clear_has_base_info();
  ::SensorProto::LidarBaseInfo* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void RobosenseParmas::set_allocated_base_info(::SensorProto::LidarBaseInfo* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.RobosenseParmas.base_info)
}

// optional string server_ip = 2;
inline bool RobosenseParmas::has_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobosenseParmas::set_has_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobosenseParmas::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobosenseParmas::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& RobosenseParmas::server_ip() const {
  // @@protoc_insertion_point(field_get:SensorProto.RobosenseParmas.server_ip)
  return *server_ip_;
}
inline void RobosenseParmas::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
  // @@protoc_insertion_point(field_set:SensorProto.RobosenseParmas.server_ip)
}
inline void RobosenseParmas::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:SensorProto.RobosenseParmas.server_ip)
}
inline void RobosenseParmas::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SensorProto.RobosenseParmas.server_ip)
}
inline ::std::string* RobosenseParmas::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SensorProto.RobosenseParmas.server_ip)
  return server_ip_;
}
inline ::std::string* RobosenseParmas::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RobosenseParmas::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ip_;
  }
  if (server_ip) {
    set_has_server_ip();
    server_ip_ = server_ip;
  } else {
    clear_has_server_ip();
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.RobosenseParmas.server_ip)
}

// -------------------------------------------------------------------

// RobosenseFrame

// required int64 time_stamp = 1;
inline bool RobosenseFrame::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobosenseFrame::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobosenseFrame::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobosenseFrame::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 RobosenseFrame::time_stamp() const {
  // @@protoc_insertion_point(field_get:SensorProto.RobosenseFrame.time_stamp)
  return time_stamp_;
}
inline void RobosenseFrame::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:SensorProto.RobosenseFrame.time_stamp)
}

// optional .SensorProto.RobosenseParmas parms = 2;
inline bool RobosenseFrame::has_parms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobosenseFrame::set_has_parms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobosenseFrame::clear_has_parms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobosenseFrame::clear_parms() {
  if (parms_ != NULL) parms_->::SensorProto::RobosenseParmas::Clear();
  clear_has_parms();
}
inline const ::SensorProto::RobosenseParmas& RobosenseFrame::parms() const {
  // @@protoc_insertion_point(field_get:SensorProto.RobosenseFrame.parms)
  return parms_ != NULL ? *parms_ : *default_instance_->parms_;
}
inline ::SensorProto::RobosenseParmas* RobosenseFrame::mutable_parms() {
  set_has_parms();
  if (parms_ == NULL) parms_ = new ::SensorProto::RobosenseParmas;
  // @@protoc_insertion_point(field_mutable:SensorProto.RobosenseFrame.parms)
  return parms_;
}
inline ::SensorProto::RobosenseParmas* RobosenseFrame::release_parms() {
  clear_has_parms();
  ::SensorProto::RobosenseParmas* temp = parms_;
  parms_ = NULL;
  return temp;
}
inline void RobosenseFrame::set_allocated_parms(::SensorProto::RobosenseParmas* parms) {
  delete parms_;
  parms_ = parms;
  if (parms) {
    set_has_parms();
  } else {
    clear_has_parms();
  }
  // @@protoc_insertion_point(field_set_allocated:SensorProto.RobosenseFrame.parms)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensor_2eproto__INCLUDED
