// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.v0.proto

#ifndef PROTOBUF_frame_2ev0_2eproto__INCLUDED
#define PROTOBUF_frame_2ev0_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "can.pb.h"
#include "sensor.pb.h"
#include "warning.pb.h"
// @@protoc_insertion_point(includes)

namespace FrameV0Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_frame_2ev0_2eproto();
void protobuf_AssignDesc_frame_2ev0_2eproto();
void protobuf_ShutdownFile_frame_2ev0_2eproto();

class ObstacleResult;
class Box3DResult;
class SerializedData;
class Frame;
class FrameShuffle;

enum VehicleType {
  VEHICLE_TYPE_NONE = 0,
  VEHICLE_TYPE_REAR = 1,
  VEHICLE_TYPE_SIDE = 2
};
bool VehicleType_IsValid(int value);
const VehicleType VehicleType_MIN = VEHICLE_TYPE_NONE;
const VehicleType VehicleType_MAX = VEHICLE_TYPE_SIDE;
const int VehicleType_ARRAYSIZE = VehicleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleType_descriptor();
inline const ::std::string& VehicleType_Name(VehicleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleType_descriptor(), value);
}
inline bool VehicleType_Parse(
    const ::std::string& name, VehicleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleType>(
    VehicleType_descriptor(), name, value);
}
enum FrameSource {
  FrameSource_FPGA = 0,
  FrameSource_SOC = 1
};
bool FrameSource_IsValid(int value);
const FrameSource FrameSource_MIN = FrameSource_FPGA;
const FrameSource FrameSource_MAX = FrameSource_SOC;
const int FrameSource_ARRAYSIZE = FrameSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameSource_descriptor();
inline const ::std::string& FrameSource_Name(FrameSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameSource_descriptor(), value);
}
inline bool FrameSource_Parse(
    const ::std::string& name, FrameSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameSource>(
    FrameSource_descriptor(), name, value);
}
// ===================================================================

class ObstacleResult : public ::google::protobuf::Message {
 public:
  ObstacleResult();
  virtual ~ObstacleResult();

  ObstacleResult(const ObstacleResult& from);

  inline ObstacleResult& operator=(const ObstacleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleResult& default_instance();

  void Swap(ObstacleResult* other);

  // implements Message ----------------------------------------------

  ObstacleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObstacleResult& from);
  void MergeFrom(const ObstacleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 life_time = 2;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 2;
  inline ::google::protobuf::int32 life_time() const;
  inline void set_life_time(::google::protobuf::int32 value);

  // optional int32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // required .CommonProto.Rect rect_sta = 4;
  inline bool has_rect_sta() const;
  inline void clear_rect_sta();
  static const int kRectStaFieldNumber = 4;
  inline const ::CommonProto::Rect& rect_sta() const;
  inline ::CommonProto::Rect* mutable_rect_sta();
  inline ::CommonProto::Rect* release_rect_sta();
  inline void set_allocated_rect_sta(::CommonProto::Rect* rect_sta);

  // required .CommonProto.Rect rect_obs = 5;
  inline bool has_rect_obs() const;
  inline void clear_rect_obs();
  static const int kRectObsFieldNumber = 5;
  inline const ::CommonProto::Rect& rect_obs() const;
  inline ::CommonProto::Rect* mutable_rect_obs();
  inline ::CommonProto::Rect* release_rect_obs();
  inline void set_allocated_rect_obs(::CommonProto::Rect* rect_obs);

  // optional float conf = 6;
  inline bool has_conf() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 6;
  inline float conf() const;
  inline void set_conf(float value);

  // optional float acc_conf = 7;
  inline bool has_acc_conf() const;
  inline void clear_acc_conf();
  static const int kAccConfFieldNumber = 7;
  inline float acc_conf() const;
  inline void set_acc_conf(float value);

  // optional float ttc = 8;
  inline bool has_ttc() const;
  inline void clear_ttc();
  static const int kTtcFieldNumber = 8;
  inline float ttc() const;
  inline void set_ttc(float value);

  // optional float hmw = 9;
  inline bool has_hmw() const;
  inline void clear_hmw();
  static const int kHmwFieldNumber = 9;
  inline float hmw() const;
  inline void set_hmw(float value);

  // optional int32 type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool in_path = 11;
  inline bool has_in_path() const;
  inline void clear_in_path();
  static const int kInPathFieldNumber = 11;
  inline bool in_path() const;
  inline void set_in_path(bool value);

  // optional float distance = 12;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 12;
  inline float distance() const;
  inline void set_distance(float value);

  // optional float vx = 13;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 13;
  inline float vx() const;
  inline void set_vx(float value);

  // optional float vy = 14;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 14;
  inline float vy() const;
  inline void set_vy(float value);

  // @@protoc_insertion_point(class_scope:FrameV0Proto.ObstacleResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_life_time();
  inline void clear_has_life_time();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_rect_sta();
  inline void clear_has_rect_sta();
  inline void set_has_rect_obs();
  inline void clear_has_rect_obs();
  inline void set_has_conf();
  inline void clear_has_conf();
  inline void set_has_acc_conf();
  inline void clear_has_acc_conf();
  inline void set_has_ttc();
  inline void clear_has_ttc();
  inline void set_has_hmw();
  inline void clear_has_hmw();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_in_path();
  inline void clear_has_in_path();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 life_time_;
  ::CommonProto::Rect* rect_sta_;
  ::google::protobuf::int32 age_;
  float conf_;
  ::CommonProto::Rect* rect_obs_;
  float acc_conf_;
  float ttc_;
  float hmw_;
  ::google::protobuf::int32 type_;
  bool in_path_;
  float distance_;
  float vx_;
  float vy_;
  friend void  protobuf_AddDesc_frame_2ev0_2eproto();
  friend void protobuf_AssignDesc_frame_2ev0_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev0_2eproto();

  void InitAsDefaultInstance();
  static ObstacleResult* default_instance_;
};
// -------------------------------------------------------------------

class Box3DResult : public ::google::protobuf::Message {
 public:
  Box3DResult();
  virtual ~Box3DResult();

  Box3DResult(const Box3DResult& from);

  inline Box3DResult& operator=(const Box3DResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box3DResult& default_instance();

  void Swap(Box3DResult* other);

  // implements Message ----------------------------------------------

  Box3DResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box3DResult& from);
  void MergeFrom(const Box3DResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .CommonProto.Box3D box = 2;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 2;
  inline const ::CommonProto::Box3D& box() const;
  inline ::CommonProto::Box3D* mutable_box();
  inline ::CommonProto::Box3D* release_box();
  inline void set_allocated_box(::CommonProto::Box3D* box);

  // @@protoc_insertion_point(class_scope:FrameV0Proto.Box3DResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_box();
  inline void clear_has_box();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Box3D* box_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_frame_2ev0_2eproto();
  friend void protobuf_AssignDesc_frame_2ev0_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev0_2eproto();

  void InitAsDefaultInstance();
  static Box3DResult* default_instance_;
};
// -------------------------------------------------------------------

class SerializedData : public ::google::protobuf::Message {
 public:
  SerializedData();
  virtual ~SerializedData();

  SerializedData(const SerializedData& from);

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedData& default_instance();

  void Swap(SerializedData* other);

  // implements Message ----------------------------------------------

  SerializedData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SerializedData& from);
  void MergeFrom(const SerializedData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string proto_name = 1;
  inline bool has_proto_name() const;
  inline void clear_proto_name();
  static const int kProtoNameFieldNumber = 1;
  inline const ::std::string& proto_name() const;
  inline void set_proto_name(const ::std::string& value);
  inline void set_proto_name(const char* value);
  inline void set_proto_name(const char* value, size_t size);
  inline ::std::string* mutable_proto_name();
  inline ::std::string* release_proto_name();
  inline void set_allocated_proto_name(::std::string* proto_name);

  // optional string proto_hex_string = 2;
  inline bool has_proto_hex_string() const;
  inline void clear_proto_hex_string();
  static const int kProtoHexStringFieldNumber = 2;
  inline const ::std::string& proto_hex_string() const;
  inline void set_proto_hex_string(const ::std::string& value);
  inline void set_proto_hex_string(const char* value);
  inline void set_proto_hex_string(const char* value, size_t size);
  inline ::std::string* mutable_proto_hex_string();
  inline ::std::string* release_proto_hex_string();
  inline void set_allocated_proto_hex_string(::std::string* proto_hex_string);

  // @@protoc_insertion_point(class_scope:FrameV0Proto.SerializedData)
 private:
  inline void set_has_proto_name();
  inline void clear_has_proto_name();
  inline void set_has_proto_hex_string();
  inline void clear_has_proto_hex_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* proto_name_;
  ::std::string* proto_hex_string_;
  friend void  protobuf_AddDesc_frame_2ev0_2eproto();
  friend void protobuf_AssignDesc_frame_2ev0_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev0_2eproto();

  void InitAsDefaultInstance();
  static SerializedData* default_instance_;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  Frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 frame_id = 2;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // optional .CommonProto.CameraMatrix camera = 3;
  inline bool has_camera() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 3;
  inline const ::CommonProto::CameraMatrix& camera() const;
  inline ::CommonProto::CameraMatrix* mutable_camera();
  inline ::CommonProto::CameraMatrix* release_camera();
  inline void set_allocated_camera(::CommonProto::CameraMatrix* camera);

  // optional .CommonProto.Image img_frame = 4;
  inline bool has_img_frame() const;
  inline void clear_img_frame();
  static const int kImgFrameFieldNumber = 4;
  inline const ::CommonProto::Image& img_frame() const;
  inline ::CommonProto::Image* mutable_img_frame();
  inline ::CommonProto::Image* release_img_frame();
  inline void set_allocated_img_frame(::CommonProto::Image* img_frame);

  // optional .CANProto.CANFrame can_frames = 5;
  inline bool has_can_frames() const;
  inline void clear_can_frames();
  static const int kCanFramesFieldNumber = 5;
  inline const ::CANProto::CANFrame& can_frames() const;
  inline ::CANProto::CANFrame* mutable_can_frames();
  inline ::CANProto::CANFrame* release_can_frames();
  inline void set_allocated_can_frames(::CANProto::CANFrame* can_frames);

  // repeated .FrameV0Proto.ObstacleResult vehiles = 6;
  inline int vehiles_size() const;
  inline void clear_vehiles();
  static const int kVehilesFieldNumber = 6;
  inline const ::FrameV0Proto::ObstacleResult& vehiles(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_vehiles(int index);
  inline ::FrameV0Proto::ObstacleResult* add_vehiles();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      vehiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_vehiles();

  // repeated .CommonProto.Line lanes = 7;
  inline int lanes_size() const;
  inline void clear_lanes();
  static const int kLanesFieldNumber = 7;
  inline const ::CommonProto::Line& lanes(int index) const;
  inline ::CommonProto::Line* mutable_lanes(int index);
  inline ::CommonProto::Line* add_lanes();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >&
      lanes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >*
      mutable_lanes();

  // optional .WarningProto.FCW fcw = 8;
  inline bool has_fcw() const;
  inline void clear_fcw();
  static const int kFcwFieldNumber = 8;
  inline const ::WarningProto::FCW& fcw() const;
  inline ::WarningProto::FCW* mutable_fcw();
  inline ::WarningProto::FCW* release_fcw();
  inline void set_allocated_fcw(::WarningProto::FCW* fcw);

  // optional .WarningProto.LDW ldw = 9;
  inline bool has_ldw() const;
  inline void clear_ldw();
  static const int kLdwFieldNumber = 9;
  inline const ::WarningProto::LDW& ldw() const;
  inline ::WarningProto::LDW* mutable_ldw();
  inline ::WarningProto::LDW* release_ldw();
  inline void set_allocated_ldw(::WarningProto::LDW* ldw);

  // repeated .CANProto.CANFrameRaw can_frames_raw = 10;
  inline int can_frames_raw_size() const;
  inline void clear_can_frames_raw();
  static const int kCanFramesRawFieldNumber = 10;
  inline const ::CANProto::CANFrameRaw& can_frames_raw(int index) const;
  inline ::CANProto::CANFrameRaw* mutable_can_frames_raw(int index);
  inline ::CANProto::CANFrameRaw* add_can_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >&
      can_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >*
      mutable_can_frames_raw();

  // optional .SensorProto.IMUFrame imu_frame = 11;
  inline bool has_imu_frame() const;
  inline void clear_imu_frame();
  static const int kImuFrameFieldNumber = 11;
  inline const ::SensorProto::IMUFrame& imu_frame() const;
  inline ::SensorProto::IMUFrame* mutable_imu_frame();
  inline ::SensorProto::IMUFrame* release_imu_frame();
  inline void set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame);

  // repeated .SensorProto.IMUFrame imu_frames_raw = 12;
  inline int imu_frames_raw_size() const;
  inline void clear_imu_frames_raw();
  static const int kImuFramesRawFieldNumber = 12;
  inline const ::SensorProto::IMUFrame& imu_frames_raw(int index) const;
  inline ::SensorProto::IMUFrame* mutable_imu_frames_raw(int index);
  inline ::SensorProto::IMUFrame* add_imu_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >&
      imu_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >*
      mutable_imu_frames_raw();

  // optional .SensorProto.GPSFrame gps_frame = 13;
  inline bool has_gps_frame() const;
  inline void clear_gps_frame();
  static const int kGpsFrameFieldNumber = 13;
  inline const ::SensorProto::GPSFrame& gps_frame() const;
  inline ::SensorProto::GPSFrame* mutable_gps_frame();
  inline ::SensorProto::GPSFrame* release_gps_frame();
  inline void set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame);

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 14;
  inline int gps_frames_raw_size() const;
  inline void clear_gps_frames_raw();
  static const int kGpsFramesRawFieldNumber = 14;
  inline const ::SensorProto::GPSFrameRaw& gps_frames_raw(int index) const;
  inline ::SensorProto::GPSFrameRaw* mutable_gps_frames_raw(int index);
  inline ::SensorProto::GPSFrameRaw* add_gps_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
      gps_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
      mutable_gps_frames_raw();

  // repeated .CommonProto.FreeSpaceResult freespace = 15;
  inline int freespace_size() const;
  inline void clear_freespace();
  static const int kFreespaceFieldNumber = 15;
  inline const ::CommonProto::FreeSpaceResult& freespace(int index) const;
  inline ::CommonProto::FreeSpaceResult* mutable_freespace(int index);
  inline ::CommonProto::FreeSpaceResult* add_freespace();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >&
      freespace() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >*
      mutable_freespace();

  // optional .FrameV0Proto.FrameSource source = 16;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 16;
  inline ::FrameV0Proto::FrameSource source() const;
  inline void set_source(::FrameV0Proto::FrameSource value);

  // optional .CommonProto.MotionFrame motion_frame = 17;
  inline bool has_motion_frame() const;
  inline void clear_motion_frame();
  static const int kMotionFrameFieldNumber = 17;
  inline const ::CommonProto::MotionFrame& motion_frame() const;
  inline ::CommonProto::MotionFrame* mutable_motion_frame();
  inline ::CommonProto::MotionFrame* release_motion_frame();
  inline void set_allocated_motion_frame(::CommonProto::MotionFrame* motion_frame);

  // optional .CommonProto.CameraParam camera_param = 18;
  inline bool has_camera_param() const;
  inline void clear_camera_param();
  static const int kCameraParamFieldNumber = 18;
  inline const ::CommonProto::CameraParam& camera_param() const;
  inline ::CommonProto::CameraParam* mutable_camera_param();
  inline ::CommonProto::CameraParam* release_camera_param();
  inline void set_allocated_camera_param(::CommonProto::CameraParam* camera_param);

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 19;
  inline int pedestrians_size() const;
  inline void clear_pedestrians();
  static const int kPedestriansFieldNumber = 19;
  inline const ::FrameV0Proto::ObstacleResult& pedestrians(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_pedestrians(int index);
  inline ::FrameV0Proto::ObstacleResult* add_pedestrians();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      pedestrians() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_pedestrians();

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 20;
  inline int vehicle_raw_size() const;
  inline void clear_vehicle_raw();
  static const int kVehicleRawFieldNumber = 20;
  inline const ::CommonProto::ObstacleRaw& vehicle_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_vehicle_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_vehicle_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      vehicle_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_vehicle_raw();

  // repeated .CommonProto.ObstacleRaw lane_raw = 21;
  inline int lane_raw_size() const;
  inline void clear_lane_raw();
  static const int kLaneRawFieldNumber = 21;
  inline const ::CommonProto::ObstacleRaw& lane_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_lane_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_lane_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      lane_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_lane_raw();

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 22;
  inline int pedestrians_raw_size() const;
  inline void clear_pedestrians_raw();
  static const int kPedestriansRawFieldNumber = 22;
  inline const ::CommonProto::ObstacleRaw& pedestrians_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_pedestrians_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_pedestrians_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      pedestrians_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_pedestrians_raw();

  // optional .WarningProto.WarningResult warning_result = 23;
  inline bool has_warning_result() const;
  inline void clear_warning_result();
  static const int kWarningResultFieldNumber = 23;
  inline const ::WarningProto::WarningResult& warning_result() const;
  inline ::WarningProto::WarningResult* mutable_warning_result();
  inline ::WarningProto::WarningResult* release_warning_result();
  inline void set_allocated_warning_result(::WarningProto::WarningResult* warning_result);

  // optional .CommonProto.OdometryFrame odometry = 24;
  inline bool has_odometry() const;
  inline void clear_odometry();
  static const int kOdometryFieldNumber = 24;
  inline const ::CommonProto::OdometryFrame& odometry() const;
  inline ::CommonProto::OdometryFrame* mutable_odometry();
  inline ::CommonProto::OdometryFrame* release_odometry();
  inline void set_allocated_odometry(::CommonProto::OdometryFrame* odometry);

  // optional .CommonProto.CameraParam camera_param_default = 25;
  inline bool has_camera_param_default() const;
  inline void clear_camera_param_default();
  static const int kCameraParamDefaultFieldNumber = 25;
  inline const ::CommonProto::CameraParam& camera_param_default() const;
  inline ::CommonProto::CameraParam* mutable_camera_param_default();
  inline ::CommonProto::CameraParam* release_camera_param_default();
  inline void set_allocated_camera_param_default(::CommonProto::CameraParam* camera_param_default);

  // optional .SensorProto.IMUFrame imu_offset = 26;
  inline bool has_imu_offset() const;
  inline void clear_imu_offset();
  static const int kImuOffsetFieldNumber = 26;
  inline const ::SensorProto::IMUFrame& imu_offset() const;
  inline ::SensorProto::IMUFrame* mutable_imu_offset();
  inline ::SensorProto::IMUFrame* release_imu_offset();
  inline void set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset);

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  inline int obj_raw_size() const;
  inline void clear_obj_raw();
  static const int kObjRawFieldNumber = 27;
  inline const ::CommonProto::ObstacleRaw& obj_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_obj_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_obj_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      obj_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_obj_raw();

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 28;
  inline int traffic_signs_size() const;
  inline void clear_traffic_signs();
  static const int kTrafficSignsFieldNumber = 28;
  inline const ::FrameV0Proto::ObstacleResult& traffic_signs(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_traffic_signs(int index);
  inline ::FrameV0Proto::ObstacleResult* add_traffic_signs();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      traffic_signs() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_traffic_signs();

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 29;
  inline int traffic_lights_size() const;
  inline void clear_traffic_lights();
  static const int kTrafficLightsFieldNumber = 29;
  inline const ::FrameV0Proto::ObstacleResult& traffic_lights(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_traffic_lights(int index);
  inline ::FrameV0Proto::ObstacleResult* add_traffic_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      traffic_lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_traffic_lights();

  // repeated int32 traffic_sign_types = 30;
  inline int traffic_sign_types_size() const;
  inline void clear_traffic_sign_types();
  static const int kTrafficSignTypesFieldNumber = 30;
  inline ::google::protobuf::int32 traffic_sign_types(int index) const;
  inline void set_traffic_sign_types(int index, ::google::protobuf::int32 value);
  inline void add_traffic_sign_types(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      traffic_sign_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_traffic_sign_types();

  // optional .CommonProto.Image parsing_frame = 31;
  inline bool has_parsing_frame() const;
  inline void clear_parsing_frame();
  static const int kParsingFrameFieldNumber = 31;
  inline const ::CommonProto::Image& parsing_frame() const;
  inline ::CommonProto::Image* mutable_parsing_frame();
  inline ::CommonProto::Image* release_parsing_frame();
  inline void set_allocated_parsing_frame(::CommonProto::Image* parsing_frame);

  // optional .CommonProto.Image depth_frame = 32;
  inline bool has_depth_frame() const;
  inline void clear_depth_frame();
  static const int kDepthFrameFieldNumber = 32;
  inline const ::CommonProto::Image& depth_frame() const;
  inline ::CommonProto::Image* mutable_depth_frame();
  inline ::CommonProto::Image* release_depth_frame();
  inline void set_allocated_depth_frame(::CommonProto::Image* depth_frame);

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 33;
  inline int boxes_3d_size() const;
  inline void clear_boxes_3d();
  static const int kBoxes3DFieldNumber = 33;
  inline const ::FrameV0Proto::Box3DResult& boxes_3d(int index) const;
  inline ::FrameV0Proto::Box3DResult* mutable_boxes_3d(int index);
  inline ::FrameV0Proto::Box3DResult* add_boxes_3d();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >&
      boxes_3d() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >*
      mutable_boxes_3d();

  // repeated .CommonProto.Skeleton skeletons = 34;
  inline int skeletons_size() const;
  inline void clear_skeletons();
  static const int kSkeletonsFieldNumber = 34;
  inline const ::CommonProto::Skeleton& skeletons(int index) const;
  inline ::CommonProto::Skeleton* mutable_skeletons(int index);
  inline ::CommonProto::Skeleton* add_skeletons();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >&
      skeletons() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >*
      mutable_skeletons();

  // repeated .CommonProto.Box3DRaw boxes_3d_raw = 35;
  inline int boxes_3d_raw_size() const;
  inline void clear_boxes_3d_raw();
  static const int kBoxes3DRawFieldNumber = 35;
  inline const ::CommonProto::Box3DRaw& boxes_3d_raw(int index) const;
  inline ::CommonProto::Box3DRaw* mutable_boxes_3d_raw(int index);
  inline ::CommonProto::Box3DRaw* add_boxes_3d_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >&
      boxes_3d_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >*
      mutable_boxes_3d_raw();

  // repeated .CommonProto.SkeletonRaw skeletons_raw = 36;
  inline int skeletons_raw_size() const;
  inline void clear_skeletons_raw();
  static const int kSkeletonsRawFieldNumber = 36;
  inline const ::CommonProto::SkeletonRaw& skeletons_raw(int index) const;
  inline ::CommonProto::SkeletonRaw* mutable_skeletons_raw(int index);
  inline ::CommonProto::SkeletonRaw* add_skeletons_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >&
      skeletons_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >*
      mutable_skeletons_raw();

  // optional .CommonProto.HighwayLocate highway_locate = 37;
  inline bool has_highway_locate() const;
  inline void clear_highway_locate();
  static const int kHighwayLocateFieldNumber = 37;
  inline const ::CommonProto::HighwayLocate& highway_locate() const;
  inline ::CommonProto::HighwayLocate* mutable_highway_locate();
  inline ::CommonProto::HighwayLocate* release_highway_locate();
  inline void set_allocated_highway_locate(::CommonProto::HighwayLocate* highway_locate);

  // repeated .FrameV0Proto.SerializedData extra_info = 1024;
  inline int extra_info_size() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 1024;
  inline const ::FrameV0Proto::SerializedData& extra_info(int index) const;
  inline ::FrameV0Proto::SerializedData* mutable_extra_info(int index);
  inline ::FrameV0Proto::SerializedData* add_extra_info();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >&
      extra_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >*
      mutable_extra_info();

  // @@protoc_insertion_point(class_scope:FrameV0Proto.Frame)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_camera();
  inline void clear_has_camera();
  inline void set_has_img_frame();
  inline void clear_has_img_frame();
  inline void set_has_can_frames();
  inline void clear_has_can_frames();
  inline void set_has_fcw();
  inline void clear_has_fcw();
  inline void set_has_ldw();
  inline void clear_has_ldw();
  inline void set_has_imu_frame();
  inline void clear_has_imu_frame();
  inline void set_has_gps_frame();
  inline void clear_has_gps_frame();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_motion_frame();
  inline void clear_has_motion_frame();
  inline void set_has_camera_param();
  inline void clear_has_camera_param();
  inline void set_has_warning_result();
  inline void clear_has_warning_result();
  inline void set_has_odometry();
  inline void clear_has_odometry();
  inline void set_has_camera_param_default();
  inline void clear_has_camera_param_default();
  inline void set_has_imu_offset();
  inline void clear_has_imu_offset();
  inline void set_has_parsing_frame();
  inline void clear_has_parsing_frame();
  inline void set_has_depth_frame();
  inline void clear_has_depth_frame();
  inline void set_has_highway_locate();
  inline void clear_has_highway_locate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 frame_id_;
  ::CommonProto::CameraMatrix* camera_;
  ::CommonProto::Image* img_frame_;
  ::CANProto::CANFrame* can_frames_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > vehiles_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Line > lanes_;
  ::WarningProto::FCW* fcw_;
  ::WarningProto::LDW* ldw_;
  ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw > can_frames_raw_;
  ::SensorProto::IMUFrame* imu_frame_;
  ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame > imu_frames_raw_;
  ::SensorProto::GPSFrame* gps_frame_;
  ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw > gps_frames_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult > freespace_;
  ::CommonProto::MotionFrame* motion_frame_;
  ::CommonProto::CameraParam* camera_param_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > pedestrians_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > vehicle_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > lane_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > pedestrians_raw_;
  ::WarningProto::WarningResult* warning_result_;
  ::CommonProto::OdometryFrame* odometry_;
  ::CommonProto::CameraParam* camera_param_default_;
  ::SensorProto::IMUFrame* imu_offset_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > obj_raw_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > traffic_signs_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > traffic_lights_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > traffic_sign_types_;
  ::CommonProto::Image* parsing_frame_;
  ::CommonProto::Image* depth_frame_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult > boxes_3d_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton > skeletons_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw > boxes_3d_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw > skeletons_raw_;
  ::CommonProto::HighwayLocate* highway_locate_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData > extra_info_;
  int source_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_frame_2ev0_2eproto();
  friend void protobuf_AssignDesc_frame_2ev0_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev0_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// -------------------------------------------------------------------

class FrameShuffle : public ::google::protobuf::Message {
 public:
  FrameShuffle();
  virtual ~FrameShuffle();

  FrameShuffle(const FrameShuffle& from);

  inline FrameShuffle& operator=(const FrameShuffle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameShuffle& default_instance();

  void Swap(FrameShuffle* other);

  // implements Message ----------------------------------------------

  FrameShuffle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameShuffle& from);
  void MergeFrom(const FrameShuffle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 frame_id = 2;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // optional .CommonProto.Image img_frame = 4;
  inline bool has_img_frame() const;
  inline void clear_img_frame();
  static const int kImgFrameFieldNumber = 4;
  inline const ::CommonProto::Image& img_frame() const;
  inline ::CommonProto::Image* mutable_img_frame();
  inline ::CommonProto::Image* release_img_frame();
  inline void set_allocated_img_frame(::CommonProto::Image* img_frame);

  // optional .SensorProto.GPSFrame gps_frame = 13;
  inline bool has_gps_frame() const;
  inline void clear_gps_frame();
  static const int kGpsFrameFieldNumber = 13;
  inline const ::SensorProto::GPSFrame& gps_frame() const;
  inline ::SensorProto::GPSFrame* mutable_gps_frame();
  inline ::SensorProto::GPSFrame* release_gps_frame();
  inline void set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame);

  // optional .CommonProto.CameraMatrix camera = 17;
  inline bool has_camera() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 17;
  inline const ::CommonProto::CameraMatrix& camera() const;
  inline ::CommonProto::CameraMatrix* mutable_camera();
  inline ::CommonProto::CameraMatrix* release_camera();
  inline void set_allocated_camera(::CommonProto::CameraMatrix* camera);

  // optional .CANProto.CANFrame can_frames = 11;
  inline bool has_can_frames() const;
  inline void clear_can_frames();
  static const int kCanFramesFieldNumber = 11;
  inline const ::CANProto::CANFrame& can_frames() const;
  inline ::CANProto::CANFrame* mutable_can_frames();
  inline ::CANProto::CANFrame* release_can_frames();
  inline void set_allocated_can_frames(::CANProto::CANFrame* can_frames);

  // repeated .FrameV0Proto.ObstacleResult vehiles = 9;
  inline int vehiles_size() const;
  inline void clear_vehiles();
  static const int kVehilesFieldNumber = 9;
  inline const ::FrameV0Proto::ObstacleResult& vehiles(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_vehiles(int index);
  inline ::FrameV0Proto::ObstacleResult* add_vehiles();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      vehiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_vehiles();

  // repeated .CommonProto.Line lanes = 25;
  inline int lanes_size() const;
  inline void clear_lanes();
  static const int kLanesFieldNumber = 25;
  inline const ::CommonProto::Line& lanes(int index) const;
  inline ::CommonProto::Line* mutable_lanes(int index);
  inline ::CommonProto::Line* add_lanes();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >&
      lanes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >*
      mutable_lanes();

  // optional .WarningProto.FCW fcw = 24;
  inline bool has_fcw() const;
  inline void clear_fcw();
  static const int kFcwFieldNumber = 24;
  inline const ::WarningProto::FCW& fcw() const;
  inline ::WarningProto::FCW* mutable_fcw();
  inline ::WarningProto::FCW* release_fcw();
  inline void set_allocated_fcw(::WarningProto::FCW* fcw);

  // optional .WarningProto.LDW ldw = 23;
  inline bool has_ldw() const;
  inline void clear_ldw();
  static const int kLdwFieldNumber = 23;
  inline const ::WarningProto::LDW& ldw() const;
  inline ::WarningProto::LDW* mutable_ldw();
  inline ::WarningProto::LDW* release_ldw();
  inline void set_allocated_ldw(::WarningProto::LDW* ldw);

  // repeated .CANProto.CANFrameRaw can_frames_raw = 20;
  inline int can_frames_raw_size() const;
  inline void clear_can_frames_raw();
  static const int kCanFramesRawFieldNumber = 20;
  inline const ::CANProto::CANFrameRaw& can_frames_raw(int index) const;
  inline ::CANProto::CANFrameRaw* mutable_can_frames_raw(int index);
  inline ::CANProto::CANFrameRaw* add_can_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >&
      can_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >*
      mutable_can_frames_raw();

  // optional .SensorProto.IMUFrame imu_frame = 3;
  inline bool has_imu_frame() const;
  inline void clear_imu_frame();
  static const int kImuFrameFieldNumber = 3;
  inline const ::SensorProto::IMUFrame& imu_frame() const;
  inline ::SensorProto::IMUFrame* mutable_imu_frame();
  inline ::SensorProto::IMUFrame* release_imu_frame();
  inline void set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame);

  // repeated .SensorProto.IMUFrame imu_frames_raw = 8;
  inline int imu_frames_raw_size() const;
  inline void clear_imu_frames_raw();
  static const int kImuFramesRawFieldNumber = 8;
  inline const ::SensorProto::IMUFrame& imu_frames_raw(int index) const;
  inline ::SensorProto::IMUFrame* mutable_imu_frames_raw(int index);
  inline ::SensorProto::IMUFrame* add_imu_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >&
      imu_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >*
      mutable_imu_frames_raw();

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 6;
  inline int gps_frames_raw_size() const;
  inline void clear_gps_frames_raw();
  static const int kGpsFramesRawFieldNumber = 6;
  inline const ::SensorProto::GPSFrameRaw& gps_frames_raw(int index) const;
  inline ::SensorProto::GPSFrameRaw* mutable_gps_frames_raw(int index);
  inline ::SensorProto::GPSFrameRaw* add_gps_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
      gps_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
      mutable_gps_frames_raw();

  // repeated .CommonProto.FreeSpaceResult freespace = 10;
  inline int freespace_size() const;
  inline void clear_freespace();
  static const int kFreespaceFieldNumber = 10;
  inline const ::CommonProto::FreeSpaceResult& freespace(int index) const;
  inline ::CommonProto::FreeSpaceResult* mutable_freespace(int index);
  inline ::CommonProto::FreeSpaceResult* add_freespace();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >&
      freespace() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >*
      mutable_freespace();

  // optional .FrameV0Proto.FrameSource source = 7;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 7;
  inline ::FrameV0Proto::FrameSource source() const;
  inline void set_source(::FrameV0Proto::FrameSource value);

  // optional .CommonProto.MotionFrame motion_frame = 18;
  inline bool has_motion_frame() const;
  inline void clear_motion_frame();
  static const int kMotionFrameFieldNumber = 18;
  inline const ::CommonProto::MotionFrame& motion_frame() const;
  inline ::CommonProto::MotionFrame* mutable_motion_frame();
  inline ::CommonProto::MotionFrame* release_motion_frame();
  inline void set_allocated_motion_frame(::CommonProto::MotionFrame* motion_frame);

  // optional .CommonProto.CameraParam camera_param = 19;
  inline bool has_camera_param() const;
  inline void clear_camera_param();
  static const int kCameraParamFieldNumber = 19;
  inline const ::CommonProto::CameraParam& camera_param() const;
  inline ::CommonProto::CameraParam* mutable_camera_param();
  inline ::CommonProto::CameraParam* release_camera_param();
  inline void set_allocated_camera_param(::CommonProto::CameraParam* camera_param);

  // repeated .FrameV0Proto.ObstacleResult pedestrians = 5;
  inline int pedestrians_size() const;
  inline void clear_pedestrians();
  static const int kPedestriansFieldNumber = 5;
  inline const ::FrameV0Proto::ObstacleResult& pedestrians(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_pedestrians(int index);
  inline ::FrameV0Proto::ObstacleResult* add_pedestrians();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      pedestrians() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_pedestrians();

  // repeated .FrameV0Proto.Box3DResult boxes_3d = 28;
  inline int boxes_3d_size() const;
  inline void clear_boxes_3d();
  static const int kBoxes3DFieldNumber = 28;
  inline const ::FrameV0Proto::Box3DResult& boxes_3d(int index) const;
  inline ::FrameV0Proto::Box3DResult* mutable_boxes_3d(int index);
  inline ::FrameV0Proto::Box3DResult* add_boxes_3d();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >&
      boxes_3d() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >*
      mutable_boxes_3d();

  // repeated .CommonProto.Skeleton skeletons = 29;
  inline int skeletons_size() const;
  inline void clear_skeletons();
  static const int kSkeletonsFieldNumber = 29;
  inline const ::CommonProto::Skeleton& skeletons(int index) const;
  inline ::CommonProto::Skeleton* mutable_skeletons(int index);
  inline ::CommonProto::Skeleton* add_skeletons();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >&
      skeletons() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >*
      mutable_skeletons();

  // optional .CommonProto.Image parsing_frame = 30;
  inline bool has_parsing_frame() const;
  inline void clear_parsing_frame();
  static const int kParsingFrameFieldNumber = 30;
  inline const ::CommonProto::Image& parsing_frame() const;
  inline ::CommonProto::Image* mutable_parsing_frame();
  inline ::CommonProto::Image* release_parsing_frame();
  inline void set_allocated_parsing_frame(::CommonProto::Image* parsing_frame);

  // repeated .CommonProto.ObstacleRaw vehicle_raw = 16;
  inline int vehicle_raw_size() const;
  inline void clear_vehicle_raw();
  static const int kVehicleRawFieldNumber = 16;
  inline const ::CommonProto::ObstacleRaw& vehicle_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_vehicle_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_vehicle_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      vehicle_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_vehicle_raw();

  // repeated .CommonProto.ObstacleRaw lane_raw = 15;
  inline int lane_raw_size() const;
  inline void clear_lane_raw();
  static const int kLaneRawFieldNumber = 15;
  inline const ::CommonProto::ObstacleRaw& lane_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_lane_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_lane_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      lane_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_lane_raw();

  // repeated .CommonProto.ObstacleRaw pedestrians_raw = 14;
  inline int pedestrians_raw_size() const;
  inline void clear_pedestrians_raw();
  static const int kPedestriansRawFieldNumber = 14;
  inline const ::CommonProto::ObstacleRaw& pedestrians_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_pedestrians_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_pedestrians_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      pedestrians_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_pedestrians_raw();

  // repeated .CommonProto.ObstacleRaw obj_raw = 27;
  inline int obj_raw_size() const;
  inline void clear_obj_raw();
  static const int kObjRawFieldNumber = 27;
  inline const ::CommonProto::ObstacleRaw& obj_raw(int index) const;
  inline ::CommonProto::ObstacleRaw* mutable_obj_raw(int index);
  inline ::CommonProto::ObstacleRaw* add_obj_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
      obj_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
      mutable_obj_raw();

  // repeated .FrameV0Proto.ObstacleResult traffic_signs = 1000;
  inline int traffic_signs_size() const;
  inline void clear_traffic_signs();
  static const int kTrafficSignsFieldNumber = 1000;
  inline const ::FrameV0Proto::ObstacleResult& traffic_signs(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_traffic_signs(int index);
  inline ::FrameV0Proto::ObstacleResult* add_traffic_signs();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      traffic_signs() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_traffic_signs();

  // repeated .FrameV0Proto.ObstacleResult traffic_lights = 1001;
  inline int traffic_lights_size() const;
  inline void clear_traffic_lights();
  static const int kTrafficLightsFieldNumber = 1001;
  inline const ::FrameV0Proto::ObstacleResult& traffic_lights(int index) const;
  inline ::FrameV0Proto::ObstacleResult* mutable_traffic_lights(int index);
  inline ::FrameV0Proto::ObstacleResult* add_traffic_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
      traffic_lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
      mutable_traffic_lights();

  // optional .CommonProto.HighwayLocate highway_locate = 1002;
  inline bool has_highway_locate() const;
  inline void clear_highway_locate();
  static const int kHighwayLocateFieldNumber = 1002;
  inline const ::CommonProto::HighwayLocate& highway_locate() const;
  inline ::CommonProto::HighwayLocate* mutable_highway_locate();
  inline ::CommonProto::HighwayLocate* release_highway_locate();
  inline void set_allocated_highway_locate(::CommonProto::HighwayLocate* highway_locate);

  // optional .WarningProto.WarningResult warning_result = 21;
  inline bool has_warning_result() const;
  inline void clear_warning_result();
  static const int kWarningResultFieldNumber = 21;
  inline const ::WarningProto::WarningResult& warning_result() const;
  inline ::WarningProto::WarningResult* mutable_warning_result();
  inline ::WarningProto::WarningResult* release_warning_result();
  inline void set_allocated_warning_result(::WarningProto::WarningResult* warning_result);

  // optional .CommonProto.OdometryFrame odometry = 22;
  inline bool has_odometry() const;
  inline void clear_odometry();
  static const int kOdometryFieldNumber = 22;
  inline const ::CommonProto::OdometryFrame& odometry() const;
  inline ::CommonProto::OdometryFrame* mutable_odometry();
  inline ::CommonProto::OdometryFrame* release_odometry();
  inline void set_allocated_odometry(::CommonProto::OdometryFrame* odometry);

  // optional .CommonProto.CameraParam camera_param_default = 12;
  inline bool has_camera_param_default() const;
  inline void clear_camera_param_default();
  static const int kCameraParamDefaultFieldNumber = 12;
  inline const ::CommonProto::CameraParam& camera_param_default() const;
  inline ::CommonProto::CameraParam* mutable_camera_param_default();
  inline ::CommonProto::CameraParam* release_camera_param_default();
  inline void set_allocated_camera_param_default(::CommonProto::CameraParam* camera_param_default);

  // optional .SensorProto.IMUFrame imu_offset = 36;
  inline bool has_imu_offset() const;
  inline void clear_imu_offset();
  static const int kImuOffsetFieldNumber = 36;
  inline const ::SensorProto::IMUFrame& imu_offset() const;
  inline ::SensorProto::IMUFrame* mutable_imu_offset();
  inline ::SensorProto::IMUFrame* release_imu_offset();
  inline void set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset);

  // repeated .FrameV0Proto.SerializedData extra_info = 101;
  inline int extra_info_size() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 101;
  inline const ::FrameV0Proto::SerializedData& extra_info(int index) const;
  inline ::FrameV0Proto::SerializedData* mutable_extra_info(int index);
  inline ::FrameV0Proto::SerializedData* add_extra_info();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >&
      extra_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >*
      mutable_extra_info();

  // @@protoc_insertion_point(class_scope:FrameV0Proto.FrameShuffle)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_img_frame();
  inline void clear_has_img_frame();
  inline void set_has_gps_frame();
  inline void clear_has_gps_frame();
  inline void set_has_camera();
  inline void clear_has_camera();
  inline void set_has_can_frames();
  inline void clear_has_can_frames();
  inline void set_has_fcw();
  inline void clear_has_fcw();
  inline void set_has_ldw();
  inline void clear_has_ldw();
  inline void set_has_imu_frame();
  inline void clear_has_imu_frame();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_motion_frame();
  inline void clear_has_motion_frame();
  inline void set_has_camera_param();
  inline void clear_has_camera_param();
  inline void set_has_parsing_frame();
  inline void clear_has_parsing_frame();
  inline void set_has_highway_locate();
  inline void clear_has_highway_locate();
  inline void set_has_warning_result();
  inline void clear_has_warning_result();
  inline void set_has_odometry();
  inline void clear_has_odometry();
  inline void set_has_camera_param_default();
  inline void clear_has_camera_param_default();
  inline void set_has_imu_offset();
  inline void clear_has_imu_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 frame_id_;
  ::CommonProto::Image* img_frame_;
  ::SensorProto::GPSFrame* gps_frame_;
  ::CommonProto::CameraMatrix* camera_;
  ::CANProto::CANFrame* can_frames_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > vehiles_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Line > lanes_;
  ::WarningProto::FCW* fcw_;
  ::WarningProto::LDW* ldw_;
  ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw > can_frames_raw_;
  ::SensorProto::IMUFrame* imu_frame_;
  ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame > imu_frames_raw_;
  ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw > gps_frames_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult > freespace_;
  ::CommonProto::MotionFrame* motion_frame_;
  ::CommonProto::CameraParam* camera_param_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > pedestrians_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult > boxes_3d_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton > skeletons_;
  ::CommonProto::Image* parsing_frame_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > vehicle_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > lane_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > pedestrians_raw_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw > obj_raw_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > traffic_signs_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult > traffic_lights_;
  ::CommonProto::HighwayLocate* highway_locate_;
  ::WarningProto::WarningResult* warning_result_;
  ::CommonProto::OdometryFrame* odometry_;
  ::CommonProto::CameraParam* camera_param_default_;
  ::SensorProto::IMUFrame* imu_offset_;
  ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData > extra_info_;
  int source_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_frame_2ev0_2eproto();
  friend void protobuf_AssignDesc_frame_2ev0_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev0_2eproto();

  void InitAsDefaultInstance();
  static FrameShuffle* default_instance_;
};
// ===================================================================


// ===================================================================

// ObstacleResult

// required int32 id = 1;
inline bool ObstacleResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ObstacleResult::id() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.id)
  return id_;
}
inline void ObstacleResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.id)
}

// optional int32 life_time = 2;
inline bool ObstacleResult::has_life_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleResult::set_has_life_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleResult::clear_has_life_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleResult::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
}
inline ::google::protobuf::int32 ObstacleResult::life_time() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.life_time)
  return life_time_;
}
inline void ObstacleResult::set_life_time(::google::protobuf::int32 value) {
  set_has_life_time();
  life_time_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.life_time)
}

// optional int32 age = 3;
inline bool ObstacleResult::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleResult::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleResult::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleResult::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 ObstacleResult::age() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.age)
  return age_;
}
inline void ObstacleResult::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.age)
}

// required .CommonProto.Rect rect_sta = 4;
inline bool ObstacleResult::has_rect_sta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleResult::set_has_rect_sta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObstacleResult::clear_has_rect_sta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObstacleResult::clear_rect_sta() {
  if (rect_sta_ != NULL) rect_sta_->::CommonProto::Rect::Clear();
  clear_has_rect_sta();
}
inline const ::CommonProto::Rect& ObstacleResult::rect_sta() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.rect_sta)
  return rect_sta_ != NULL ? *rect_sta_ : *default_instance_->rect_sta_;
}
inline ::CommonProto::Rect* ObstacleResult::mutable_rect_sta() {
  set_has_rect_sta();
  if (rect_sta_ == NULL) rect_sta_ = new ::CommonProto::Rect;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.ObstacleResult.rect_sta)
  return rect_sta_;
}
inline ::CommonProto::Rect* ObstacleResult::release_rect_sta() {
  clear_has_rect_sta();
  ::CommonProto::Rect* temp = rect_sta_;
  rect_sta_ = NULL;
  return temp;
}
inline void ObstacleResult::set_allocated_rect_sta(::CommonProto::Rect* rect_sta) {
  delete rect_sta_;
  rect_sta_ = rect_sta;
  if (rect_sta) {
    set_has_rect_sta();
  } else {
    clear_has_rect_sta();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.ObstacleResult.rect_sta)
}

// required .CommonProto.Rect rect_obs = 5;
inline bool ObstacleResult::has_rect_obs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObstacleResult::set_has_rect_obs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObstacleResult::clear_has_rect_obs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObstacleResult::clear_rect_obs() {
  if (rect_obs_ != NULL) rect_obs_->::CommonProto::Rect::Clear();
  clear_has_rect_obs();
}
inline const ::CommonProto::Rect& ObstacleResult::rect_obs() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.rect_obs)
  return rect_obs_ != NULL ? *rect_obs_ : *default_instance_->rect_obs_;
}
inline ::CommonProto::Rect* ObstacleResult::mutable_rect_obs() {
  set_has_rect_obs();
  if (rect_obs_ == NULL) rect_obs_ = new ::CommonProto::Rect;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.ObstacleResult.rect_obs)
  return rect_obs_;
}
inline ::CommonProto::Rect* ObstacleResult::release_rect_obs() {
  clear_has_rect_obs();
  ::CommonProto::Rect* temp = rect_obs_;
  rect_obs_ = NULL;
  return temp;
}
inline void ObstacleResult::set_allocated_rect_obs(::CommonProto::Rect* rect_obs) {
  delete rect_obs_;
  rect_obs_ = rect_obs;
  if (rect_obs) {
    set_has_rect_obs();
  } else {
    clear_has_rect_obs();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.ObstacleResult.rect_obs)
}

// optional float conf = 6;
inline bool ObstacleResult::has_conf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObstacleResult::set_has_conf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObstacleResult::clear_has_conf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObstacleResult::clear_conf() {
  conf_ = 0;
  clear_has_conf();
}
inline float ObstacleResult::conf() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.conf)
  return conf_;
}
inline void ObstacleResult::set_conf(float value) {
  set_has_conf();
  conf_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.conf)
}

// optional float acc_conf = 7;
inline bool ObstacleResult::has_acc_conf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObstacleResult::set_has_acc_conf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ObstacleResult::clear_has_acc_conf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ObstacleResult::clear_acc_conf() {
  acc_conf_ = 0;
  clear_has_acc_conf();
}
inline float ObstacleResult::acc_conf() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.acc_conf)
  return acc_conf_;
}
inline void ObstacleResult::set_acc_conf(float value) {
  set_has_acc_conf();
  acc_conf_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.acc_conf)
}

// optional float ttc = 8;
inline bool ObstacleResult::has_ttc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObstacleResult::set_has_ttc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ObstacleResult::clear_has_ttc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ObstacleResult::clear_ttc() {
  ttc_ = 0;
  clear_has_ttc();
}
inline float ObstacleResult::ttc() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.ttc)
  return ttc_;
}
inline void ObstacleResult::set_ttc(float value) {
  set_has_ttc();
  ttc_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.ttc)
}

// optional float hmw = 9;
inline bool ObstacleResult::has_hmw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObstacleResult::set_has_hmw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ObstacleResult::clear_has_hmw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ObstacleResult::clear_hmw() {
  hmw_ = 0;
  clear_has_hmw();
}
inline float ObstacleResult::hmw() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.hmw)
  return hmw_;
}
inline void ObstacleResult::set_hmw(float value) {
  set_has_hmw();
  hmw_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.hmw)
}

// optional int32 type = 10;
inline bool ObstacleResult::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObstacleResult::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ObstacleResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ObstacleResult::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ObstacleResult::type() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.type)
  return type_;
}
inline void ObstacleResult::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.type)
}

// optional bool in_path = 11;
inline bool ObstacleResult::has_in_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObstacleResult::set_has_in_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ObstacleResult::clear_has_in_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ObstacleResult::clear_in_path() {
  in_path_ = false;
  clear_has_in_path();
}
inline bool ObstacleResult::in_path() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.in_path)
  return in_path_;
}
inline void ObstacleResult::set_in_path(bool value) {
  set_has_in_path();
  in_path_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.in_path)
}

// optional float distance = 12;
inline bool ObstacleResult::has_distance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObstacleResult::set_has_distance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ObstacleResult::clear_has_distance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ObstacleResult::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float ObstacleResult::distance() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.distance)
  return distance_;
}
inline void ObstacleResult::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.distance)
}

// optional float vx = 13;
inline bool ObstacleResult::has_vx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ObstacleResult::set_has_vx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ObstacleResult::clear_has_vx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ObstacleResult::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline float ObstacleResult::vx() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.vx)
  return vx_;
}
inline void ObstacleResult::set_vx(float value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.vx)
}

// optional float vy = 14;
inline bool ObstacleResult::has_vy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ObstacleResult::set_has_vy() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ObstacleResult::clear_has_vy() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ObstacleResult::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline float ObstacleResult::vy() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.ObstacleResult.vy)
  return vy_;
}
inline void ObstacleResult::set_vy(float value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.ObstacleResult.vy)
}

// -------------------------------------------------------------------

// Box3DResult

// required int32 id = 1;
inline bool Box3DResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Box3DResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Box3DResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Box3DResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Box3DResult::id() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Box3DResult.id)
  return id_;
}
inline void Box3DResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.Box3DResult.id)
}

// required .CommonProto.Box3D box = 2;
inline bool Box3DResult::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Box3DResult::set_has_box() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Box3DResult::clear_has_box() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Box3DResult::clear_box() {
  if (box_ != NULL) box_->::CommonProto::Box3D::Clear();
  clear_has_box();
}
inline const ::CommonProto::Box3D& Box3DResult::box() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Box3DResult.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::CommonProto::Box3D* Box3DResult::mutable_box() {
  set_has_box();
  if (box_ == NULL) box_ = new ::CommonProto::Box3D;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Box3DResult.box)
  return box_;
}
inline ::CommonProto::Box3D* Box3DResult::release_box() {
  clear_has_box();
  ::CommonProto::Box3D* temp = box_;
  box_ = NULL;
  return temp;
}
inline void Box3DResult::set_allocated_box(::CommonProto::Box3D* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Box3DResult.box)
}

// -------------------------------------------------------------------

// SerializedData

// required string proto_name = 1;
inline bool SerializedData::has_proto_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedData::set_has_proto_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerializedData::clear_has_proto_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerializedData::clear_proto_name() {
  if (proto_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_name_->clear();
  }
  clear_has_proto_name();
}
inline const ::std::string& SerializedData::proto_name() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.SerializedData.proto_name)
  return *proto_name_;
}
inline void SerializedData::set_proto_name(const ::std::string& value) {
  set_has_proto_name();
  if (proto_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_name_ = new ::std::string;
  }
  proto_name_->assign(value);
  // @@protoc_insertion_point(field_set:FrameV0Proto.SerializedData.proto_name)
}
inline void SerializedData::set_proto_name(const char* value) {
  set_has_proto_name();
  if (proto_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_name_ = new ::std::string;
  }
  proto_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:FrameV0Proto.SerializedData.proto_name)
}
inline void SerializedData::set_proto_name(const char* value, size_t size) {
  set_has_proto_name();
  if (proto_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_name_ = new ::std::string;
  }
  proto_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FrameV0Proto.SerializedData.proto_name)
}
inline ::std::string* SerializedData::mutable_proto_name() {
  set_has_proto_name();
  if (proto_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.SerializedData.proto_name)
  return proto_name_;
}
inline ::std::string* SerializedData::release_proto_name() {
  clear_has_proto_name();
  if (proto_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proto_name_;
    proto_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SerializedData::set_allocated_proto_name(::std::string* proto_name) {
  if (proto_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proto_name_;
  }
  if (proto_name) {
    set_has_proto_name();
    proto_name_ = proto_name;
  } else {
    clear_has_proto_name();
    proto_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.SerializedData.proto_name)
}

// optional string proto_hex_string = 2;
inline bool SerializedData::has_proto_hex_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerializedData::set_has_proto_hex_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerializedData::clear_has_proto_hex_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerializedData::clear_proto_hex_string() {
  if (proto_hex_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_hex_string_->clear();
  }
  clear_has_proto_hex_string();
}
inline const ::std::string& SerializedData::proto_hex_string() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.SerializedData.proto_hex_string)
  return *proto_hex_string_;
}
inline void SerializedData::set_proto_hex_string(const ::std::string& value) {
  set_has_proto_hex_string();
  if (proto_hex_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_hex_string_ = new ::std::string;
  }
  proto_hex_string_->assign(value);
  // @@protoc_insertion_point(field_set:FrameV0Proto.SerializedData.proto_hex_string)
}
inline void SerializedData::set_proto_hex_string(const char* value) {
  set_has_proto_hex_string();
  if (proto_hex_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_hex_string_ = new ::std::string;
  }
  proto_hex_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:FrameV0Proto.SerializedData.proto_hex_string)
}
inline void SerializedData::set_proto_hex_string(const char* value, size_t size) {
  set_has_proto_hex_string();
  if (proto_hex_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_hex_string_ = new ::std::string;
  }
  proto_hex_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FrameV0Proto.SerializedData.proto_hex_string)
}
inline ::std::string* SerializedData::mutable_proto_hex_string() {
  set_has_proto_hex_string();
  if (proto_hex_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proto_hex_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.SerializedData.proto_hex_string)
  return proto_hex_string_;
}
inline ::std::string* SerializedData::release_proto_hex_string() {
  clear_has_proto_hex_string();
  if (proto_hex_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proto_hex_string_;
    proto_hex_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SerializedData::set_allocated_proto_hex_string(::std::string* proto_hex_string) {
  if (proto_hex_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proto_hex_string_;
  }
  if (proto_hex_string) {
    set_has_proto_hex_string();
    proto_hex_string_ = proto_hex_string;
  } else {
    clear_has_proto_hex_string();
    proto_hex_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.SerializedData.proto_hex_string)
}

// -------------------------------------------------------------------

// Frame

// optional int32 version = 1;
inline bool Frame::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Frame::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Frame::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Frame::version() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.version)
  return version_;
}
inline void Frame::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.Frame.version)
}

// optional int32 frame_id = 2;
inline bool Frame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Frame::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Frame::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 Frame::frame_id() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.frame_id)
  return frame_id_;
}
inline void Frame::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.Frame.frame_id)
}

// optional .CommonProto.CameraMatrix camera = 3;
inline bool Frame::has_camera() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Frame::set_has_camera() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Frame::clear_has_camera() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Frame::clear_camera() {
  if (camera_ != NULL) camera_->::CommonProto::CameraMatrix::Clear();
  clear_has_camera();
}
inline const ::CommonProto::CameraMatrix& Frame::camera() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.camera)
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
inline ::CommonProto::CameraMatrix* Frame::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) camera_ = new ::CommonProto::CameraMatrix;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.camera)
  return camera_;
}
inline ::CommonProto::CameraMatrix* Frame::release_camera() {
  clear_has_camera();
  ::CommonProto::CameraMatrix* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void Frame::set_allocated_camera(::CommonProto::CameraMatrix* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.camera)
}

// optional .CommonProto.Image img_frame = 4;
inline bool Frame::has_img_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Frame::set_has_img_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Frame::clear_has_img_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Frame::clear_img_frame() {
  if (img_frame_ != NULL) img_frame_->::CommonProto::Image::Clear();
  clear_has_img_frame();
}
inline const ::CommonProto::Image& Frame::img_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.img_frame)
  return img_frame_ != NULL ? *img_frame_ : *default_instance_->img_frame_;
}
inline ::CommonProto::Image* Frame::mutable_img_frame() {
  set_has_img_frame();
  if (img_frame_ == NULL) img_frame_ = new ::CommonProto::Image;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.img_frame)
  return img_frame_;
}
inline ::CommonProto::Image* Frame::release_img_frame() {
  clear_has_img_frame();
  ::CommonProto::Image* temp = img_frame_;
  img_frame_ = NULL;
  return temp;
}
inline void Frame::set_allocated_img_frame(::CommonProto::Image* img_frame) {
  delete img_frame_;
  img_frame_ = img_frame;
  if (img_frame) {
    set_has_img_frame();
  } else {
    clear_has_img_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.img_frame)
}

// optional .CANProto.CANFrame can_frames = 5;
inline bool Frame::has_can_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Frame::set_has_can_frames() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Frame::clear_has_can_frames() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Frame::clear_can_frames() {
  if (can_frames_ != NULL) can_frames_->::CANProto::CANFrame::Clear();
  clear_has_can_frames();
}
inline const ::CANProto::CANFrame& Frame::can_frames() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.can_frames)
  return can_frames_ != NULL ? *can_frames_ : *default_instance_->can_frames_;
}
inline ::CANProto::CANFrame* Frame::mutable_can_frames() {
  set_has_can_frames();
  if (can_frames_ == NULL) can_frames_ = new ::CANProto::CANFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.can_frames)
  return can_frames_;
}
inline ::CANProto::CANFrame* Frame::release_can_frames() {
  clear_has_can_frames();
  ::CANProto::CANFrame* temp = can_frames_;
  can_frames_ = NULL;
  return temp;
}
inline void Frame::set_allocated_can_frames(::CANProto::CANFrame* can_frames) {
  delete can_frames_;
  can_frames_ = can_frames;
  if (can_frames) {
    set_has_can_frames();
  } else {
    clear_has_can_frames();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.can_frames)
}

// repeated .FrameV0Proto.ObstacleResult vehiles = 6;
inline int Frame::vehiles_size() const {
  return vehiles_.size();
}
inline void Frame::clear_vehiles() {
  vehiles_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& Frame::vehiles(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.vehiles)
  return vehiles_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::mutable_vehiles(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.vehiles)
  return vehiles_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::add_vehiles() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.vehiles)
  return vehiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
Frame::vehiles() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.vehiles)
  return vehiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
Frame::mutable_vehiles() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.vehiles)
  return &vehiles_;
}

// repeated .CommonProto.Line lanes = 7;
inline int Frame::lanes_size() const {
  return lanes_.size();
}
inline void Frame::clear_lanes() {
  lanes_.Clear();
}
inline const ::CommonProto::Line& Frame::lanes(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.lanes)
  return lanes_.Get(index);
}
inline ::CommonProto::Line* Frame::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.lanes)
  return lanes_.Mutable(index);
}
inline ::CommonProto::Line* Frame::add_lanes() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.lanes)
  return lanes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >&
Frame::lanes() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.lanes)
  return lanes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >*
Frame::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.lanes)
  return &lanes_;
}

// optional .WarningProto.FCW fcw = 8;
inline bool Frame::has_fcw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Frame::set_has_fcw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Frame::clear_has_fcw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Frame::clear_fcw() {
  if (fcw_ != NULL) fcw_->::WarningProto::FCW::Clear();
  clear_has_fcw();
}
inline const ::WarningProto::FCW& Frame::fcw() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.fcw)
  return fcw_ != NULL ? *fcw_ : *default_instance_->fcw_;
}
inline ::WarningProto::FCW* Frame::mutable_fcw() {
  set_has_fcw();
  if (fcw_ == NULL) fcw_ = new ::WarningProto::FCW;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.fcw)
  return fcw_;
}
inline ::WarningProto::FCW* Frame::release_fcw() {
  clear_has_fcw();
  ::WarningProto::FCW* temp = fcw_;
  fcw_ = NULL;
  return temp;
}
inline void Frame::set_allocated_fcw(::WarningProto::FCW* fcw) {
  delete fcw_;
  fcw_ = fcw;
  if (fcw) {
    set_has_fcw();
  } else {
    clear_has_fcw();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.fcw)
}

// optional .WarningProto.LDW ldw = 9;
inline bool Frame::has_ldw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Frame::set_has_ldw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Frame::clear_has_ldw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Frame::clear_ldw() {
  if (ldw_ != NULL) ldw_->::WarningProto::LDW::Clear();
  clear_has_ldw();
}
inline const ::WarningProto::LDW& Frame::ldw() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.ldw)
  return ldw_ != NULL ? *ldw_ : *default_instance_->ldw_;
}
inline ::WarningProto::LDW* Frame::mutable_ldw() {
  set_has_ldw();
  if (ldw_ == NULL) ldw_ = new ::WarningProto::LDW;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.ldw)
  return ldw_;
}
inline ::WarningProto::LDW* Frame::release_ldw() {
  clear_has_ldw();
  ::WarningProto::LDW* temp = ldw_;
  ldw_ = NULL;
  return temp;
}
inline void Frame::set_allocated_ldw(::WarningProto::LDW* ldw) {
  delete ldw_;
  ldw_ = ldw;
  if (ldw) {
    set_has_ldw();
  } else {
    clear_has_ldw();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.ldw)
}

// repeated .CANProto.CANFrameRaw can_frames_raw = 10;
inline int Frame::can_frames_raw_size() const {
  return can_frames_raw_.size();
}
inline void Frame::clear_can_frames_raw() {
  can_frames_raw_.Clear();
}
inline const ::CANProto::CANFrameRaw& Frame::can_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.can_frames_raw)
  return can_frames_raw_.Get(index);
}
inline ::CANProto::CANFrameRaw* Frame::mutable_can_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.can_frames_raw)
  return can_frames_raw_.Mutable(index);
}
inline ::CANProto::CANFrameRaw* Frame::add_can_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.can_frames_raw)
  return can_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >&
Frame::can_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.can_frames_raw)
  return can_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >*
Frame::mutable_can_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.can_frames_raw)
  return &can_frames_raw_;
}

// optional .SensorProto.IMUFrame imu_frame = 11;
inline bool Frame::has_imu_frame() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Frame::set_has_imu_frame() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Frame::clear_has_imu_frame() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Frame::clear_imu_frame() {
  if (imu_frame_ != NULL) imu_frame_->::SensorProto::IMUFrame::Clear();
  clear_has_imu_frame();
}
inline const ::SensorProto::IMUFrame& Frame::imu_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.imu_frame)
  return imu_frame_ != NULL ? *imu_frame_ : *default_instance_->imu_frame_;
}
inline ::SensorProto::IMUFrame* Frame::mutable_imu_frame() {
  set_has_imu_frame();
  if (imu_frame_ == NULL) imu_frame_ = new ::SensorProto::IMUFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.imu_frame)
  return imu_frame_;
}
inline ::SensorProto::IMUFrame* Frame::release_imu_frame() {
  clear_has_imu_frame();
  ::SensorProto::IMUFrame* temp = imu_frame_;
  imu_frame_ = NULL;
  return temp;
}
inline void Frame::set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame) {
  delete imu_frame_;
  imu_frame_ = imu_frame;
  if (imu_frame) {
    set_has_imu_frame();
  } else {
    clear_has_imu_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.imu_frame)
}

// repeated .SensorProto.IMUFrame imu_frames_raw = 12;
inline int Frame::imu_frames_raw_size() const {
  return imu_frames_raw_.size();
}
inline void Frame::clear_imu_frames_raw() {
  imu_frames_raw_.Clear();
}
inline const ::SensorProto::IMUFrame& Frame::imu_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.imu_frames_raw)
  return imu_frames_raw_.Get(index);
}
inline ::SensorProto::IMUFrame* Frame::mutable_imu_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.imu_frames_raw)
  return imu_frames_raw_.Mutable(index);
}
inline ::SensorProto::IMUFrame* Frame::add_imu_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.imu_frames_raw)
  return imu_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >&
Frame::imu_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.imu_frames_raw)
  return imu_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >*
Frame::mutable_imu_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.imu_frames_raw)
  return &imu_frames_raw_;
}

// optional .SensorProto.GPSFrame gps_frame = 13;
inline bool Frame::has_gps_frame() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Frame::set_has_gps_frame() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Frame::clear_has_gps_frame() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Frame::clear_gps_frame() {
  if (gps_frame_ != NULL) gps_frame_->::SensorProto::GPSFrame::Clear();
  clear_has_gps_frame();
}
inline const ::SensorProto::GPSFrame& Frame::gps_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.gps_frame)
  return gps_frame_ != NULL ? *gps_frame_ : *default_instance_->gps_frame_;
}
inline ::SensorProto::GPSFrame* Frame::mutable_gps_frame() {
  set_has_gps_frame();
  if (gps_frame_ == NULL) gps_frame_ = new ::SensorProto::GPSFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.gps_frame)
  return gps_frame_;
}
inline ::SensorProto::GPSFrame* Frame::release_gps_frame() {
  clear_has_gps_frame();
  ::SensorProto::GPSFrame* temp = gps_frame_;
  gps_frame_ = NULL;
  return temp;
}
inline void Frame::set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame) {
  delete gps_frame_;
  gps_frame_ = gps_frame;
  if (gps_frame) {
    set_has_gps_frame();
  } else {
    clear_has_gps_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.gps_frame)
}

// repeated .SensorProto.GPSFrameRaw gps_frames_raw = 14;
inline int Frame::gps_frames_raw_size() const {
  return gps_frames_raw_.size();
}
inline void Frame::clear_gps_frames_raw() {
  gps_frames_raw_.Clear();
}
inline const ::SensorProto::GPSFrameRaw& Frame::gps_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.gps_frames_raw)
  return gps_frames_raw_.Get(index);
}
inline ::SensorProto::GPSFrameRaw* Frame::mutable_gps_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.gps_frames_raw)
  return gps_frames_raw_.Mutable(index);
}
inline ::SensorProto::GPSFrameRaw* Frame::add_gps_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.gps_frames_raw)
  return gps_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
Frame::gps_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.gps_frames_raw)
  return gps_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
Frame::mutable_gps_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.gps_frames_raw)
  return &gps_frames_raw_;
}

// repeated .CommonProto.FreeSpaceResult freespace = 15;
inline int Frame::freespace_size() const {
  return freespace_.size();
}
inline void Frame::clear_freespace() {
  freespace_.Clear();
}
inline const ::CommonProto::FreeSpaceResult& Frame::freespace(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.freespace)
  return freespace_.Get(index);
}
inline ::CommonProto::FreeSpaceResult* Frame::mutable_freespace(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.freespace)
  return freespace_.Mutable(index);
}
inline ::CommonProto::FreeSpaceResult* Frame::add_freespace() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.freespace)
  return freespace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >&
Frame::freespace() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.freespace)
  return freespace_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >*
Frame::mutable_freespace() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.freespace)
  return &freespace_;
}

// optional .FrameV0Proto.FrameSource source = 16;
inline bool Frame::has_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Frame::set_has_source() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Frame::clear_has_source() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Frame::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::FrameV0Proto::FrameSource Frame::source() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.source)
  return static_cast< ::FrameV0Proto::FrameSource >(source_);
}
inline void Frame::set_source(::FrameV0Proto::FrameSource value) {
  assert(::FrameV0Proto::FrameSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.Frame.source)
}

// optional .CommonProto.MotionFrame motion_frame = 17;
inline bool Frame::has_motion_frame() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Frame::set_has_motion_frame() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Frame::clear_has_motion_frame() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Frame::clear_motion_frame() {
  if (motion_frame_ != NULL) motion_frame_->::CommonProto::MotionFrame::Clear();
  clear_has_motion_frame();
}
inline const ::CommonProto::MotionFrame& Frame::motion_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.motion_frame)
  return motion_frame_ != NULL ? *motion_frame_ : *default_instance_->motion_frame_;
}
inline ::CommonProto::MotionFrame* Frame::mutable_motion_frame() {
  set_has_motion_frame();
  if (motion_frame_ == NULL) motion_frame_ = new ::CommonProto::MotionFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.motion_frame)
  return motion_frame_;
}
inline ::CommonProto::MotionFrame* Frame::release_motion_frame() {
  clear_has_motion_frame();
  ::CommonProto::MotionFrame* temp = motion_frame_;
  motion_frame_ = NULL;
  return temp;
}
inline void Frame::set_allocated_motion_frame(::CommonProto::MotionFrame* motion_frame) {
  delete motion_frame_;
  motion_frame_ = motion_frame;
  if (motion_frame) {
    set_has_motion_frame();
  } else {
    clear_has_motion_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.motion_frame)
}

// optional .CommonProto.CameraParam camera_param = 18;
inline bool Frame::has_camera_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Frame::set_has_camera_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Frame::clear_has_camera_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Frame::clear_camera_param() {
  if (camera_param_ != NULL) camera_param_->::CommonProto::CameraParam::Clear();
  clear_has_camera_param();
}
inline const ::CommonProto::CameraParam& Frame::camera_param() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.camera_param)
  return camera_param_ != NULL ? *camera_param_ : *default_instance_->camera_param_;
}
inline ::CommonProto::CameraParam* Frame::mutable_camera_param() {
  set_has_camera_param();
  if (camera_param_ == NULL) camera_param_ = new ::CommonProto::CameraParam;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.camera_param)
  return camera_param_;
}
inline ::CommonProto::CameraParam* Frame::release_camera_param() {
  clear_has_camera_param();
  ::CommonProto::CameraParam* temp = camera_param_;
  camera_param_ = NULL;
  return temp;
}
inline void Frame::set_allocated_camera_param(::CommonProto::CameraParam* camera_param) {
  delete camera_param_;
  camera_param_ = camera_param;
  if (camera_param) {
    set_has_camera_param();
  } else {
    clear_has_camera_param();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.camera_param)
}

// repeated .FrameV0Proto.ObstacleResult pedestrians = 19;
inline int Frame::pedestrians_size() const {
  return pedestrians_.size();
}
inline void Frame::clear_pedestrians() {
  pedestrians_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& Frame::pedestrians(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.pedestrians)
  return pedestrians_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::mutable_pedestrians(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.pedestrians)
  return pedestrians_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::add_pedestrians() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.pedestrians)
  return pedestrians_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
Frame::pedestrians() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.pedestrians)
  return pedestrians_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
Frame::mutable_pedestrians() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.pedestrians)
  return &pedestrians_;
}

// repeated .CommonProto.ObstacleRaw vehicle_raw = 20;
inline int Frame::vehicle_raw_size() const {
  return vehicle_raw_.size();
}
inline void Frame::clear_vehicle_raw() {
  vehicle_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& Frame::vehicle_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.vehicle_raw)
  return vehicle_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* Frame::mutable_vehicle_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.vehicle_raw)
  return vehicle_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* Frame::add_vehicle_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.vehicle_raw)
  return vehicle_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
Frame::vehicle_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.vehicle_raw)
  return vehicle_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
Frame::mutable_vehicle_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.vehicle_raw)
  return &vehicle_raw_;
}

// repeated .CommonProto.ObstacleRaw lane_raw = 21;
inline int Frame::lane_raw_size() const {
  return lane_raw_.size();
}
inline void Frame::clear_lane_raw() {
  lane_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& Frame::lane_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.lane_raw)
  return lane_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* Frame::mutable_lane_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.lane_raw)
  return lane_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* Frame::add_lane_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.lane_raw)
  return lane_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
Frame::lane_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.lane_raw)
  return lane_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
Frame::mutable_lane_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.lane_raw)
  return &lane_raw_;
}

// repeated .CommonProto.ObstacleRaw pedestrians_raw = 22;
inline int Frame::pedestrians_raw_size() const {
  return pedestrians_raw_.size();
}
inline void Frame::clear_pedestrians_raw() {
  pedestrians_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& Frame::pedestrians_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.pedestrians_raw)
  return pedestrians_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* Frame::mutable_pedestrians_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.pedestrians_raw)
  return pedestrians_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* Frame::add_pedestrians_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.pedestrians_raw)
  return pedestrians_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
Frame::pedestrians_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.pedestrians_raw)
  return pedestrians_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
Frame::mutable_pedestrians_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.pedestrians_raw)
  return &pedestrians_raw_;
}

// optional .WarningProto.WarningResult warning_result = 23;
inline bool Frame::has_warning_result() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Frame::set_has_warning_result() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Frame::clear_has_warning_result() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Frame::clear_warning_result() {
  if (warning_result_ != NULL) warning_result_->::WarningProto::WarningResult::Clear();
  clear_has_warning_result();
}
inline const ::WarningProto::WarningResult& Frame::warning_result() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.warning_result)
  return warning_result_ != NULL ? *warning_result_ : *default_instance_->warning_result_;
}
inline ::WarningProto::WarningResult* Frame::mutable_warning_result() {
  set_has_warning_result();
  if (warning_result_ == NULL) warning_result_ = new ::WarningProto::WarningResult;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.warning_result)
  return warning_result_;
}
inline ::WarningProto::WarningResult* Frame::release_warning_result() {
  clear_has_warning_result();
  ::WarningProto::WarningResult* temp = warning_result_;
  warning_result_ = NULL;
  return temp;
}
inline void Frame::set_allocated_warning_result(::WarningProto::WarningResult* warning_result) {
  delete warning_result_;
  warning_result_ = warning_result;
  if (warning_result) {
    set_has_warning_result();
  } else {
    clear_has_warning_result();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.warning_result)
}

// optional .CommonProto.OdometryFrame odometry = 24;
inline bool Frame::has_odometry() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Frame::set_has_odometry() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Frame::clear_has_odometry() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Frame::clear_odometry() {
  if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
  clear_has_odometry();
}
inline const ::CommonProto::OdometryFrame& Frame::odometry() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.odometry)
  return odometry_ != NULL ? *odometry_ : *default_instance_->odometry_;
}
inline ::CommonProto::OdometryFrame* Frame::mutable_odometry() {
  set_has_odometry();
  if (odometry_ == NULL) odometry_ = new ::CommonProto::OdometryFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.odometry)
  return odometry_;
}
inline ::CommonProto::OdometryFrame* Frame::release_odometry() {
  clear_has_odometry();
  ::CommonProto::OdometryFrame* temp = odometry_;
  odometry_ = NULL;
  return temp;
}
inline void Frame::set_allocated_odometry(::CommonProto::OdometryFrame* odometry) {
  delete odometry_;
  odometry_ = odometry;
  if (odometry) {
    set_has_odometry();
  } else {
    clear_has_odometry();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.odometry)
}

// optional .CommonProto.CameraParam camera_param_default = 25;
inline bool Frame::has_camera_param_default() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Frame::set_has_camera_param_default() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Frame::clear_has_camera_param_default() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Frame::clear_camera_param_default() {
  if (camera_param_default_ != NULL) camera_param_default_->::CommonProto::CameraParam::Clear();
  clear_has_camera_param_default();
}
inline const ::CommonProto::CameraParam& Frame::camera_param_default() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.camera_param_default)
  return camera_param_default_ != NULL ? *camera_param_default_ : *default_instance_->camera_param_default_;
}
inline ::CommonProto::CameraParam* Frame::mutable_camera_param_default() {
  set_has_camera_param_default();
  if (camera_param_default_ == NULL) camera_param_default_ = new ::CommonProto::CameraParam;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.camera_param_default)
  return camera_param_default_;
}
inline ::CommonProto::CameraParam* Frame::release_camera_param_default() {
  clear_has_camera_param_default();
  ::CommonProto::CameraParam* temp = camera_param_default_;
  camera_param_default_ = NULL;
  return temp;
}
inline void Frame::set_allocated_camera_param_default(::CommonProto::CameraParam* camera_param_default) {
  delete camera_param_default_;
  camera_param_default_ = camera_param_default;
  if (camera_param_default) {
    set_has_camera_param_default();
  } else {
    clear_has_camera_param_default();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.camera_param_default)
}

// optional .SensorProto.IMUFrame imu_offset = 26;
inline bool Frame::has_imu_offset() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Frame::set_has_imu_offset() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Frame::clear_has_imu_offset() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Frame::clear_imu_offset() {
  if (imu_offset_ != NULL) imu_offset_->::SensorProto::IMUFrame::Clear();
  clear_has_imu_offset();
}
inline const ::SensorProto::IMUFrame& Frame::imu_offset() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.imu_offset)
  return imu_offset_ != NULL ? *imu_offset_ : *default_instance_->imu_offset_;
}
inline ::SensorProto::IMUFrame* Frame::mutable_imu_offset() {
  set_has_imu_offset();
  if (imu_offset_ == NULL) imu_offset_ = new ::SensorProto::IMUFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.imu_offset)
  return imu_offset_;
}
inline ::SensorProto::IMUFrame* Frame::release_imu_offset() {
  clear_has_imu_offset();
  ::SensorProto::IMUFrame* temp = imu_offset_;
  imu_offset_ = NULL;
  return temp;
}
inline void Frame::set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset) {
  delete imu_offset_;
  imu_offset_ = imu_offset;
  if (imu_offset) {
    set_has_imu_offset();
  } else {
    clear_has_imu_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.imu_offset)
}

// repeated .CommonProto.ObstacleRaw obj_raw = 27;
inline int Frame::obj_raw_size() const {
  return obj_raw_.size();
}
inline void Frame::clear_obj_raw() {
  obj_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& Frame::obj_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.obj_raw)
  return obj_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* Frame::mutable_obj_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.obj_raw)
  return obj_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* Frame::add_obj_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.obj_raw)
  return obj_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
Frame::obj_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.obj_raw)
  return obj_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
Frame::mutable_obj_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.obj_raw)
  return &obj_raw_;
}

// repeated .FrameV0Proto.ObstacleResult traffic_signs = 28;
inline int Frame::traffic_signs_size() const {
  return traffic_signs_.size();
}
inline void Frame::clear_traffic_signs() {
  traffic_signs_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& Frame::traffic_signs(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.traffic_signs)
  return traffic_signs_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::mutable_traffic_signs(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.traffic_signs)
  return traffic_signs_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::add_traffic_signs() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.traffic_signs)
  return traffic_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
Frame::traffic_signs() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.traffic_signs)
  return traffic_signs_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
Frame::mutable_traffic_signs() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.traffic_signs)
  return &traffic_signs_;
}

// repeated .FrameV0Proto.ObstacleResult traffic_lights = 29;
inline int Frame::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline void Frame::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& Frame::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* Frame::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
Frame::traffic_lights() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.traffic_lights)
  return traffic_lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
Frame::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.traffic_lights)
  return &traffic_lights_;
}

// repeated int32 traffic_sign_types = 30;
inline int Frame::traffic_sign_types_size() const {
  return traffic_sign_types_.size();
}
inline void Frame::clear_traffic_sign_types() {
  traffic_sign_types_.Clear();
}
inline ::google::protobuf::int32 Frame::traffic_sign_types(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.traffic_sign_types)
  return traffic_sign_types_.Get(index);
}
inline void Frame::set_traffic_sign_types(int index, ::google::protobuf::int32 value) {
  traffic_sign_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:FrameV0Proto.Frame.traffic_sign_types)
}
inline void Frame::add_traffic_sign_types(::google::protobuf::int32 value) {
  traffic_sign_types_.Add(value);
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.traffic_sign_types)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Frame::traffic_sign_types() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.traffic_sign_types)
  return traffic_sign_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Frame::mutable_traffic_sign_types() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.traffic_sign_types)
  return &traffic_sign_types_;
}

// optional .CommonProto.Image parsing_frame = 31;
inline bool Frame::has_parsing_frame() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Frame::set_has_parsing_frame() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Frame::clear_has_parsing_frame() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Frame::clear_parsing_frame() {
  if (parsing_frame_ != NULL) parsing_frame_->::CommonProto::Image::Clear();
  clear_has_parsing_frame();
}
inline const ::CommonProto::Image& Frame::parsing_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.parsing_frame)
  return parsing_frame_ != NULL ? *parsing_frame_ : *default_instance_->parsing_frame_;
}
inline ::CommonProto::Image* Frame::mutable_parsing_frame() {
  set_has_parsing_frame();
  if (parsing_frame_ == NULL) parsing_frame_ = new ::CommonProto::Image;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.parsing_frame)
  return parsing_frame_;
}
inline ::CommonProto::Image* Frame::release_parsing_frame() {
  clear_has_parsing_frame();
  ::CommonProto::Image* temp = parsing_frame_;
  parsing_frame_ = NULL;
  return temp;
}
inline void Frame::set_allocated_parsing_frame(::CommonProto::Image* parsing_frame) {
  delete parsing_frame_;
  parsing_frame_ = parsing_frame;
  if (parsing_frame) {
    set_has_parsing_frame();
  } else {
    clear_has_parsing_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.parsing_frame)
}

// optional .CommonProto.Image depth_frame = 32;
inline bool Frame::has_depth_frame() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Frame::set_has_depth_frame() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Frame::clear_has_depth_frame() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Frame::clear_depth_frame() {
  if (depth_frame_ != NULL) depth_frame_->::CommonProto::Image::Clear();
  clear_has_depth_frame();
}
inline const ::CommonProto::Image& Frame::depth_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.depth_frame)
  return depth_frame_ != NULL ? *depth_frame_ : *default_instance_->depth_frame_;
}
inline ::CommonProto::Image* Frame::mutable_depth_frame() {
  set_has_depth_frame();
  if (depth_frame_ == NULL) depth_frame_ = new ::CommonProto::Image;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.depth_frame)
  return depth_frame_;
}
inline ::CommonProto::Image* Frame::release_depth_frame() {
  clear_has_depth_frame();
  ::CommonProto::Image* temp = depth_frame_;
  depth_frame_ = NULL;
  return temp;
}
inline void Frame::set_allocated_depth_frame(::CommonProto::Image* depth_frame) {
  delete depth_frame_;
  depth_frame_ = depth_frame;
  if (depth_frame) {
    set_has_depth_frame();
  } else {
    clear_has_depth_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.depth_frame)
}

// repeated .FrameV0Proto.Box3DResult boxes_3d = 33;
inline int Frame::boxes_3d_size() const {
  return boxes_3d_.size();
}
inline void Frame::clear_boxes_3d() {
  boxes_3d_.Clear();
}
inline const ::FrameV0Proto::Box3DResult& Frame::boxes_3d(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.boxes_3d)
  return boxes_3d_.Get(index);
}
inline ::FrameV0Proto::Box3DResult* Frame::mutable_boxes_3d(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.boxes_3d)
  return boxes_3d_.Mutable(index);
}
inline ::FrameV0Proto::Box3DResult* Frame::add_boxes_3d() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.boxes_3d)
  return boxes_3d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >&
Frame::boxes_3d() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.boxes_3d)
  return boxes_3d_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >*
Frame::mutable_boxes_3d() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.boxes_3d)
  return &boxes_3d_;
}

// repeated .CommonProto.Skeleton skeletons = 34;
inline int Frame::skeletons_size() const {
  return skeletons_.size();
}
inline void Frame::clear_skeletons() {
  skeletons_.Clear();
}
inline const ::CommonProto::Skeleton& Frame::skeletons(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.skeletons)
  return skeletons_.Get(index);
}
inline ::CommonProto::Skeleton* Frame::mutable_skeletons(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.skeletons)
  return skeletons_.Mutable(index);
}
inline ::CommonProto::Skeleton* Frame::add_skeletons() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.skeletons)
  return skeletons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >&
Frame::skeletons() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.skeletons)
  return skeletons_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >*
Frame::mutable_skeletons() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.skeletons)
  return &skeletons_;
}

// repeated .CommonProto.Box3DRaw boxes_3d_raw = 35;
inline int Frame::boxes_3d_raw_size() const {
  return boxes_3d_raw_.size();
}
inline void Frame::clear_boxes_3d_raw() {
  boxes_3d_raw_.Clear();
}
inline const ::CommonProto::Box3DRaw& Frame::boxes_3d_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.boxes_3d_raw)
  return boxes_3d_raw_.Get(index);
}
inline ::CommonProto::Box3DRaw* Frame::mutable_boxes_3d_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.boxes_3d_raw)
  return boxes_3d_raw_.Mutable(index);
}
inline ::CommonProto::Box3DRaw* Frame::add_boxes_3d_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.boxes_3d_raw)
  return boxes_3d_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >&
Frame::boxes_3d_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.boxes_3d_raw)
  return boxes_3d_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaw >*
Frame::mutable_boxes_3d_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.boxes_3d_raw)
  return &boxes_3d_raw_;
}

// repeated .CommonProto.SkeletonRaw skeletons_raw = 36;
inline int Frame::skeletons_raw_size() const {
  return skeletons_raw_.size();
}
inline void Frame::clear_skeletons_raw() {
  skeletons_raw_.Clear();
}
inline const ::CommonProto::SkeletonRaw& Frame::skeletons_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.skeletons_raw)
  return skeletons_raw_.Get(index);
}
inline ::CommonProto::SkeletonRaw* Frame::mutable_skeletons_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.skeletons_raw)
  return skeletons_raw_.Mutable(index);
}
inline ::CommonProto::SkeletonRaw* Frame::add_skeletons_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.skeletons_raw)
  return skeletons_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >&
Frame::skeletons_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.skeletons_raw)
  return skeletons_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaw >*
Frame::mutable_skeletons_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.skeletons_raw)
  return &skeletons_raw_;
}

// optional .CommonProto.HighwayLocate highway_locate = 37;
inline bool Frame::has_highway_locate() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Frame::set_has_highway_locate() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Frame::clear_has_highway_locate() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Frame::clear_highway_locate() {
  if (highway_locate_ != NULL) highway_locate_->::CommonProto::HighwayLocate::Clear();
  clear_has_highway_locate();
}
inline const ::CommonProto::HighwayLocate& Frame::highway_locate() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.highway_locate)
  return highway_locate_ != NULL ? *highway_locate_ : *default_instance_->highway_locate_;
}
inline ::CommonProto::HighwayLocate* Frame::mutable_highway_locate() {
  set_has_highway_locate();
  if (highway_locate_ == NULL) highway_locate_ = new ::CommonProto::HighwayLocate;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.highway_locate)
  return highway_locate_;
}
inline ::CommonProto::HighwayLocate* Frame::release_highway_locate() {
  clear_has_highway_locate();
  ::CommonProto::HighwayLocate* temp = highway_locate_;
  highway_locate_ = NULL;
  return temp;
}
inline void Frame::set_allocated_highway_locate(::CommonProto::HighwayLocate* highway_locate) {
  delete highway_locate_;
  highway_locate_ = highway_locate;
  if (highway_locate) {
    set_has_highway_locate();
  } else {
    clear_has_highway_locate();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.Frame.highway_locate)
}

// repeated .FrameV0Proto.SerializedData extra_info = 1024;
inline int Frame::extra_info_size() const {
  return extra_info_.size();
}
inline void Frame::clear_extra_info() {
  extra_info_.Clear();
}
inline const ::FrameV0Proto::SerializedData& Frame::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.Frame.extra_info)
  return extra_info_.Get(index);
}
inline ::FrameV0Proto::SerializedData* Frame::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.Frame.extra_info)
  return extra_info_.Mutable(index);
}
inline ::FrameV0Proto::SerializedData* Frame::add_extra_info() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.Frame.extra_info)
  return extra_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >&
Frame::extra_info() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.Frame.extra_info)
  return extra_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >*
Frame::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.Frame.extra_info)
  return &extra_info_;
}

// -------------------------------------------------------------------

// FrameShuffle

// optional int32 version = 1;
inline bool FrameShuffle::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameShuffle::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameShuffle::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameShuffle::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 FrameShuffle::version() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.version)
  return version_;
}
inline void FrameShuffle::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.FrameShuffle.version)
}

// optional int32 frame_id = 2;
inline bool FrameShuffle::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameShuffle::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameShuffle::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameShuffle::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 FrameShuffle::frame_id() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.frame_id)
  return frame_id_;
}
inline void FrameShuffle::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.FrameShuffle.frame_id)
}

// optional .CommonProto.Image img_frame = 4;
inline bool FrameShuffle::has_img_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameShuffle::set_has_img_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameShuffle::clear_has_img_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameShuffle::clear_img_frame() {
  if (img_frame_ != NULL) img_frame_->::CommonProto::Image::Clear();
  clear_has_img_frame();
}
inline const ::CommonProto::Image& FrameShuffle::img_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.img_frame)
  return img_frame_ != NULL ? *img_frame_ : *default_instance_->img_frame_;
}
inline ::CommonProto::Image* FrameShuffle::mutable_img_frame() {
  set_has_img_frame();
  if (img_frame_ == NULL) img_frame_ = new ::CommonProto::Image;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.img_frame)
  return img_frame_;
}
inline ::CommonProto::Image* FrameShuffle::release_img_frame() {
  clear_has_img_frame();
  ::CommonProto::Image* temp = img_frame_;
  img_frame_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_img_frame(::CommonProto::Image* img_frame) {
  delete img_frame_;
  img_frame_ = img_frame;
  if (img_frame) {
    set_has_img_frame();
  } else {
    clear_has_img_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.img_frame)
}

// optional .SensorProto.GPSFrame gps_frame = 13;
inline bool FrameShuffle::has_gps_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameShuffle::set_has_gps_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrameShuffle::clear_has_gps_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrameShuffle::clear_gps_frame() {
  if (gps_frame_ != NULL) gps_frame_->::SensorProto::GPSFrame::Clear();
  clear_has_gps_frame();
}
inline const ::SensorProto::GPSFrame& FrameShuffle::gps_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.gps_frame)
  return gps_frame_ != NULL ? *gps_frame_ : *default_instance_->gps_frame_;
}
inline ::SensorProto::GPSFrame* FrameShuffle::mutable_gps_frame() {
  set_has_gps_frame();
  if (gps_frame_ == NULL) gps_frame_ = new ::SensorProto::GPSFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.gps_frame)
  return gps_frame_;
}
inline ::SensorProto::GPSFrame* FrameShuffle::release_gps_frame() {
  clear_has_gps_frame();
  ::SensorProto::GPSFrame* temp = gps_frame_;
  gps_frame_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame) {
  delete gps_frame_;
  gps_frame_ = gps_frame;
  if (gps_frame) {
    set_has_gps_frame();
  } else {
    clear_has_gps_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.gps_frame)
}

// optional .CommonProto.CameraMatrix camera = 17;
inline bool FrameShuffle::has_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameShuffle::set_has_camera() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FrameShuffle::clear_has_camera() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FrameShuffle::clear_camera() {
  if (camera_ != NULL) camera_->::CommonProto::CameraMatrix::Clear();
  clear_has_camera();
}
inline const ::CommonProto::CameraMatrix& FrameShuffle::camera() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.camera)
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
inline ::CommonProto::CameraMatrix* FrameShuffle::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) camera_ = new ::CommonProto::CameraMatrix;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.camera)
  return camera_;
}
inline ::CommonProto::CameraMatrix* FrameShuffle::release_camera() {
  clear_has_camera();
  ::CommonProto::CameraMatrix* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_camera(::CommonProto::CameraMatrix* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.camera)
}

// optional .CANProto.CANFrame can_frames = 11;
inline bool FrameShuffle::has_can_frames() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FrameShuffle::set_has_can_frames() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FrameShuffle::clear_has_can_frames() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FrameShuffle::clear_can_frames() {
  if (can_frames_ != NULL) can_frames_->::CANProto::CANFrame::Clear();
  clear_has_can_frames();
}
inline const ::CANProto::CANFrame& FrameShuffle::can_frames() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.can_frames)
  return can_frames_ != NULL ? *can_frames_ : *default_instance_->can_frames_;
}
inline ::CANProto::CANFrame* FrameShuffle::mutable_can_frames() {
  set_has_can_frames();
  if (can_frames_ == NULL) can_frames_ = new ::CANProto::CANFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.can_frames)
  return can_frames_;
}
inline ::CANProto::CANFrame* FrameShuffle::release_can_frames() {
  clear_has_can_frames();
  ::CANProto::CANFrame* temp = can_frames_;
  can_frames_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_can_frames(::CANProto::CANFrame* can_frames) {
  delete can_frames_;
  can_frames_ = can_frames;
  if (can_frames) {
    set_has_can_frames();
  } else {
    clear_has_can_frames();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.can_frames)
}

// repeated .FrameV0Proto.ObstacleResult vehiles = 9;
inline int FrameShuffle::vehiles_size() const {
  return vehiles_.size();
}
inline void FrameShuffle::clear_vehiles() {
  vehiles_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& FrameShuffle::vehiles(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.vehiles)
  return vehiles_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::mutable_vehiles(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.vehiles)
  return vehiles_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::add_vehiles() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.vehiles)
  return vehiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
FrameShuffle::vehiles() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.vehiles)
  return vehiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
FrameShuffle::mutable_vehiles() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.vehiles)
  return &vehiles_;
}

// repeated .CommonProto.Line lanes = 25;
inline int FrameShuffle::lanes_size() const {
  return lanes_.size();
}
inline void FrameShuffle::clear_lanes() {
  lanes_.Clear();
}
inline const ::CommonProto::Line& FrameShuffle::lanes(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.lanes)
  return lanes_.Get(index);
}
inline ::CommonProto::Line* FrameShuffle::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.lanes)
  return lanes_.Mutable(index);
}
inline ::CommonProto::Line* FrameShuffle::add_lanes() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.lanes)
  return lanes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >&
FrameShuffle::lanes() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.lanes)
  return lanes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Line >*
FrameShuffle::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.lanes)
  return &lanes_;
}

// optional .WarningProto.FCW fcw = 24;
inline bool FrameShuffle::has_fcw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FrameShuffle::set_has_fcw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FrameShuffle::clear_has_fcw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FrameShuffle::clear_fcw() {
  if (fcw_ != NULL) fcw_->::WarningProto::FCW::Clear();
  clear_has_fcw();
}
inline const ::WarningProto::FCW& FrameShuffle::fcw() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.fcw)
  return fcw_ != NULL ? *fcw_ : *default_instance_->fcw_;
}
inline ::WarningProto::FCW* FrameShuffle::mutable_fcw() {
  set_has_fcw();
  if (fcw_ == NULL) fcw_ = new ::WarningProto::FCW;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.fcw)
  return fcw_;
}
inline ::WarningProto::FCW* FrameShuffle::release_fcw() {
  clear_has_fcw();
  ::WarningProto::FCW* temp = fcw_;
  fcw_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_fcw(::WarningProto::FCW* fcw) {
  delete fcw_;
  fcw_ = fcw;
  if (fcw) {
    set_has_fcw();
  } else {
    clear_has_fcw();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.fcw)
}

// optional .WarningProto.LDW ldw = 23;
inline bool FrameShuffle::has_ldw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FrameShuffle::set_has_ldw() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FrameShuffle::clear_has_ldw() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FrameShuffle::clear_ldw() {
  if (ldw_ != NULL) ldw_->::WarningProto::LDW::Clear();
  clear_has_ldw();
}
inline const ::WarningProto::LDW& FrameShuffle::ldw() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.ldw)
  return ldw_ != NULL ? *ldw_ : *default_instance_->ldw_;
}
inline ::WarningProto::LDW* FrameShuffle::mutable_ldw() {
  set_has_ldw();
  if (ldw_ == NULL) ldw_ = new ::WarningProto::LDW;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.ldw)
  return ldw_;
}
inline ::WarningProto::LDW* FrameShuffle::release_ldw() {
  clear_has_ldw();
  ::WarningProto::LDW* temp = ldw_;
  ldw_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_ldw(::WarningProto::LDW* ldw) {
  delete ldw_;
  ldw_ = ldw;
  if (ldw) {
    set_has_ldw();
  } else {
    clear_has_ldw();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.ldw)
}

// repeated .CANProto.CANFrameRaw can_frames_raw = 20;
inline int FrameShuffle::can_frames_raw_size() const {
  return can_frames_raw_.size();
}
inline void FrameShuffle::clear_can_frames_raw() {
  can_frames_raw_.Clear();
}
inline const ::CANProto::CANFrameRaw& FrameShuffle::can_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.can_frames_raw)
  return can_frames_raw_.Get(index);
}
inline ::CANProto::CANFrameRaw* FrameShuffle::mutable_can_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.can_frames_raw)
  return can_frames_raw_.Mutable(index);
}
inline ::CANProto::CANFrameRaw* FrameShuffle::add_can_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.can_frames_raw)
  return can_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >&
FrameShuffle::can_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.can_frames_raw)
  return can_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >*
FrameShuffle::mutable_can_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.can_frames_raw)
  return &can_frames_raw_;
}

// optional .SensorProto.IMUFrame imu_frame = 3;
inline bool FrameShuffle::has_imu_frame() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FrameShuffle::set_has_imu_frame() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FrameShuffle::clear_has_imu_frame() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FrameShuffle::clear_imu_frame() {
  if (imu_frame_ != NULL) imu_frame_->::SensorProto::IMUFrame::Clear();
  clear_has_imu_frame();
}
inline const ::SensorProto::IMUFrame& FrameShuffle::imu_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.imu_frame)
  return imu_frame_ != NULL ? *imu_frame_ : *default_instance_->imu_frame_;
}
inline ::SensorProto::IMUFrame* FrameShuffle::mutable_imu_frame() {
  set_has_imu_frame();
  if (imu_frame_ == NULL) imu_frame_ = new ::SensorProto::IMUFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.imu_frame)
  return imu_frame_;
}
inline ::SensorProto::IMUFrame* FrameShuffle::release_imu_frame() {
  clear_has_imu_frame();
  ::SensorProto::IMUFrame* temp = imu_frame_;
  imu_frame_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame) {
  delete imu_frame_;
  imu_frame_ = imu_frame;
  if (imu_frame) {
    set_has_imu_frame();
  } else {
    clear_has_imu_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.imu_frame)
}

// repeated .SensorProto.IMUFrame imu_frames_raw = 8;
inline int FrameShuffle::imu_frames_raw_size() const {
  return imu_frames_raw_.size();
}
inline void FrameShuffle::clear_imu_frames_raw() {
  imu_frames_raw_.Clear();
}
inline const ::SensorProto::IMUFrame& FrameShuffle::imu_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.imu_frames_raw)
  return imu_frames_raw_.Get(index);
}
inline ::SensorProto::IMUFrame* FrameShuffle::mutable_imu_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.imu_frames_raw)
  return imu_frames_raw_.Mutable(index);
}
inline ::SensorProto::IMUFrame* FrameShuffle::add_imu_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.imu_frames_raw)
  return imu_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >&
FrameShuffle::imu_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.imu_frames_raw)
  return imu_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >*
FrameShuffle::mutable_imu_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.imu_frames_raw)
  return &imu_frames_raw_;
}

// repeated .SensorProto.GPSFrameRaw gps_frames_raw = 6;
inline int FrameShuffle::gps_frames_raw_size() const {
  return gps_frames_raw_.size();
}
inline void FrameShuffle::clear_gps_frames_raw() {
  gps_frames_raw_.Clear();
}
inline const ::SensorProto::GPSFrameRaw& FrameShuffle::gps_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.gps_frames_raw)
  return gps_frames_raw_.Get(index);
}
inline ::SensorProto::GPSFrameRaw* FrameShuffle::mutable_gps_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.gps_frames_raw)
  return gps_frames_raw_.Mutable(index);
}
inline ::SensorProto::GPSFrameRaw* FrameShuffle::add_gps_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.gps_frames_raw)
  return gps_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
FrameShuffle::gps_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.gps_frames_raw)
  return gps_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
FrameShuffle::mutable_gps_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.gps_frames_raw)
  return &gps_frames_raw_;
}

// repeated .CommonProto.FreeSpaceResult freespace = 10;
inline int FrameShuffle::freespace_size() const {
  return freespace_.size();
}
inline void FrameShuffle::clear_freespace() {
  freespace_.Clear();
}
inline const ::CommonProto::FreeSpaceResult& FrameShuffle::freespace(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.freespace)
  return freespace_.Get(index);
}
inline ::CommonProto::FreeSpaceResult* FrameShuffle::mutable_freespace(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.freespace)
  return freespace_.Mutable(index);
}
inline ::CommonProto::FreeSpaceResult* FrameShuffle::add_freespace() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.freespace)
  return freespace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >&
FrameShuffle::freespace() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.freespace)
  return freespace_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::FreeSpaceResult >*
FrameShuffle::mutable_freespace() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.freespace)
  return &freespace_;
}

// optional .FrameV0Proto.FrameSource source = 7;
inline bool FrameShuffle::has_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FrameShuffle::set_has_source() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FrameShuffle::clear_has_source() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FrameShuffle::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::FrameV0Proto::FrameSource FrameShuffle::source() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.source)
  return static_cast< ::FrameV0Proto::FrameSource >(source_);
}
inline void FrameShuffle::set_source(::FrameV0Proto::FrameSource value) {
  assert(::FrameV0Proto::FrameSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:FrameV0Proto.FrameShuffle.source)
}

// optional .CommonProto.MotionFrame motion_frame = 18;
inline bool FrameShuffle::has_motion_frame() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FrameShuffle::set_has_motion_frame() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FrameShuffle::clear_has_motion_frame() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FrameShuffle::clear_motion_frame() {
  if (motion_frame_ != NULL) motion_frame_->::CommonProto::MotionFrame::Clear();
  clear_has_motion_frame();
}
inline const ::CommonProto::MotionFrame& FrameShuffle::motion_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.motion_frame)
  return motion_frame_ != NULL ? *motion_frame_ : *default_instance_->motion_frame_;
}
inline ::CommonProto::MotionFrame* FrameShuffle::mutable_motion_frame() {
  set_has_motion_frame();
  if (motion_frame_ == NULL) motion_frame_ = new ::CommonProto::MotionFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.motion_frame)
  return motion_frame_;
}
inline ::CommonProto::MotionFrame* FrameShuffle::release_motion_frame() {
  clear_has_motion_frame();
  ::CommonProto::MotionFrame* temp = motion_frame_;
  motion_frame_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_motion_frame(::CommonProto::MotionFrame* motion_frame) {
  delete motion_frame_;
  motion_frame_ = motion_frame;
  if (motion_frame) {
    set_has_motion_frame();
  } else {
    clear_has_motion_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.motion_frame)
}

// optional .CommonProto.CameraParam camera_param = 19;
inline bool FrameShuffle::has_camera_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FrameShuffle::set_has_camera_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FrameShuffle::clear_has_camera_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FrameShuffle::clear_camera_param() {
  if (camera_param_ != NULL) camera_param_->::CommonProto::CameraParam::Clear();
  clear_has_camera_param();
}
inline const ::CommonProto::CameraParam& FrameShuffle::camera_param() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.camera_param)
  return camera_param_ != NULL ? *camera_param_ : *default_instance_->camera_param_;
}
inline ::CommonProto::CameraParam* FrameShuffle::mutable_camera_param() {
  set_has_camera_param();
  if (camera_param_ == NULL) camera_param_ = new ::CommonProto::CameraParam;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.camera_param)
  return camera_param_;
}
inline ::CommonProto::CameraParam* FrameShuffle::release_camera_param() {
  clear_has_camera_param();
  ::CommonProto::CameraParam* temp = camera_param_;
  camera_param_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_camera_param(::CommonProto::CameraParam* camera_param) {
  delete camera_param_;
  camera_param_ = camera_param;
  if (camera_param) {
    set_has_camera_param();
  } else {
    clear_has_camera_param();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.camera_param)
}

// repeated .FrameV0Proto.ObstacleResult pedestrians = 5;
inline int FrameShuffle::pedestrians_size() const {
  return pedestrians_.size();
}
inline void FrameShuffle::clear_pedestrians() {
  pedestrians_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& FrameShuffle::pedestrians(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.pedestrians)
  return pedestrians_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::mutable_pedestrians(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.pedestrians)
  return pedestrians_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::add_pedestrians() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.pedestrians)
  return pedestrians_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
FrameShuffle::pedestrians() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.pedestrians)
  return pedestrians_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
FrameShuffle::mutable_pedestrians() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.pedestrians)
  return &pedestrians_;
}

// repeated .FrameV0Proto.Box3DResult boxes_3d = 28;
inline int FrameShuffle::boxes_3d_size() const {
  return boxes_3d_.size();
}
inline void FrameShuffle::clear_boxes_3d() {
  boxes_3d_.Clear();
}
inline const ::FrameV0Proto::Box3DResult& FrameShuffle::boxes_3d(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.boxes_3d)
  return boxes_3d_.Get(index);
}
inline ::FrameV0Proto::Box3DResult* FrameShuffle::mutable_boxes_3d(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.boxes_3d)
  return boxes_3d_.Mutable(index);
}
inline ::FrameV0Proto::Box3DResult* FrameShuffle::add_boxes_3d() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.boxes_3d)
  return boxes_3d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >&
FrameShuffle::boxes_3d() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.boxes_3d)
  return boxes_3d_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::Box3DResult >*
FrameShuffle::mutable_boxes_3d() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.boxes_3d)
  return &boxes_3d_;
}

// repeated .CommonProto.Skeleton skeletons = 29;
inline int FrameShuffle::skeletons_size() const {
  return skeletons_.size();
}
inline void FrameShuffle::clear_skeletons() {
  skeletons_.Clear();
}
inline const ::CommonProto::Skeleton& FrameShuffle::skeletons(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.skeletons)
  return skeletons_.Get(index);
}
inline ::CommonProto::Skeleton* FrameShuffle::mutable_skeletons(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.skeletons)
  return skeletons_.Mutable(index);
}
inline ::CommonProto::Skeleton* FrameShuffle::add_skeletons() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.skeletons)
  return skeletons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >&
FrameShuffle::skeletons() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.skeletons)
  return skeletons_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Skeleton >*
FrameShuffle::mutable_skeletons() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.skeletons)
  return &skeletons_;
}

// optional .CommonProto.Image parsing_frame = 30;
inline bool FrameShuffle::has_parsing_frame() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FrameShuffle::set_has_parsing_frame() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FrameShuffle::clear_has_parsing_frame() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FrameShuffle::clear_parsing_frame() {
  if (parsing_frame_ != NULL) parsing_frame_->::CommonProto::Image::Clear();
  clear_has_parsing_frame();
}
inline const ::CommonProto::Image& FrameShuffle::parsing_frame() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.parsing_frame)
  return parsing_frame_ != NULL ? *parsing_frame_ : *default_instance_->parsing_frame_;
}
inline ::CommonProto::Image* FrameShuffle::mutable_parsing_frame() {
  set_has_parsing_frame();
  if (parsing_frame_ == NULL) parsing_frame_ = new ::CommonProto::Image;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.parsing_frame)
  return parsing_frame_;
}
inline ::CommonProto::Image* FrameShuffle::release_parsing_frame() {
  clear_has_parsing_frame();
  ::CommonProto::Image* temp = parsing_frame_;
  parsing_frame_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_parsing_frame(::CommonProto::Image* parsing_frame) {
  delete parsing_frame_;
  parsing_frame_ = parsing_frame;
  if (parsing_frame) {
    set_has_parsing_frame();
  } else {
    clear_has_parsing_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.parsing_frame)
}

// repeated .CommonProto.ObstacleRaw vehicle_raw = 16;
inline int FrameShuffle::vehicle_raw_size() const {
  return vehicle_raw_.size();
}
inline void FrameShuffle::clear_vehicle_raw() {
  vehicle_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& FrameShuffle::vehicle_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.vehicle_raw)
  return vehicle_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::mutable_vehicle_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.vehicle_raw)
  return vehicle_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::add_vehicle_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.vehicle_raw)
  return vehicle_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
FrameShuffle::vehicle_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.vehicle_raw)
  return vehicle_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
FrameShuffle::mutable_vehicle_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.vehicle_raw)
  return &vehicle_raw_;
}

// repeated .CommonProto.ObstacleRaw lane_raw = 15;
inline int FrameShuffle::lane_raw_size() const {
  return lane_raw_.size();
}
inline void FrameShuffle::clear_lane_raw() {
  lane_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& FrameShuffle::lane_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.lane_raw)
  return lane_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::mutable_lane_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.lane_raw)
  return lane_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::add_lane_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.lane_raw)
  return lane_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
FrameShuffle::lane_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.lane_raw)
  return lane_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
FrameShuffle::mutable_lane_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.lane_raw)
  return &lane_raw_;
}

// repeated .CommonProto.ObstacleRaw pedestrians_raw = 14;
inline int FrameShuffle::pedestrians_raw_size() const {
  return pedestrians_raw_.size();
}
inline void FrameShuffle::clear_pedestrians_raw() {
  pedestrians_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& FrameShuffle::pedestrians_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.pedestrians_raw)
  return pedestrians_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::mutable_pedestrians_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.pedestrians_raw)
  return pedestrians_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::add_pedestrians_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.pedestrians_raw)
  return pedestrians_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
FrameShuffle::pedestrians_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.pedestrians_raw)
  return pedestrians_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
FrameShuffle::mutable_pedestrians_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.pedestrians_raw)
  return &pedestrians_raw_;
}

// repeated .CommonProto.ObstacleRaw obj_raw = 27;
inline int FrameShuffle::obj_raw_size() const {
  return obj_raw_.size();
}
inline void FrameShuffle::clear_obj_raw() {
  obj_raw_.Clear();
}
inline const ::CommonProto::ObstacleRaw& FrameShuffle::obj_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.obj_raw)
  return obj_raw_.Get(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::mutable_obj_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.obj_raw)
  return obj_raw_.Mutable(index);
}
inline ::CommonProto::ObstacleRaw* FrameShuffle::add_obj_raw() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.obj_raw)
  return obj_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >&
FrameShuffle::obj_raw() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.obj_raw)
  return obj_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaw >*
FrameShuffle::mutable_obj_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.obj_raw)
  return &obj_raw_;
}

// repeated .FrameV0Proto.ObstacleResult traffic_signs = 1000;
inline int FrameShuffle::traffic_signs_size() const {
  return traffic_signs_.size();
}
inline void FrameShuffle::clear_traffic_signs() {
  traffic_signs_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& FrameShuffle::traffic_signs(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.traffic_signs)
  return traffic_signs_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::mutable_traffic_signs(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.traffic_signs)
  return traffic_signs_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::add_traffic_signs() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.traffic_signs)
  return traffic_signs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
FrameShuffle::traffic_signs() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.traffic_signs)
  return traffic_signs_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
FrameShuffle::mutable_traffic_signs() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.traffic_signs)
  return &traffic_signs_;
}

// repeated .FrameV0Proto.ObstacleResult traffic_lights = 1001;
inline int FrameShuffle::traffic_lights_size() const {
  return traffic_lights_.size();
}
inline void FrameShuffle::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline const ::FrameV0Proto::ObstacleResult& FrameShuffle::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.traffic_lights)
  return traffic_lights_.Get(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::FrameV0Proto::ObstacleResult* FrameShuffle::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.traffic_lights)
  return traffic_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >&
FrameShuffle::traffic_lights() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.traffic_lights)
  return traffic_lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::ObstacleResult >*
FrameShuffle::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.traffic_lights)
  return &traffic_lights_;
}

// optional .CommonProto.HighwayLocate highway_locate = 1002;
inline bool FrameShuffle::has_highway_locate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void FrameShuffle::set_has_highway_locate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void FrameShuffle::clear_has_highway_locate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void FrameShuffle::clear_highway_locate() {
  if (highway_locate_ != NULL) highway_locate_->::CommonProto::HighwayLocate::Clear();
  clear_has_highway_locate();
}
inline const ::CommonProto::HighwayLocate& FrameShuffle::highway_locate() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.highway_locate)
  return highway_locate_ != NULL ? *highway_locate_ : *default_instance_->highway_locate_;
}
inline ::CommonProto::HighwayLocate* FrameShuffle::mutable_highway_locate() {
  set_has_highway_locate();
  if (highway_locate_ == NULL) highway_locate_ = new ::CommonProto::HighwayLocate;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.highway_locate)
  return highway_locate_;
}
inline ::CommonProto::HighwayLocate* FrameShuffle::release_highway_locate() {
  clear_has_highway_locate();
  ::CommonProto::HighwayLocate* temp = highway_locate_;
  highway_locate_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_highway_locate(::CommonProto::HighwayLocate* highway_locate) {
  delete highway_locate_;
  highway_locate_ = highway_locate;
  if (highway_locate) {
    set_has_highway_locate();
  } else {
    clear_has_highway_locate();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.highway_locate)
}

// optional .WarningProto.WarningResult warning_result = 21;
inline bool FrameShuffle::has_warning_result() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void FrameShuffle::set_has_warning_result() {
  _has_bits_[0] |= 0x20000000u;
}
inline void FrameShuffle::clear_has_warning_result() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void FrameShuffle::clear_warning_result() {
  if (warning_result_ != NULL) warning_result_->::WarningProto::WarningResult::Clear();
  clear_has_warning_result();
}
inline const ::WarningProto::WarningResult& FrameShuffle::warning_result() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.warning_result)
  return warning_result_ != NULL ? *warning_result_ : *default_instance_->warning_result_;
}
inline ::WarningProto::WarningResult* FrameShuffle::mutable_warning_result() {
  set_has_warning_result();
  if (warning_result_ == NULL) warning_result_ = new ::WarningProto::WarningResult;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.warning_result)
  return warning_result_;
}
inline ::WarningProto::WarningResult* FrameShuffle::release_warning_result() {
  clear_has_warning_result();
  ::WarningProto::WarningResult* temp = warning_result_;
  warning_result_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_warning_result(::WarningProto::WarningResult* warning_result) {
  delete warning_result_;
  warning_result_ = warning_result;
  if (warning_result) {
    set_has_warning_result();
  } else {
    clear_has_warning_result();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.warning_result)
}

// optional .CommonProto.OdometryFrame odometry = 22;
inline bool FrameShuffle::has_odometry() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void FrameShuffle::set_has_odometry() {
  _has_bits_[0] |= 0x40000000u;
}
inline void FrameShuffle::clear_has_odometry() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void FrameShuffle::clear_odometry() {
  if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
  clear_has_odometry();
}
inline const ::CommonProto::OdometryFrame& FrameShuffle::odometry() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.odometry)
  return odometry_ != NULL ? *odometry_ : *default_instance_->odometry_;
}
inline ::CommonProto::OdometryFrame* FrameShuffle::mutable_odometry() {
  set_has_odometry();
  if (odometry_ == NULL) odometry_ = new ::CommonProto::OdometryFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.odometry)
  return odometry_;
}
inline ::CommonProto::OdometryFrame* FrameShuffle::release_odometry() {
  clear_has_odometry();
  ::CommonProto::OdometryFrame* temp = odometry_;
  odometry_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_odometry(::CommonProto::OdometryFrame* odometry) {
  delete odometry_;
  odometry_ = odometry;
  if (odometry) {
    set_has_odometry();
  } else {
    clear_has_odometry();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.odometry)
}

// optional .CommonProto.CameraParam camera_param_default = 12;
inline bool FrameShuffle::has_camera_param_default() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void FrameShuffle::set_has_camera_param_default() {
  _has_bits_[0] |= 0x80000000u;
}
inline void FrameShuffle::clear_has_camera_param_default() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void FrameShuffle::clear_camera_param_default() {
  if (camera_param_default_ != NULL) camera_param_default_->::CommonProto::CameraParam::Clear();
  clear_has_camera_param_default();
}
inline const ::CommonProto::CameraParam& FrameShuffle::camera_param_default() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.camera_param_default)
  return camera_param_default_ != NULL ? *camera_param_default_ : *default_instance_->camera_param_default_;
}
inline ::CommonProto::CameraParam* FrameShuffle::mutable_camera_param_default() {
  set_has_camera_param_default();
  if (camera_param_default_ == NULL) camera_param_default_ = new ::CommonProto::CameraParam;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.camera_param_default)
  return camera_param_default_;
}
inline ::CommonProto::CameraParam* FrameShuffle::release_camera_param_default() {
  clear_has_camera_param_default();
  ::CommonProto::CameraParam* temp = camera_param_default_;
  camera_param_default_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_camera_param_default(::CommonProto::CameraParam* camera_param_default) {
  delete camera_param_default_;
  camera_param_default_ = camera_param_default;
  if (camera_param_default) {
    set_has_camera_param_default();
  } else {
    clear_has_camera_param_default();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.camera_param_default)
}

// optional .SensorProto.IMUFrame imu_offset = 36;
inline bool FrameShuffle::has_imu_offset() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void FrameShuffle::set_has_imu_offset() {
  _has_bits_[1] |= 0x00000001u;
}
inline void FrameShuffle::clear_has_imu_offset() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void FrameShuffle::clear_imu_offset() {
  if (imu_offset_ != NULL) imu_offset_->::SensorProto::IMUFrame::Clear();
  clear_has_imu_offset();
}
inline const ::SensorProto::IMUFrame& FrameShuffle::imu_offset() const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.imu_offset)
  return imu_offset_ != NULL ? *imu_offset_ : *default_instance_->imu_offset_;
}
inline ::SensorProto::IMUFrame* FrameShuffle::mutable_imu_offset() {
  set_has_imu_offset();
  if (imu_offset_ == NULL) imu_offset_ = new ::SensorProto::IMUFrame;
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.imu_offset)
  return imu_offset_;
}
inline ::SensorProto::IMUFrame* FrameShuffle::release_imu_offset() {
  clear_has_imu_offset();
  ::SensorProto::IMUFrame* temp = imu_offset_;
  imu_offset_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset) {
  delete imu_offset_;
  imu_offset_ = imu_offset;
  if (imu_offset) {
    set_has_imu_offset();
  } else {
    clear_has_imu_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV0Proto.FrameShuffle.imu_offset)
}

// repeated .FrameV0Proto.SerializedData extra_info = 101;
inline int FrameShuffle::extra_info_size() const {
  return extra_info_.size();
}
inline void FrameShuffle::clear_extra_info() {
  extra_info_.Clear();
}
inline const ::FrameV0Proto::SerializedData& FrameShuffle::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:FrameV0Proto.FrameShuffle.extra_info)
  return extra_info_.Get(index);
}
inline ::FrameV0Proto::SerializedData* FrameShuffle::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV0Proto.FrameShuffle.extra_info)
  return extra_info_.Mutable(index);
}
inline ::FrameV0Proto::SerializedData* FrameShuffle::add_extra_info() {
  // @@protoc_insertion_point(field_add:FrameV0Proto.FrameShuffle.extra_info)
  return extra_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >&
FrameShuffle::extra_info() const {
  // @@protoc_insertion_point(field_list:FrameV0Proto.FrameShuffle.extra_info)
  return extra_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameV0Proto::SerializedData >*
FrameShuffle::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:FrameV0Proto.FrameShuffle.extra_info)
  return &extra_info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FrameV0Proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FrameV0Proto::VehicleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrameV0Proto::VehicleType>() {
  return ::FrameV0Proto::VehicleType_descriptor();
}
template <> struct is_proto_enum< ::FrameV0Proto::FrameSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrameV0Proto::FrameSource>() {
  return ::FrameV0Proto::FrameSource_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_frame_2ev0_2eproto__INCLUDED
