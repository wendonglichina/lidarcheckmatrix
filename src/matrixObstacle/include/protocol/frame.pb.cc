// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FrameProtocol {

namespace {

const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameShuffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameShuffle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameProtoVersion_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_frame_2eproto() {
  protobuf_AddDesc_frame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "frame.proto");
  GOOGLE_CHECK(file != NULL);
  Frame_descriptor_ = file->message_type(0);
  static const int Frame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, img_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, proto_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frame_v0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frame_v1_),
  };
  Frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Frame));
  FrameShuffle_descriptor_ = file->message_type(1);
  static const int FrameShuffle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, img_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, proto_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, frame_v0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, frame_v1_),
  };
  FrameShuffle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameShuffle_descriptor_,
      FrameShuffle::default_instance_,
      FrameShuffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShuffle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameShuffle));
  FrameProtoVersion_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_frame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameShuffle_descriptor_, &FrameShuffle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_frame_2eproto() {
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete FrameShuffle::default_instance_;
  delete FrameShuffle_reflection_;
}

void protobuf_AddDesc_frame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonProto::protobuf_AddDesc_common_2eproto();
  ::FrameV0Proto::protobuf_AddDesc_frame_2ev0_2eproto();
  ::FrameV1Proto::protobuf_AddDesc_frame_2ev1_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013frame.proto\022\rFrameProtocol\032\014common.pro"
    "to\032\016frame.v0.proto\032\016frame.v1.proto\"\344\001\n\005F"
    "rame\022\017\n\007version\030\001 \002(\005\022\020\n\010frame_id\030\002 \002(\005\022"
    ")\n\006camera\030\003 \001(\0132\031.CommonProto.CameraMatr"
    "ix\022%\n\timg_frame\030\004 \001(\0132\022.CommonProto.Imag"
    "e\022\030\n\rproto_version\030\005 \001(\005:\0011\022%\n\010frame_v0\030"
    "\006 \001(\0132\023.FrameV0Proto.Frame\022%\n\010frame_v1\030\007"
    " \001(\0132\023.FrameV1Proto.Frame\"\371\001\n\014FrameShuff"
    "le\022\017\n\007version\030\001 \002(\005\022\020\n\010frame_id\030\002 \002(\005\022)\n"
    "\006camera\030\003 \001(\0132\031.CommonProto.CameraMatrix"
    "\022%\n\timg_frame\030\004 \001(\0132\022.CommonProto.Image\022"
    "\030\n\rproto_version\030\005 \001(\005:\0011\022,\n\010frame_v0\030\006 "
    "\001(\0132\032.FrameV0Proto.FrameShuffle\022,\n\010frame"
    "_v1\030\007 \001(\0132\032.FrameV1Proto.FrameShuffle*E\n"
    "\021FrameProtoVersion\022\027\n\023FrameProtoVersion_"
    "0\020\000\022\027\n\023FrameProtoVersion_1\020\001", 628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frame.proto", &protobuf_RegisterTypes);
  Frame::default_instance_ = new Frame();
  FrameShuffle::default_instance_ = new FrameShuffle();
  Frame::default_instance_->InitAsDefaultInstance();
  FrameShuffle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_frame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_frame_2eproto {
  StaticDescriptorInitializer_frame_2eproto() {
    protobuf_AddDesc_frame_2eproto();
  }
} static_descriptor_initializer_frame_2eproto_;
const ::google::protobuf::EnumDescriptor* FrameProtoVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameProtoVersion_descriptor_;
}
bool FrameProtoVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Frame::kVersionFieldNumber;
const int Frame::kFrameIdFieldNumber;
const int Frame::kCameraFieldNumber;
const int Frame::kImgFrameFieldNumber;
const int Frame::kProtoVersionFieldNumber;
const int Frame::kFrameV0FieldNumber;
const int Frame::kFrameV1FieldNumber;
#endif  // !_MSC_VER

Frame::Frame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameProtocol.Frame)
}

void Frame::InitAsDefaultInstance() {
  camera_ = const_cast< ::CommonProto::CameraMatrix*>(&::CommonProto::CameraMatrix::default_instance());
  img_frame_ = const_cast< ::CommonProto::Image*>(&::CommonProto::Image::default_instance());
  frame_v0_ = const_cast< ::FrameV0Proto::Frame*>(&::FrameV0Proto::Frame::default_instance());
  frame_v1_ = const_cast< ::FrameV1Proto::Frame*>(&::FrameV1Proto::Frame::default_instance());
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameProtocol.Frame)
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  frame_id_ = 0;
  camera_ = NULL;
  img_frame_ = NULL;
  proto_version_ = 1;
  frame_v0_ = NULL;
  frame_v1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:FrameProtocol.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != default_instance_) {
    delete camera_;
    delete img_frame_;
    delete frame_v0_;
    delete frame_v1_;
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New() const {
  return new Frame;
}

void Frame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Frame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(version_, frame_id_);
    if (has_camera()) {
      if (camera_ != NULL) camera_->::CommonProto::CameraMatrix::Clear();
    }
    if (has_img_frame()) {
      if (img_frame_ != NULL) img_frame_->::CommonProto::Image::Clear();
    }
    proto_version_ = 1;
    if (has_frame_v0()) {
      if (frame_v0_ != NULL) frame_v0_->::FrameV0Proto::Frame::Clear();
    }
    if (has_frame_v1()) {
      if (frame_v1_ != NULL) frame_v1_->::FrameV1Proto::Frame::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameProtocol.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_id;
        break;
      }

      // required int32 frame_id = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_camera;
        break;
      }

      // optional .CommonProto.CameraMatrix camera = 3;
      case 3: {
        if (tag == 26) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img_frame;
        break;
      }

      // optional .CommonProto.Image img_frame = 4;
      case 4: {
        if (tag == 34) {
         parse_img_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_proto_version;
        break;
      }

      // optional int32 proto_version = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_proto_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proto_version_)));
          set_has_proto_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frame_v0;
        break;
      }

      // optional .FrameV0Proto.Frame frame_v0 = 6;
      case 6: {
        if (tag == 50) {
         parse_frame_v0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_v0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_frame_v1;
        break;
      }

      // optional .FrameV1Proto.Frame frame_v1 = 7;
      case 7: {
        if (tag == 58) {
         parse_frame_v1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_v1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameProtocol.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameProtocol.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameProtocol.Frame)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_id(), output);
  }

  // optional .CommonProto.CameraMatrix camera = 3;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camera(), output);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->img_frame(), output);
  }

  // optional int32 proto_version = 5 [default = 1];
  if (has_proto_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->proto_version(), output);
  }

  // optional .FrameV0Proto.Frame frame_v0 = 6;
  if (has_frame_v0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frame_v0(), output);
  }

  // optional .FrameV1Proto.Frame frame_v1 = 7;
  if (has_frame_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->frame_v1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameProtocol.Frame)
}

::google::protobuf::uint8* Frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameProtocol.Frame)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_id(), target);
  }

  // optional .CommonProto.CameraMatrix camera = 3;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camera(), target);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->img_frame(), target);
  }

  // optional int32 proto_version = 5 [default = 1];
  if (has_proto_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->proto_version(), target);
  }

  // optional .FrameV0Proto.Frame frame_v0 = 6;
  if (has_frame_v0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frame_v0(), target);
  }

  // optional .FrameV1Proto.Frame frame_v1 = 7;
  if (has_frame_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->frame_v1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameProtocol.Frame)
  return target;
}

int Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required int32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }

    // optional .CommonProto.CameraMatrix camera = 3;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

    // optional .CommonProto.Image img_frame = 4;
    if (has_img_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img_frame());
    }

    // optional int32 proto_version = 5 [default = 1];
    if (has_proto_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proto_version());
    }

    // optional .FrameV0Proto.Frame frame_v0 = 6;
    if (has_frame_v0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_v0());
    }

    // optional .FrameV1Proto.Frame frame_v1 = 7;
    if (has_frame_v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_v1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_camera()) {
      mutable_camera()->::CommonProto::CameraMatrix::MergeFrom(from.camera());
    }
    if (from.has_img_frame()) {
      mutable_img_frame()->::CommonProto::Image::MergeFrom(from.img_frame());
    }
    if (from.has_proto_version()) {
      set_proto_version(from.proto_version());
    }
    if (from.has_frame_v0()) {
      mutable_frame_v0()->::FrameV0Proto::Frame::MergeFrom(from.frame_v0());
    }
    if (from.has_frame_v1()) {
      mutable_frame_v1()->::FrameV1Proto::Frame::MergeFrom(from.frame_v1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_img_frame()) {
    if (!this->img_frame().IsInitialized()) return false;
  }
  if (has_frame_v0()) {
    if (!this->frame_v0().IsInitialized()) return false;
  }
  if (has_frame_v1()) {
    if (!this->frame_v1().IsInitialized()) return false;
  }
  return true;
}

void Frame::Swap(Frame* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(camera_, other->camera_);
    std::swap(img_frame_, other->img_frame_);
    std::swap(proto_version_, other->proto_version_);
    std::swap(frame_v0_, other->frame_v0_);
    std::swap(frame_v1_, other->frame_v1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameShuffle::kVersionFieldNumber;
const int FrameShuffle::kFrameIdFieldNumber;
const int FrameShuffle::kCameraFieldNumber;
const int FrameShuffle::kImgFrameFieldNumber;
const int FrameShuffle::kProtoVersionFieldNumber;
const int FrameShuffle::kFrameV0FieldNumber;
const int FrameShuffle::kFrameV1FieldNumber;
#endif  // !_MSC_VER

FrameShuffle::FrameShuffle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameProtocol.FrameShuffle)
}

void FrameShuffle::InitAsDefaultInstance() {
  camera_ = const_cast< ::CommonProto::CameraMatrix*>(&::CommonProto::CameraMatrix::default_instance());
  img_frame_ = const_cast< ::CommonProto::Image*>(&::CommonProto::Image::default_instance());
  frame_v0_ = const_cast< ::FrameV0Proto::FrameShuffle*>(&::FrameV0Proto::FrameShuffle::default_instance());
  frame_v1_ = const_cast< ::FrameV1Proto::FrameShuffle*>(&::FrameV1Proto::FrameShuffle::default_instance());
}

FrameShuffle::FrameShuffle(const FrameShuffle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrameProtocol.FrameShuffle)
}

void FrameShuffle::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  frame_id_ = 0;
  camera_ = NULL;
  img_frame_ = NULL;
  proto_version_ = 1;
  frame_v0_ = NULL;
  frame_v1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameShuffle::~FrameShuffle() {
  // @@protoc_insertion_point(destructor:FrameProtocol.FrameShuffle)
  SharedDtor();
}

void FrameShuffle::SharedDtor() {
  if (this != default_instance_) {
    delete camera_;
    delete img_frame_;
    delete frame_v0_;
    delete frame_v1_;
  }
}

void FrameShuffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameShuffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameShuffle_descriptor_;
}

const FrameShuffle& FrameShuffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frame_2eproto();
  return *default_instance_;
}

FrameShuffle* FrameShuffle::default_instance_ = NULL;

FrameShuffle* FrameShuffle::New() const {
  return new FrameShuffle;
}

void FrameShuffle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrameShuffle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(version_, frame_id_);
    if (has_camera()) {
      if (camera_ != NULL) camera_->::CommonProto::CameraMatrix::Clear();
    }
    if (has_img_frame()) {
      if (img_frame_ != NULL) img_frame_->::CommonProto::Image::Clear();
    }
    proto_version_ = 1;
    if (has_frame_v0()) {
      if (frame_v0_ != NULL) frame_v0_->::FrameV0Proto::FrameShuffle::Clear();
    }
    if (has_frame_v1()) {
      if (frame_v1_ != NULL) frame_v1_->::FrameV1Proto::FrameShuffle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameShuffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameProtocol.FrameShuffle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_id;
        break;
      }

      // required int32 frame_id = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_camera;
        break;
      }

      // optional .CommonProto.CameraMatrix camera = 3;
      case 3: {
        if (tag == 26) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img_frame;
        break;
      }

      // optional .CommonProto.Image img_frame = 4;
      case 4: {
        if (tag == 34) {
         parse_img_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_proto_version;
        break;
      }

      // optional int32 proto_version = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_proto_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proto_version_)));
          set_has_proto_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frame_v0;
        break;
      }

      // optional .FrameV0Proto.FrameShuffle frame_v0 = 6;
      case 6: {
        if (tag == 50) {
         parse_frame_v0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_v0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_frame_v1;
        break;
      }

      // optional .FrameV1Proto.FrameShuffle frame_v1 = 7;
      case 7: {
        if (tag == 58) {
         parse_frame_v1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_v1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameProtocol.FrameShuffle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameProtocol.FrameShuffle)
  return false;
#undef DO_
}

void FrameShuffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameProtocol.FrameShuffle)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_id(), output);
  }

  // optional .CommonProto.CameraMatrix camera = 3;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camera(), output);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->img_frame(), output);
  }

  // optional int32 proto_version = 5 [default = 1];
  if (has_proto_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->proto_version(), output);
  }

  // optional .FrameV0Proto.FrameShuffle frame_v0 = 6;
  if (has_frame_v0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frame_v0(), output);
  }

  // optional .FrameV1Proto.FrameShuffle frame_v1 = 7;
  if (has_frame_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->frame_v1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FrameProtocol.FrameShuffle)
}

::google::protobuf::uint8* FrameShuffle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameProtocol.FrameShuffle)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_id(), target);
  }

  // optional .CommonProto.CameraMatrix camera = 3;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camera(), target);
  }

  // optional .CommonProto.Image img_frame = 4;
  if (has_img_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->img_frame(), target);
  }

  // optional int32 proto_version = 5 [default = 1];
  if (has_proto_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->proto_version(), target);
  }

  // optional .FrameV0Proto.FrameShuffle frame_v0 = 6;
  if (has_frame_v0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frame_v0(), target);
  }

  // optional .FrameV1Proto.FrameShuffle frame_v1 = 7;
  if (has_frame_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->frame_v1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameProtocol.FrameShuffle)
  return target;
}

int FrameShuffle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required int32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }

    // optional .CommonProto.CameraMatrix camera = 3;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

    // optional .CommonProto.Image img_frame = 4;
    if (has_img_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img_frame());
    }

    // optional int32 proto_version = 5 [default = 1];
    if (has_proto_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proto_version());
    }

    // optional .FrameV0Proto.FrameShuffle frame_v0 = 6;
    if (has_frame_v0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_v0());
    }

    // optional .FrameV1Proto.FrameShuffle frame_v1 = 7;
    if (has_frame_v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_v1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameShuffle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameShuffle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameShuffle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameShuffle::MergeFrom(const FrameShuffle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_camera()) {
      mutable_camera()->::CommonProto::CameraMatrix::MergeFrom(from.camera());
    }
    if (from.has_img_frame()) {
      mutable_img_frame()->::CommonProto::Image::MergeFrom(from.img_frame());
    }
    if (from.has_proto_version()) {
      set_proto_version(from.proto_version());
    }
    if (from.has_frame_v0()) {
      mutable_frame_v0()->::FrameV0Proto::FrameShuffle::MergeFrom(from.frame_v0());
    }
    if (from.has_frame_v1()) {
      mutable_frame_v1()->::FrameV1Proto::FrameShuffle::MergeFrom(from.frame_v1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameShuffle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameShuffle::CopyFrom(const FrameShuffle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameShuffle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_img_frame()) {
    if (!this->img_frame().IsInitialized()) return false;
  }
  if (has_frame_v0()) {
    if (!this->frame_v0().IsInitialized()) return false;
  }
  if (has_frame_v1()) {
    if (!this->frame_v1().IsInitialized()) return false;
  }
  return true;
}

void FrameShuffle::Swap(FrameShuffle* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(camera_, other->camera_);
    std::swap(img_frame_, other->img_frame_);
    std::swap(proto_version_, other->proto_version_);
    std::swap(frame_v0_, other->frame_v0_);
    std::swap(frame_v1_, other->frame_v1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameShuffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameShuffle_descriptor_;
  metadata.reflection = FrameShuffle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FrameProtocol

// @@protoc_insertion_point(global_scope)
