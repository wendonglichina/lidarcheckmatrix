// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.v1.proto

#ifndef PROTOBUF_frame_2ev1_2eproto__INCLUDED
#define PROTOBUF_frame_2ev1_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "can.pb.h"
#include "sensor.pb.h"
// @@protoc_insertion_point(includes)

namespace FrameV1Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_frame_2ev1_2eproto();
void protobuf_AssignDesc_frame_2ev1_2eproto();
void protobuf_ShutdownFile_frame_2ev1_2eproto();

class Box3DResult;
class SensorFrame;
class StructurePerception;
class Frame;
class FrameShuffle;

// ===================================================================

class Box3DResult : public ::google::protobuf::Message {
 public:
  Box3DResult();
  virtual ~Box3DResult();

  Box3DResult(const Box3DResult& from);

  inline Box3DResult& operator=(const Box3DResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box3DResult& default_instance();

  void Swap(Box3DResult* other);

  // implements Message ----------------------------------------------

  Box3DResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box3DResult& from);
  void MergeFrom(const Box3DResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .CommonProto.Box3D box = 2;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 2;
  inline const ::CommonProto::Box3D& box() const;
  inline ::CommonProto::Box3D* mutable_box();
  inline ::CommonProto::Box3D* release_box();
  inline void set_allocated_box(::CommonProto::Box3D* box);

  // @@protoc_insertion_point(class_scope:FrameV1Proto.Box3DResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_box();
  inline void clear_has_box();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonProto::Box3D* box_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_frame_2ev1_2eproto();
  friend void protobuf_AssignDesc_frame_2ev1_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev1_2eproto();

  void InitAsDefaultInstance();
  static Box3DResult* default_instance_;
};
// -------------------------------------------------------------------

class SensorFrame : public ::google::protobuf::Message {
 public:
  SensorFrame();
  virtual ~SensorFrame();

  SensorFrame(const SensorFrame& from);

  inline SensorFrame& operator=(const SensorFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorFrame& default_instance();

  void Swap(SensorFrame* other);

  // implements Message ----------------------------------------------

  SensorFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorFrame& from);
  void MergeFrom(const SensorFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CANProto.CANFrameRaw can_frames_raw = 1;
  inline int can_frames_raw_size() const;
  inline void clear_can_frames_raw();
  static const int kCanFramesRawFieldNumber = 1;
  inline const ::CANProto::CANFrameRaw& can_frames_raw(int index) const;
  inline ::CANProto::CANFrameRaw* mutable_can_frames_raw(int index);
  inline ::CANProto::CANFrameRaw* add_can_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >&
      can_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >*
      mutable_can_frames_raw();

  // optional .CANProto.CANFrame can_frames = 2;
  inline bool has_can_frames() const;
  inline void clear_can_frames();
  static const int kCanFramesFieldNumber = 2;
  inline const ::CANProto::CANFrame& can_frames() const;
  inline ::CANProto::CANFrame* mutable_can_frames();
  inline ::CANProto::CANFrame* release_can_frames();
  inline void set_allocated_can_frames(::CANProto::CANFrame* can_frames);

  // repeated .SensorProto.IMUFrame imu_frames_raw = 11;
  inline int imu_frames_raw_size() const;
  inline void clear_imu_frames_raw();
  static const int kImuFramesRawFieldNumber = 11;
  inline const ::SensorProto::IMUFrame& imu_frames_raw(int index) const;
  inline ::SensorProto::IMUFrame* mutable_imu_frames_raw(int index);
  inline ::SensorProto::IMUFrame* add_imu_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >&
      imu_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >*
      mutable_imu_frames_raw();

  // optional .SensorProto.IMUFrame imu_frame = 12;
  inline bool has_imu_frame() const;
  inline void clear_imu_frame();
  static const int kImuFrameFieldNumber = 12;
  inline const ::SensorProto::IMUFrame& imu_frame() const;
  inline ::SensorProto::IMUFrame* mutable_imu_frame();
  inline ::SensorProto::IMUFrame* release_imu_frame();
  inline void set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame);

  // optional .SensorProto.IMUFrame imu_offset = 13;
  inline bool has_imu_offset() const;
  inline void clear_imu_offset();
  static const int kImuOffsetFieldNumber = 13;
  inline const ::SensorProto::IMUFrame& imu_offset() const;
  inline ::SensorProto::IMUFrame* mutable_imu_offset();
  inline ::SensorProto::IMUFrame* release_imu_offset();
  inline void set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset);

  // repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
  inline int gps_frames_raw_size() const;
  inline void clear_gps_frames_raw();
  static const int kGpsFramesRawFieldNumber = 21;
  inline const ::SensorProto::GPSFrameRaw& gps_frames_raw(int index) const;
  inline ::SensorProto::GPSFrameRaw* mutable_gps_frames_raw(int index);
  inline ::SensorProto::GPSFrameRaw* add_gps_frames_raw();
  inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
      gps_frames_raw() const;
  inline ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
      mutable_gps_frames_raw();

  // optional .SensorProto.GPSFrame gps_frame = 22;
  inline bool has_gps_frame() const;
  inline void clear_gps_frame();
  static const int kGpsFrameFieldNumber = 22;
  inline const ::SensorProto::GPSFrame& gps_frame() const;
  inline ::SensorProto::GPSFrame* mutable_gps_frame();
  inline ::SensorProto::GPSFrame* release_gps_frame();
  inline void set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame);

  // @@protoc_insertion_point(class_scope:FrameV1Proto.SensorFrame)
 private:
  inline void set_has_can_frames();
  inline void clear_has_can_frames();
  inline void set_has_imu_frame();
  inline void clear_has_imu_frame();
  inline void set_has_imu_offset();
  inline void clear_has_imu_offset();
  inline void set_has_gps_frame();
  inline void clear_has_gps_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw > can_frames_raw_;
  ::CANProto::CANFrame* can_frames_;
  ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame > imu_frames_raw_;
  ::SensorProto::IMUFrame* imu_frame_;
  ::SensorProto::IMUFrame* imu_offset_;
  ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw > gps_frames_raw_;
  ::SensorProto::GPSFrame* gps_frame_;
  friend void  protobuf_AddDesc_frame_2ev1_2eproto();
  friend void protobuf_AssignDesc_frame_2ev1_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev1_2eproto();

  void InitAsDefaultInstance();
  static SensorFrame* default_instance_;
};
// -------------------------------------------------------------------

class StructurePerception : public ::google::protobuf::Message {
 public:
  StructurePerception();
  virtual ~StructurePerception();

  StructurePerception(const StructurePerception& from);

  inline StructurePerception& operator=(const StructurePerception& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StructurePerception& default_instance();

  void Swap(StructurePerception* other);

  // implements Message ----------------------------------------------

  StructurePerception* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StructurePerception& from);
  void MergeFrom(const StructurePerception& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
  inline int obstacles_raws_size() const;
  inline void clear_obstacles_raws();
  static const int kObstaclesRawsFieldNumber = 1;
  inline const ::CommonProto::ObstacleRaws& obstacles_raws(int index) const;
  inline ::CommonProto::ObstacleRaws* mutable_obstacles_raws(int index);
  inline ::CommonProto::ObstacleRaws* add_obstacles_raws();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaws >&
      obstacles_raws() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaws >*
      mutable_obstacles_raws();

  // repeated .CommonProto.Box3DRaws boxes_3d_raws = 2;
  inline int boxes_3d_raws_size() const;
  inline void clear_boxes_3d_raws();
  static const int kBoxes3DRawsFieldNumber = 2;
  inline const ::CommonProto::Box3DRaws& boxes_3d_raws(int index) const;
  inline ::CommonProto::Box3DRaws* mutable_boxes_3d_raws(int index);
  inline ::CommonProto::Box3DRaws* add_boxes_3d_raws();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaws >&
      boxes_3d_raws() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaws >*
      mutable_boxes_3d_raws();

  // repeated .CommonProto.SkeletonRaws skeletons_raws = 3;
  inline int skeletons_raws_size() const;
  inline void clear_skeletons_raws();
  static const int kSkeletonsRawsFieldNumber = 3;
  inline const ::CommonProto::SkeletonRaws& skeletons_raws(int index) const;
  inline ::CommonProto::SkeletonRaws* mutable_skeletons_raws(int index);
  inline ::CommonProto::SkeletonRaws* add_skeletons_raws();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaws >&
      skeletons_raws() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaws >*
      mutable_skeletons_raws();

  // repeated .CommonProto.Obstacles obstacles = 10;
  inline int obstacles_size() const;
  inline void clear_obstacles();
  static const int kObstaclesFieldNumber = 10;
  inline const ::CommonProto::Obstacles& obstacles(int index) const;
  inline ::CommonProto::Obstacles* mutable_obstacles(int index);
  inline ::CommonProto::Obstacles* add_obstacles();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacles >&
      obstacles() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacles >*
      mutable_obstacles();

  // repeated .CommonProto.Lines lines = 11;
  inline int lines_size() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 11;
  inline const ::CommonProto::Lines& lines(int index) const;
  inline ::CommonProto::Lines* mutable_lines(int index);
  inline ::CommonProto::Lines* add_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Lines >&
      lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Lines >*
      mutable_lines();

  // repeated .CommonProto.Image parsing = 20;
  inline int parsing_size() const;
  inline void clear_parsing();
  static const int kParsingFieldNumber = 20;
  inline const ::CommonProto::Image& parsing(int index) const;
  inline ::CommonProto::Image* mutable_parsing(int index);
  inline ::CommonProto::Image* add_parsing();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
      parsing() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
      mutable_parsing();

  // repeated .CommonProto.Image depth = 21;
  inline int depth_size() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 21;
  inline const ::CommonProto::Image& depth(int index) const;
  inline ::CommonProto::Image* mutable_depth(int index);
  inline ::CommonProto::Image* add_depth();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
      depth() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
      mutable_depth();

  // repeated .CommonProto.ScanPoints scan_pts = 30;
  inline int scan_pts_size() const;
  inline void clear_scan_pts();
  static const int kScanPtsFieldNumber = 30;
  inline const ::CommonProto::ScanPoints& scan_pts(int index) const;
  inline ::CommonProto::ScanPoints* mutable_scan_pts(int index);
  inline ::CommonProto::ScanPoints* add_scan_pts();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ScanPoints >&
      scan_pts() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ScanPoints >*
      mutable_scan_pts();

  // @@protoc_insertion_point(class_scope:FrameV1Proto.StructurePerception)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaws > obstacles_raws_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaws > boxes_3d_raws_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaws > skeletons_raws_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacles > obstacles_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Lines > lines_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Image > parsing_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Image > depth_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::ScanPoints > scan_pts_;
  friend void  protobuf_AddDesc_frame_2ev1_2eproto();
  friend void protobuf_AssignDesc_frame_2ev1_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev1_2eproto();

  void InitAsDefaultInstance();
  static StructurePerception* default_instance_;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  Frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 frame_id = 2;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // repeated .CommonProto.Image image = 3;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 3;
  inline const ::CommonProto::Image& image(int index) const;
  inline ::CommonProto::Image* mutable_image(int index);
  inline ::CommonProto::Image* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
      mutable_image();

  // repeated .CommonProto.CameraParam camera = 4;
  inline int camera_size() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 4;
  inline const ::CommonProto::CameraParam& camera(int index) const;
  inline ::CommonProto::CameraParam* mutable_camera(int index);
  inline ::CommonProto::CameraParam* add_camera();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera();

  // repeated .CommonProto.CameraParam camera_default = 5;
  inline int camera_default_size() const;
  inline void clear_camera_default();
  static const int kCameraDefaultFieldNumber = 5;
  inline const ::CommonProto::CameraParam& camera_default(int index) const;
  inline ::CommonProto::CameraParam* mutable_camera_default(int index);
  inline ::CommonProto::CameraParam* add_camera_default();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera_default() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera_default();

  // repeated .CommonProto.CameraMatrix camera_matrix = 6;
  inline int camera_matrix_size() const;
  inline void clear_camera_matrix();
  static const int kCameraMatrixFieldNumber = 6;
  inline const ::CommonProto::CameraMatrix& camera_matrix(int index) const;
  inline ::CommonProto::CameraMatrix* mutable_camera_matrix(int index);
  inline ::CommonProto::CameraMatrix* add_camera_matrix();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >&
      camera_matrix() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >*
      mutable_camera_matrix();

  // repeated .CommonProto.DataDescriptor data_descriptor = 7;
  inline int data_descriptor_size() const;
  inline void clear_data_descriptor();
  static const int kDataDescriptorFieldNumber = 7;
  inline const ::CommonProto::DataDescriptor& data_descriptor(int index) const;
  inline ::CommonProto::DataDescriptor* mutable_data_descriptor(int index);
  inline ::CommonProto::DataDescriptor* add_data_descriptor();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >&
      data_descriptor() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >*
      mutable_data_descriptor();

  // optional .FrameV1Proto.SensorFrame sensor = 10;
  inline bool has_sensor() const;
  inline void clear_sensor();
  static const int kSensorFieldNumber = 10;
  inline const ::FrameV1Proto::SensorFrame& sensor() const;
  inline ::FrameV1Proto::SensorFrame* mutable_sensor();
  inline ::FrameV1Proto::SensorFrame* release_sensor();
  inline void set_allocated_sensor(::FrameV1Proto::SensorFrame* sensor);

  // optional .CommonProto.MotionFrame motion = 11;
  inline bool has_motion() const;
  inline void clear_motion();
  static const int kMotionFieldNumber = 11;
  inline const ::CommonProto::MotionFrame& motion() const;
  inline ::CommonProto::MotionFrame* mutable_motion();
  inline ::CommonProto::MotionFrame* release_motion();
  inline void set_allocated_motion(::CommonProto::MotionFrame* motion);

  // optional .CommonProto.OdometryFrame odometry = 12;
  inline bool has_odometry() const;
  inline void clear_odometry();
  static const int kOdometryFieldNumber = 12;
  inline const ::CommonProto::OdometryFrame& odometry() const;
  inline ::CommonProto::OdometryFrame* mutable_odometry();
  inline ::CommonProto::OdometryFrame* release_odometry();
  inline void set_allocated_odometry(::CommonProto::OdometryFrame* odometry);

  // optional .FrameV1Proto.StructurePerception structure_perception = 21;
  inline bool has_structure_perception() const;
  inline void clear_structure_perception();
  static const int kStructurePerceptionFieldNumber = 21;
  inline const ::FrameV1Proto::StructurePerception& structure_perception() const;
  inline ::FrameV1Proto::StructurePerception* mutable_structure_perception();
  inline ::FrameV1Proto::StructurePerception* release_structure_perception();
  inline void set_allocated_structure_perception(::FrameV1Proto::StructurePerception* structure_perception);

  // repeated .CommonProto.SerializedData extra_info = 101;
  inline int extra_info_size() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 101;
  inline const ::CommonProto::SerializedData& extra_info(int index) const;
  inline ::CommonProto::SerializedData* mutable_extra_info(int index);
  inline ::CommonProto::SerializedData* add_extra_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >&
      extra_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >*
      mutable_extra_info();

  // optional .CommonProto.OnlineCaliStatus online_cali_status = 150;
  inline bool has_online_cali_status() const;
  inline void clear_online_cali_status();
  static const int kOnlineCaliStatusFieldNumber = 150;
  inline const ::CommonProto::OnlineCaliStatus& online_cali_status() const;
  inline ::CommonProto::OnlineCaliStatus* mutable_online_cali_status();
  inline ::CommonProto::OnlineCaliStatus* release_online_cali_status();
  inline void set_allocated_online_cali_status(::CommonProto::OnlineCaliStatus* online_cali_status);

  // @@protoc_insertion_point(class_scope:FrameV1Proto.Frame)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_sensor();
  inline void clear_has_sensor();
  inline void set_has_motion();
  inline void clear_has_motion();
  inline void set_has_odometry();
  inline void clear_has_odometry();
  inline void set_has_structure_perception();
  inline void clear_has_structure_perception();
  inline void set_has_online_cali_status();
  inline void clear_has_online_cali_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 frame_id_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Image > image_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam > camera_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam > camera_default_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix > camera_matrix_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor > data_descriptor_;
  ::FrameV1Proto::SensorFrame* sensor_;
  ::CommonProto::MotionFrame* motion_;
  ::CommonProto::OdometryFrame* odometry_;
  ::FrameV1Proto::StructurePerception* structure_perception_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData > extra_info_;
  ::CommonProto::OnlineCaliStatus* online_cali_status_;
  friend void  protobuf_AddDesc_frame_2ev1_2eproto();
  friend void protobuf_AssignDesc_frame_2ev1_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev1_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// -------------------------------------------------------------------

class FrameShuffle : public ::google::protobuf::Message {
 public:
  FrameShuffle();
  virtual ~FrameShuffle();

  FrameShuffle(const FrameShuffle& from);

  inline FrameShuffle& operator=(const FrameShuffle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameShuffle& default_instance();

  void Swap(FrameShuffle* other);

  // implements Message ----------------------------------------------

  FrameShuffle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameShuffle& from);
  void MergeFrom(const FrameShuffle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required int32 frame_id = 2;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // repeated .CommonProto.Image image = 3;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 3;
  inline const ::CommonProto::Image& image(int index) const;
  inline ::CommonProto::Image* mutable_image(int index);
  inline ::CommonProto::Image* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
      mutable_image();

  // repeated .CommonProto.DataDescriptor data_descriptor = 4;
  inline int data_descriptor_size() const;
  inline void clear_data_descriptor();
  static const int kDataDescriptorFieldNumber = 4;
  inline const ::CommonProto::DataDescriptor& data_descriptor(int index) const;
  inline ::CommonProto::DataDescriptor* mutable_data_descriptor(int index);
  inline ::CommonProto::DataDescriptor* add_data_descriptor();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >&
      data_descriptor() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >*
      mutable_data_descriptor();

  // repeated .CommonProto.CameraParam camera = 10;
  inline int camera_size() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 10;
  inline const ::CommonProto::CameraParam& camera(int index) const;
  inline ::CommonProto::CameraParam* mutable_camera(int index);
  inline ::CommonProto::CameraParam* add_camera();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera();

  // repeated .CommonProto.CameraParam camera_default = 11;
  inline int camera_default_size() const;
  inline void clear_camera_default();
  static const int kCameraDefaultFieldNumber = 11;
  inline const ::CommonProto::CameraParam& camera_default(int index) const;
  inline ::CommonProto::CameraParam* mutable_camera_default(int index);
  inline ::CommonProto::CameraParam* add_camera_default();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
      camera_default() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
      mutable_camera_default();

  // repeated .CommonProto.CameraMatrix camera_matrix = 12;
  inline int camera_matrix_size() const;
  inline void clear_camera_matrix();
  static const int kCameraMatrixFieldNumber = 12;
  inline const ::CommonProto::CameraMatrix& camera_matrix(int index) const;
  inline ::CommonProto::CameraMatrix* mutable_camera_matrix(int index);
  inline ::CommonProto::CameraMatrix* add_camera_matrix();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >&
      camera_matrix() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >*
      mutable_camera_matrix();

  // optional .FrameV1Proto.SensorFrame sensor = 20;
  inline bool has_sensor() const;
  inline void clear_sensor();
  static const int kSensorFieldNumber = 20;
  inline const ::FrameV1Proto::SensorFrame& sensor() const;
  inline ::FrameV1Proto::SensorFrame* mutable_sensor();
  inline ::FrameV1Proto::SensorFrame* release_sensor();
  inline void set_allocated_sensor(::FrameV1Proto::SensorFrame* sensor);

  // optional .CommonProto.MotionFrame motion = 21;
  inline bool has_motion() const;
  inline void clear_motion();
  static const int kMotionFieldNumber = 21;
  inline const ::CommonProto::MotionFrame& motion() const;
  inline ::CommonProto::MotionFrame* mutable_motion();
  inline ::CommonProto::MotionFrame* release_motion();
  inline void set_allocated_motion(::CommonProto::MotionFrame* motion);

  // optional .CommonProto.OdometryFrame odometry = 22;
  inline bool has_odometry() const;
  inline void clear_odometry();
  static const int kOdometryFieldNumber = 22;
  inline const ::CommonProto::OdometryFrame& odometry() const;
  inline ::CommonProto::OdometryFrame* mutable_odometry();
  inline ::CommonProto::OdometryFrame* release_odometry();
  inline void set_allocated_odometry(::CommonProto::OdometryFrame* odometry);

  // optional .FrameV1Proto.StructurePerception structure_perception = 30;
  inline bool has_structure_perception() const;
  inline void clear_structure_perception();
  static const int kStructurePerceptionFieldNumber = 30;
  inline const ::FrameV1Proto::StructurePerception& structure_perception() const;
  inline ::FrameV1Proto::StructurePerception* mutable_structure_perception();
  inline ::FrameV1Proto::StructurePerception* release_structure_perception();
  inline void set_allocated_structure_perception(::FrameV1Proto::StructurePerception* structure_perception);

  // repeated .CommonProto.SerializedData extra_info = 40;
  inline int extra_info_size() const;
  inline void clear_extra_info();
  static const int kExtraInfoFieldNumber = 40;
  inline const ::CommonProto::SerializedData& extra_info(int index) const;
  inline ::CommonProto::SerializedData* mutable_extra_info(int index);
  inline ::CommonProto::SerializedData* add_extra_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >&
      extra_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >*
      mutable_extra_info();

  // required .CommonProto.OnlineCaliStatus online_cali_status = 150;
  inline bool has_online_cali_status() const;
  inline void clear_online_cali_status();
  static const int kOnlineCaliStatusFieldNumber = 150;
  inline const ::CommonProto::OnlineCaliStatus& online_cali_status() const;
  inline ::CommonProto::OnlineCaliStatus* mutable_online_cali_status();
  inline ::CommonProto::OnlineCaliStatus* release_online_cali_status();
  inline void set_allocated_online_cali_status(::CommonProto::OnlineCaliStatus* online_cali_status);

  // @@protoc_insertion_point(class_scope:FrameV1Proto.FrameShuffle)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_sensor();
  inline void clear_has_sensor();
  inline void set_has_motion();
  inline void clear_has_motion();
  inline void set_has_odometry();
  inline void clear_has_odometry();
  inline void set_has_structure_perception();
  inline void clear_has_structure_perception();
  inline void set_has_online_cali_status();
  inline void clear_has_online_cali_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 frame_id_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::Image > image_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor > data_descriptor_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam > camera_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam > camera_default_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix > camera_matrix_;
  ::FrameV1Proto::SensorFrame* sensor_;
  ::CommonProto::MotionFrame* motion_;
  ::CommonProto::OdometryFrame* odometry_;
  ::FrameV1Proto::StructurePerception* structure_perception_;
  ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData > extra_info_;
  ::CommonProto::OnlineCaliStatus* online_cali_status_;
  friend void  protobuf_AddDesc_frame_2ev1_2eproto();
  friend void protobuf_AssignDesc_frame_2ev1_2eproto();
  friend void protobuf_ShutdownFile_frame_2ev1_2eproto();

  void InitAsDefaultInstance();
  static FrameShuffle* default_instance_;
};
// ===================================================================


// ===================================================================

// Box3DResult

// required int32 id = 1;
inline bool Box3DResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Box3DResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Box3DResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Box3DResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Box3DResult::id() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Box3DResult.id)
  return id_;
}
inline void Box3DResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FrameV1Proto.Box3DResult.id)
}

// required .CommonProto.Box3D box = 2;
inline bool Box3DResult::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Box3DResult::set_has_box() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Box3DResult::clear_has_box() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Box3DResult::clear_box() {
  if (box_ != NULL) box_->::CommonProto::Box3D::Clear();
  clear_has_box();
}
inline const ::CommonProto::Box3D& Box3DResult::box() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Box3DResult.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::CommonProto::Box3D* Box3DResult::mutable_box() {
  set_has_box();
  if (box_ == NULL) box_ = new ::CommonProto::Box3D;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Box3DResult.box)
  return box_;
}
inline ::CommonProto::Box3D* Box3DResult::release_box() {
  clear_has_box();
  ::CommonProto::Box3D* temp = box_;
  box_ = NULL;
  return temp;
}
inline void Box3DResult::set_allocated_box(::CommonProto::Box3D* box) {
  delete box_;
  box_ = box;
  if (box) {
    set_has_box();
  } else {
    clear_has_box();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.Box3DResult.box)
}

// -------------------------------------------------------------------

// SensorFrame

// repeated .CANProto.CANFrameRaw can_frames_raw = 1;
inline int SensorFrame::can_frames_raw_size() const {
  return can_frames_raw_.size();
}
inline void SensorFrame::clear_can_frames_raw() {
  can_frames_raw_.Clear();
}
inline const ::CANProto::CANFrameRaw& SensorFrame::can_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.SensorFrame.can_frames_raw)
  return can_frames_raw_.Get(index);
}
inline ::CANProto::CANFrameRaw* SensorFrame::mutable_can_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.SensorFrame.can_frames_raw)
  return can_frames_raw_.Mutable(index);
}
inline ::CANProto::CANFrameRaw* SensorFrame::add_can_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.SensorFrame.can_frames_raw)
  return can_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >&
SensorFrame::can_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.SensorFrame.can_frames_raw)
  return can_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::CANProto::CANFrameRaw >*
SensorFrame::mutable_can_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.SensorFrame.can_frames_raw)
  return &can_frames_raw_;
}

// optional .CANProto.CANFrame can_frames = 2;
inline bool SensorFrame::has_can_frames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorFrame::set_has_can_frames() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorFrame::clear_has_can_frames() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorFrame::clear_can_frames() {
  if (can_frames_ != NULL) can_frames_->::CANProto::CANFrame::Clear();
  clear_has_can_frames();
}
inline const ::CANProto::CANFrame& SensorFrame::can_frames() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.SensorFrame.can_frames)
  return can_frames_ != NULL ? *can_frames_ : *default_instance_->can_frames_;
}
inline ::CANProto::CANFrame* SensorFrame::mutable_can_frames() {
  set_has_can_frames();
  if (can_frames_ == NULL) can_frames_ = new ::CANProto::CANFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.SensorFrame.can_frames)
  return can_frames_;
}
inline ::CANProto::CANFrame* SensorFrame::release_can_frames() {
  clear_has_can_frames();
  ::CANProto::CANFrame* temp = can_frames_;
  can_frames_ = NULL;
  return temp;
}
inline void SensorFrame::set_allocated_can_frames(::CANProto::CANFrame* can_frames) {
  delete can_frames_;
  can_frames_ = can_frames;
  if (can_frames) {
    set_has_can_frames();
  } else {
    clear_has_can_frames();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.SensorFrame.can_frames)
}

// repeated .SensorProto.IMUFrame imu_frames_raw = 11;
inline int SensorFrame::imu_frames_raw_size() const {
  return imu_frames_raw_.size();
}
inline void SensorFrame::clear_imu_frames_raw() {
  imu_frames_raw_.Clear();
}
inline const ::SensorProto::IMUFrame& SensorFrame::imu_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.SensorFrame.imu_frames_raw)
  return imu_frames_raw_.Get(index);
}
inline ::SensorProto::IMUFrame* SensorFrame::mutable_imu_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.SensorFrame.imu_frames_raw)
  return imu_frames_raw_.Mutable(index);
}
inline ::SensorProto::IMUFrame* SensorFrame::add_imu_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.SensorFrame.imu_frames_raw)
  return imu_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >&
SensorFrame::imu_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.SensorFrame.imu_frames_raw)
  return imu_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorProto::IMUFrame >*
SensorFrame::mutable_imu_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.SensorFrame.imu_frames_raw)
  return &imu_frames_raw_;
}

// optional .SensorProto.IMUFrame imu_frame = 12;
inline bool SensorFrame::has_imu_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorFrame::set_has_imu_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorFrame::clear_has_imu_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorFrame::clear_imu_frame() {
  if (imu_frame_ != NULL) imu_frame_->::SensorProto::IMUFrame::Clear();
  clear_has_imu_frame();
}
inline const ::SensorProto::IMUFrame& SensorFrame::imu_frame() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.SensorFrame.imu_frame)
  return imu_frame_ != NULL ? *imu_frame_ : *default_instance_->imu_frame_;
}
inline ::SensorProto::IMUFrame* SensorFrame::mutable_imu_frame() {
  set_has_imu_frame();
  if (imu_frame_ == NULL) imu_frame_ = new ::SensorProto::IMUFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.SensorFrame.imu_frame)
  return imu_frame_;
}
inline ::SensorProto::IMUFrame* SensorFrame::release_imu_frame() {
  clear_has_imu_frame();
  ::SensorProto::IMUFrame* temp = imu_frame_;
  imu_frame_ = NULL;
  return temp;
}
inline void SensorFrame::set_allocated_imu_frame(::SensorProto::IMUFrame* imu_frame) {
  delete imu_frame_;
  imu_frame_ = imu_frame;
  if (imu_frame) {
    set_has_imu_frame();
  } else {
    clear_has_imu_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.SensorFrame.imu_frame)
}

// optional .SensorProto.IMUFrame imu_offset = 13;
inline bool SensorFrame::has_imu_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorFrame::set_has_imu_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorFrame::clear_has_imu_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorFrame::clear_imu_offset() {
  if (imu_offset_ != NULL) imu_offset_->::SensorProto::IMUFrame::Clear();
  clear_has_imu_offset();
}
inline const ::SensorProto::IMUFrame& SensorFrame::imu_offset() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.SensorFrame.imu_offset)
  return imu_offset_ != NULL ? *imu_offset_ : *default_instance_->imu_offset_;
}
inline ::SensorProto::IMUFrame* SensorFrame::mutable_imu_offset() {
  set_has_imu_offset();
  if (imu_offset_ == NULL) imu_offset_ = new ::SensorProto::IMUFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.SensorFrame.imu_offset)
  return imu_offset_;
}
inline ::SensorProto::IMUFrame* SensorFrame::release_imu_offset() {
  clear_has_imu_offset();
  ::SensorProto::IMUFrame* temp = imu_offset_;
  imu_offset_ = NULL;
  return temp;
}
inline void SensorFrame::set_allocated_imu_offset(::SensorProto::IMUFrame* imu_offset) {
  delete imu_offset_;
  imu_offset_ = imu_offset;
  if (imu_offset) {
    set_has_imu_offset();
  } else {
    clear_has_imu_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.SensorFrame.imu_offset)
}

// repeated .SensorProto.GPSFrameRaw gps_frames_raw = 21;
inline int SensorFrame::gps_frames_raw_size() const {
  return gps_frames_raw_.size();
}
inline void SensorFrame::clear_gps_frames_raw() {
  gps_frames_raw_.Clear();
}
inline const ::SensorProto::GPSFrameRaw& SensorFrame::gps_frames_raw(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.SensorFrame.gps_frames_raw)
  return gps_frames_raw_.Get(index);
}
inline ::SensorProto::GPSFrameRaw* SensorFrame::mutable_gps_frames_raw(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.SensorFrame.gps_frames_raw)
  return gps_frames_raw_.Mutable(index);
}
inline ::SensorProto::GPSFrameRaw* SensorFrame::add_gps_frames_raw() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.SensorFrame.gps_frames_raw)
  return gps_frames_raw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >&
SensorFrame::gps_frames_raw() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.SensorFrame.gps_frames_raw)
  return gps_frames_raw_;
}
inline ::google::protobuf::RepeatedPtrField< ::SensorProto::GPSFrameRaw >*
SensorFrame::mutable_gps_frames_raw() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.SensorFrame.gps_frames_raw)
  return &gps_frames_raw_;
}

// optional .SensorProto.GPSFrame gps_frame = 22;
inline bool SensorFrame::has_gps_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorFrame::set_has_gps_frame() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorFrame::clear_has_gps_frame() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorFrame::clear_gps_frame() {
  if (gps_frame_ != NULL) gps_frame_->::SensorProto::GPSFrame::Clear();
  clear_has_gps_frame();
}
inline const ::SensorProto::GPSFrame& SensorFrame::gps_frame() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.SensorFrame.gps_frame)
  return gps_frame_ != NULL ? *gps_frame_ : *default_instance_->gps_frame_;
}
inline ::SensorProto::GPSFrame* SensorFrame::mutable_gps_frame() {
  set_has_gps_frame();
  if (gps_frame_ == NULL) gps_frame_ = new ::SensorProto::GPSFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.SensorFrame.gps_frame)
  return gps_frame_;
}
inline ::SensorProto::GPSFrame* SensorFrame::release_gps_frame() {
  clear_has_gps_frame();
  ::SensorProto::GPSFrame* temp = gps_frame_;
  gps_frame_ = NULL;
  return temp;
}
inline void SensorFrame::set_allocated_gps_frame(::SensorProto::GPSFrame* gps_frame) {
  delete gps_frame_;
  gps_frame_ = gps_frame;
  if (gps_frame) {
    set_has_gps_frame();
  } else {
    clear_has_gps_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.SensorFrame.gps_frame)
}

// -------------------------------------------------------------------

// StructurePerception

// repeated .CommonProto.ObstacleRaws obstacles_raws = 1;
inline int StructurePerception::obstacles_raws_size() const {
  return obstacles_raws_.size();
}
inline void StructurePerception::clear_obstacles_raws() {
  obstacles_raws_.Clear();
}
inline const ::CommonProto::ObstacleRaws& StructurePerception::obstacles_raws(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.obstacles_raws)
  return obstacles_raws_.Get(index);
}
inline ::CommonProto::ObstacleRaws* StructurePerception::mutable_obstacles_raws(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.obstacles_raws)
  return obstacles_raws_.Mutable(index);
}
inline ::CommonProto::ObstacleRaws* StructurePerception::add_obstacles_raws() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.obstacles_raws)
  return obstacles_raws_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaws >&
StructurePerception::obstacles_raws() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.obstacles_raws)
  return obstacles_raws_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ObstacleRaws >*
StructurePerception::mutable_obstacles_raws() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.obstacles_raws)
  return &obstacles_raws_;
}

// repeated .CommonProto.Box3DRaws boxes_3d_raws = 2;
inline int StructurePerception::boxes_3d_raws_size() const {
  return boxes_3d_raws_.size();
}
inline void StructurePerception::clear_boxes_3d_raws() {
  boxes_3d_raws_.Clear();
}
inline const ::CommonProto::Box3DRaws& StructurePerception::boxes_3d_raws(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.boxes_3d_raws)
  return boxes_3d_raws_.Get(index);
}
inline ::CommonProto::Box3DRaws* StructurePerception::mutable_boxes_3d_raws(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.boxes_3d_raws)
  return boxes_3d_raws_.Mutable(index);
}
inline ::CommonProto::Box3DRaws* StructurePerception::add_boxes_3d_raws() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.boxes_3d_raws)
  return boxes_3d_raws_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaws >&
StructurePerception::boxes_3d_raws() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.boxes_3d_raws)
  return boxes_3d_raws_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Box3DRaws >*
StructurePerception::mutable_boxes_3d_raws() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.boxes_3d_raws)
  return &boxes_3d_raws_;
}

// repeated .CommonProto.SkeletonRaws skeletons_raws = 3;
inline int StructurePerception::skeletons_raws_size() const {
  return skeletons_raws_.size();
}
inline void StructurePerception::clear_skeletons_raws() {
  skeletons_raws_.Clear();
}
inline const ::CommonProto::SkeletonRaws& StructurePerception::skeletons_raws(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.skeletons_raws)
  return skeletons_raws_.Get(index);
}
inline ::CommonProto::SkeletonRaws* StructurePerception::mutable_skeletons_raws(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.skeletons_raws)
  return skeletons_raws_.Mutable(index);
}
inline ::CommonProto::SkeletonRaws* StructurePerception::add_skeletons_raws() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.skeletons_raws)
  return skeletons_raws_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaws >&
StructurePerception::skeletons_raws() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.skeletons_raws)
  return skeletons_raws_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SkeletonRaws >*
StructurePerception::mutable_skeletons_raws() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.skeletons_raws)
  return &skeletons_raws_;
}

// repeated .CommonProto.Obstacles obstacles = 10;
inline int StructurePerception::obstacles_size() const {
  return obstacles_.size();
}
inline void StructurePerception::clear_obstacles() {
  obstacles_.Clear();
}
inline const ::CommonProto::Obstacles& StructurePerception::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.obstacles)
  return obstacles_.Get(index);
}
inline ::CommonProto::Obstacles* StructurePerception::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.obstacles)
  return obstacles_.Mutable(index);
}
inline ::CommonProto::Obstacles* StructurePerception::add_obstacles() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.obstacles)
  return obstacles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacles >&
StructurePerception::obstacles() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.obstacles)
  return obstacles_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Obstacles >*
StructurePerception::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.obstacles)
  return &obstacles_;
}

// repeated .CommonProto.Lines lines = 11;
inline int StructurePerception::lines_size() const {
  return lines_.size();
}
inline void StructurePerception::clear_lines() {
  lines_.Clear();
}
inline const ::CommonProto::Lines& StructurePerception::lines(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.lines)
  return lines_.Get(index);
}
inline ::CommonProto::Lines* StructurePerception::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.lines)
  return lines_.Mutable(index);
}
inline ::CommonProto::Lines* StructurePerception::add_lines() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.lines)
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Lines >&
StructurePerception::lines() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.lines)
  return lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Lines >*
StructurePerception::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.lines)
  return &lines_;
}

// repeated .CommonProto.Image parsing = 20;
inline int StructurePerception::parsing_size() const {
  return parsing_.size();
}
inline void StructurePerception::clear_parsing() {
  parsing_.Clear();
}
inline const ::CommonProto::Image& StructurePerception::parsing(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.parsing)
  return parsing_.Get(index);
}
inline ::CommonProto::Image* StructurePerception::mutable_parsing(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.parsing)
  return parsing_.Mutable(index);
}
inline ::CommonProto::Image* StructurePerception::add_parsing() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.parsing)
  return parsing_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
StructurePerception::parsing() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.parsing)
  return parsing_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
StructurePerception::mutable_parsing() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.parsing)
  return &parsing_;
}

// repeated .CommonProto.Image depth = 21;
inline int StructurePerception::depth_size() const {
  return depth_.size();
}
inline void StructurePerception::clear_depth() {
  depth_.Clear();
}
inline const ::CommonProto::Image& StructurePerception::depth(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.depth)
  return depth_.Get(index);
}
inline ::CommonProto::Image* StructurePerception::mutable_depth(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.depth)
  return depth_.Mutable(index);
}
inline ::CommonProto::Image* StructurePerception::add_depth() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.depth)
  return depth_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
StructurePerception::depth() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.depth)
  return depth_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
StructurePerception::mutable_depth() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.depth)
  return &depth_;
}

// repeated .CommonProto.ScanPoints scan_pts = 30;
inline int StructurePerception::scan_pts_size() const {
  return scan_pts_.size();
}
inline void StructurePerception::clear_scan_pts() {
  scan_pts_.Clear();
}
inline const ::CommonProto::ScanPoints& StructurePerception::scan_pts(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.StructurePerception.scan_pts)
  return scan_pts_.Get(index);
}
inline ::CommonProto::ScanPoints* StructurePerception::mutable_scan_pts(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.StructurePerception.scan_pts)
  return scan_pts_.Mutable(index);
}
inline ::CommonProto::ScanPoints* StructurePerception::add_scan_pts() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.StructurePerception.scan_pts)
  return scan_pts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::ScanPoints >&
StructurePerception::scan_pts() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.StructurePerception.scan_pts)
  return scan_pts_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::ScanPoints >*
StructurePerception::mutable_scan_pts() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.StructurePerception.scan_pts)
  return &scan_pts_;
}

// -------------------------------------------------------------------

// Frame

// optional int32 version = 1;
inline bool Frame::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Frame::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Frame::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Frame::version() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.version)
  return version_;
}
inline void Frame::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:FrameV1Proto.Frame.version)
}

// optional int32 frame_id = 2;
inline bool Frame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Frame::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Frame::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 Frame::frame_id() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.frame_id)
  return frame_id_;
}
inline void Frame::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:FrameV1Proto.Frame.frame_id)
}

// repeated .CommonProto.Image image = 3;
inline int Frame::image_size() const {
  return image_.size();
}
inline void Frame::clear_image() {
  image_.Clear();
}
inline const ::CommonProto::Image& Frame::image(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.image)
  return image_.Get(index);
}
inline ::CommonProto::Image* Frame::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.image)
  return image_.Mutable(index);
}
inline ::CommonProto::Image* Frame::add_image() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.Frame.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
Frame::image() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.Frame.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
Frame::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.Frame.image)
  return &image_;
}

// repeated .CommonProto.CameraParam camera = 4;
inline int Frame::camera_size() const {
  return camera_.size();
}
inline void Frame::clear_camera() {
  camera_.Clear();
}
inline const ::CommonProto::CameraParam& Frame::camera(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.camera)
  return camera_.Get(index);
}
inline ::CommonProto::CameraParam* Frame::mutable_camera(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.camera)
  return camera_.Mutable(index);
}
inline ::CommonProto::CameraParam* Frame::add_camera() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.Frame.camera)
  return camera_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
Frame::camera() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.Frame.camera)
  return camera_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
Frame::mutable_camera() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.Frame.camera)
  return &camera_;
}

// repeated .CommonProto.CameraParam camera_default = 5;
inline int Frame::camera_default_size() const {
  return camera_default_.size();
}
inline void Frame::clear_camera_default() {
  camera_default_.Clear();
}
inline const ::CommonProto::CameraParam& Frame::camera_default(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.camera_default)
  return camera_default_.Get(index);
}
inline ::CommonProto::CameraParam* Frame::mutable_camera_default(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.camera_default)
  return camera_default_.Mutable(index);
}
inline ::CommonProto::CameraParam* Frame::add_camera_default() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.Frame.camera_default)
  return camera_default_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
Frame::camera_default() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.Frame.camera_default)
  return camera_default_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
Frame::mutable_camera_default() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.Frame.camera_default)
  return &camera_default_;
}

// repeated .CommonProto.CameraMatrix camera_matrix = 6;
inline int Frame::camera_matrix_size() const {
  return camera_matrix_.size();
}
inline void Frame::clear_camera_matrix() {
  camera_matrix_.Clear();
}
inline const ::CommonProto::CameraMatrix& Frame::camera_matrix(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.camera_matrix)
  return camera_matrix_.Get(index);
}
inline ::CommonProto::CameraMatrix* Frame::mutable_camera_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.camera_matrix)
  return camera_matrix_.Mutable(index);
}
inline ::CommonProto::CameraMatrix* Frame::add_camera_matrix() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.Frame.camera_matrix)
  return camera_matrix_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >&
Frame::camera_matrix() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.Frame.camera_matrix)
  return camera_matrix_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >*
Frame::mutable_camera_matrix() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.Frame.camera_matrix)
  return &camera_matrix_;
}

// repeated .CommonProto.DataDescriptor data_descriptor = 7;
inline int Frame::data_descriptor_size() const {
  return data_descriptor_.size();
}
inline void Frame::clear_data_descriptor() {
  data_descriptor_.Clear();
}
inline const ::CommonProto::DataDescriptor& Frame::data_descriptor(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.data_descriptor)
  return data_descriptor_.Get(index);
}
inline ::CommonProto::DataDescriptor* Frame::mutable_data_descriptor(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.data_descriptor)
  return data_descriptor_.Mutable(index);
}
inline ::CommonProto::DataDescriptor* Frame::add_data_descriptor() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.Frame.data_descriptor)
  return data_descriptor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >&
Frame::data_descriptor() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.Frame.data_descriptor)
  return data_descriptor_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >*
Frame::mutable_data_descriptor() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.Frame.data_descriptor)
  return &data_descriptor_;
}

// optional .FrameV1Proto.SensorFrame sensor = 10;
inline bool Frame::has_sensor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Frame::set_has_sensor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Frame::clear_has_sensor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Frame::clear_sensor() {
  if (sensor_ != NULL) sensor_->::FrameV1Proto::SensorFrame::Clear();
  clear_has_sensor();
}
inline const ::FrameV1Proto::SensorFrame& Frame::sensor() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.sensor)
  return sensor_ != NULL ? *sensor_ : *default_instance_->sensor_;
}
inline ::FrameV1Proto::SensorFrame* Frame::mutable_sensor() {
  set_has_sensor();
  if (sensor_ == NULL) sensor_ = new ::FrameV1Proto::SensorFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.sensor)
  return sensor_;
}
inline ::FrameV1Proto::SensorFrame* Frame::release_sensor() {
  clear_has_sensor();
  ::FrameV1Proto::SensorFrame* temp = sensor_;
  sensor_ = NULL;
  return temp;
}
inline void Frame::set_allocated_sensor(::FrameV1Proto::SensorFrame* sensor) {
  delete sensor_;
  sensor_ = sensor;
  if (sensor) {
    set_has_sensor();
  } else {
    clear_has_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.Frame.sensor)
}

// optional .CommonProto.MotionFrame motion = 11;
inline bool Frame::has_motion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Frame::set_has_motion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Frame::clear_has_motion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Frame::clear_motion() {
  if (motion_ != NULL) motion_->::CommonProto::MotionFrame::Clear();
  clear_has_motion();
}
inline const ::CommonProto::MotionFrame& Frame::motion() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.motion)
  return motion_ != NULL ? *motion_ : *default_instance_->motion_;
}
inline ::CommonProto::MotionFrame* Frame::mutable_motion() {
  set_has_motion();
  if (motion_ == NULL) motion_ = new ::CommonProto::MotionFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.motion)
  return motion_;
}
inline ::CommonProto::MotionFrame* Frame::release_motion() {
  clear_has_motion();
  ::CommonProto::MotionFrame* temp = motion_;
  motion_ = NULL;
  return temp;
}
inline void Frame::set_allocated_motion(::CommonProto::MotionFrame* motion) {
  delete motion_;
  motion_ = motion;
  if (motion) {
    set_has_motion();
  } else {
    clear_has_motion();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.Frame.motion)
}

// optional .CommonProto.OdometryFrame odometry = 12;
inline bool Frame::has_odometry() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Frame::set_has_odometry() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Frame::clear_has_odometry() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Frame::clear_odometry() {
  if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
  clear_has_odometry();
}
inline const ::CommonProto::OdometryFrame& Frame::odometry() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.odometry)
  return odometry_ != NULL ? *odometry_ : *default_instance_->odometry_;
}
inline ::CommonProto::OdometryFrame* Frame::mutable_odometry() {
  set_has_odometry();
  if (odometry_ == NULL) odometry_ = new ::CommonProto::OdometryFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.odometry)
  return odometry_;
}
inline ::CommonProto::OdometryFrame* Frame::release_odometry() {
  clear_has_odometry();
  ::CommonProto::OdometryFrame* temp = odometry_;
  odometry_ = NULL;
  return temp;
}
inline void Frame::set_allocated_odometry(::CommonProto::OdometryFrame* odometry) {
  delete odometry_;
  odometry_ = odometry;
  if (odometry) {
    set_has_odometry();
  } else {
    clear_has_odometry();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.Frame.odometry)
}

// optional .FrameV1Proto.StructurePerception structure_perception = 21;
inline bool Frame::has_structure_perception() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Frame::set_has_structure_perception() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Frame::clear_has_structure_perception() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Frame::clear_structure_perception() {
  if (structure_perception_ != NULL) structure_perception_->::FrameV1Proto::StructurePerception::Clear();
  clear_has_structure_perception();
}
inline const ::FrameV1Proto::StructurePerception& Frame::structure_perception() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.structure_perception)
  return structure_perception_ != NULL ? *structure_perception_ : *default_instance_->structure_perception_;
}
inline ::FrameV1Proto::StructurePerception* Frame::mutable_structure_perception() {
  set_has_structure_perception();
  if (structure_perception_ == NULL) structure_perception_ = new ::FrameV1Proto::StructurePerception;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.structure_perception)
  return structure_perception_;
}
inline ::FrameV1Proto::StructurePerception* Frame::release_structure_perception() {
  clear_has_structure_perception();
  ::FrameV1Proto::StructurePerception* temp = structure_perception_;
  structure_perception_ = NULL;
  return temp;
}
inline void Frame::set_allocated_structure_perception(::FrameV1Proto::StructurePerception* structure_perception) {
  delete structure_perception_;
  structure_perception_ = structure_perception;
  if (structure_perception) {
    set_has_structure_perception();
  } else {
    clear_has_structure_perception();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.Frame.structure_perception)
}

// repeated .CommonProto.SerializedData extra_info = 101;
inline int Frame::extra_info_size() const {
  return extra_info_.size();
}
inline void Frame::clear_extra_info() {
  extra_info_.Clear();
}
inline const ::CommonProto::SerializedData& Frame::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.extra_info)
  return extra_info_.Get(index);
}
inline ::CommonProto::SerializedData* Frame::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.extra_info)
  return extra_info_.Mutable(index);
}
inline ::CommonProto::SerializedData* Frame::add_extra_info() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.Frame.extra_info)
  return extra_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >&
Frame::extra_info() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.Frame.extra_info)
  return extra_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >*
Frame::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.Frame.extra_info)
  return &extra_info_;
}

// optional .CommonProto.OnlineCaliStatus online_cali_status = 150;
inline bool Frame::has_online_cali_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Frame::set_has_online_cali_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Frame::clear_has_online_cali_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Frame::clear_online_cali_status() {
  if (online_cali_status_ != NULL) online_cali_status_->::CommonProto::OnlineCaliStatus::Clear();
  clear_has_online_cali_status();
}
inline const ::CommonProto::OnlineCaliStatus& Frame::online_cali_status() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.Frame.online_cali_status)
  return online_cali_status_ != NULL ? *online_cali_status_ : *default_instance_->online_cali_status_;
}
inline ::CommonProto::OnlineCaliStatus* Frame::mutable_online_cali_status() {
  set_has_online_cali_status();
  if (online_cali_status_ == NULL) online_cali_status_ = new ::CommonProto::OnlineCaliStatus;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.Frame.online_cali_status)
  return online_cali_status_;
}
inline ::CommonProto::OnlineCaliStatus* Frame::release_online_cali_status() {
  clear_has_online_cali_status();
  ::CommonProto::OnlineCaliStatus* temp = online_cali_status_;
  online_cali_status_ = NULL;
  return temp;
}
inline void Frame::set_allocated_online_cali_status(::CommonProto::OnlineCaliStatus* online_cali_status) {
  delete online_cali_status_;
  online_cali_status_ = online_cali_status;
  if (online_cali_status) {
    set_has_online_cali_status();
  } else {
    clear_has_online_cali_status();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.Frame.online_cali_status)
}

// -------------------------------------------------------------------

// FrameShuffle

// required int32 version = 1;
inline bool FrameShuffle::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameShuffle::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameShuffle::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameShuffle::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 FrameShuffle::version() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.version)
  return version_;
}
inline void FrameShuffle::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:FrameV1Proto.FrameShuffle.version)
}

// required int32 frame_id = 2;
inline bool FrameShuffle::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameShuffle::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameShuffle::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameShuffle::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 FrameShuffle::frame_id() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.frame_id)
  return frame_id_;
}
inline void FrameShuffle::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:FrameV1Proto.FrameShuffle.frame_id)
}

// repeated .CommonProto.Image image = 3;
inline int FrameShuffle::image_size() const {
  return image_.size();
}
inline void FrameShuffle::clear_image() {
  image_.Clear();
}
inline const ::CommonProto::Image& FrameShuffle::image(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.image)
  return image_.Get(index);
}
inline ::CommonProto::Image* FrameShuffle::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.image)
  return image_.Mutable(index);
}
inline ::CommonProto::Image* FrameShuffle::add_image() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.FrameShuffle.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >&
FrameShuffle::image() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.FrameShuffle.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::Image >*
FrameShuffle::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.FrameShuffle.image)
  return &image_;
}

// repeated .CommonProto.DataDescriptor data_descriptor = 4;
inline int FrameShuffle::data_descriptor_size() const {
  return data_descriptor_.size();
}
inline void FrameShuffle::clear_data_descriptor() {
  data_descriptor_.Clear();
}
inline const ::CommonProto::DataDescriptor& FrameShuffle::data_descriptor(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.data_descriptor)
  return data_descriptor_.Get(index);
}
inline ::CommonProto::DataDescriptor* FrameShuffle::mutable_data_descriptor(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.data_descriptor)
  return data_descriptor_.Mutable(index);
}
inline ::CommonProto::DataDescriptor* FrameShuffle::add_data_descriptor() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.FrameShuffle.data_descriptor)
  return data_descriptor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >&
FrameShuffle::data_descriptor() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.FrameShuffle.data_descriptor)
  return data_descriptor_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::DataDescriptor >*
FrameShuffle::mutable_data_descriptor() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.FrameShuffle.data_descriptor)
  return &data_descriptor_;
}

// repeated .CommonProto.CameraParam camera = 10;
inline int FrameShuffle::camera_size() const {
  return camera_.size();
}
inline void FrameShuffle::clear_camera() {
  camera_.Clear();
}
inline const ::CommonProto::CameraParam& FrameShuffle::camera(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.camera)
  return camera_.Get(index);
}
inline ::CommonProto::CameraParam* FrameShuffle::mutable_camera(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.camera)
  return camera_.Mutable(index);
}
inline ::CommonProto::CameraParam* FrameShuffle::add_camera() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.FrameShuffle.camera)
  return camera_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
FrameShuffle::camera() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.FrameShuffle.camera)
  return camera_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
FrameShuffle::mutable_camera() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.FrameShuffle.camera)
  return &camera_;
}

// repeated .CommonProto.CameraParam camera_default = 11;
inline int FrameShuffle::camera_default_size() const {
  return camera_default_.size();
}
inline void FrameShuffle::clear_camera_default() {
  camera_default_.Clear();
}
inline const ::CommonProto::CameraParam& FrameShuffle::camera_default(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.camera_default)
  return camera_default_.Get(index);
}
inline ::CommonProto::CameraParam* FrameShuffle::mutable_camera_default(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.camera_default)
  return camera_default_.Mutable(index);
}
inline ::CommonProto::CameraParam* FrameShuffle::add_camera_default() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.FrameShuffle.camera_default)
  return camera_default_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >&
FrameShuffle::camera_default() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.FrameShuffle.camera_default)
  return camera_default_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraParam >*
FrameShuffle::mutable_camera_default() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.FrameShuffle.camera_default)
  return &camera_default_;
}

// repeated .CommonProto.CameraMatrix camera_matrix = 12;
inline int FrameShuffle::camera_matrix_size() const {
  return camera_matrix_.size();
}
inline void FrameShuffle::clear_camera_matrix() {
  camera_matrix_.Clear();
}
inline const ::CommonProto::CameraMatrix& FrameShuffle::camera_matrix(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.camera_matrix)
  return camera_matrix_.Get(index);
}
inline ::CommonProto::CameraMatrix* FrameShuffle::mutable_camera_matrix(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.camera_matrix)
  return camera_matrix_.Mutable(index);
}
inline ::CommonProto::CameraMatrix* FrameShuffle::add_camera_matrix() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.FrameShuffle.camera_matrix)
  return camera_matrix_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >&
FrameShuffle::camera_matrix() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.FrameShuffle.camera_matrix)
  return camera_matrix_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::CameraMatrix >*
FrameShuffle::mutable_camera_matrix() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.FrameShuffle.camera_matrix)
  return &camera_matrix_;
}

// optional .FrameV1Proto.SensorFrame sensor = 20;
inline bool FrameShuffle::has_sensor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FrameShuffle::set_has_sensor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FrameShuffle::clear_has_sensor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FrameShuffle::clear_sensor() {
  if (sensor_ != NULL) sensor_->::FrameV1Proto::SensorFrame::Clear();
  clear_has_sensor();
}
inline const ::FrameV1Proto::SensorFrame& FrameShuffle::sensor() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.sensor)
  return sensor_ != NULL ? *sensor_ : *default_instance_->sensor_;
}
inline ::FrameV1Proto::SensorFrame* FrameShuffle::mutable_sensor() {
  set_has_sensor();
  if (sensor_ == NULL) sensor_ = new ::FrameV1Proto::SensorFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.sensor)
  return sensor_;
}
inline ::FrameV1Proto::SensorFrame* FrameShuffle::release_sensor() {
  clear_has_sensor();
  ::FrameV1Proto::SensorFrame* temp = sensor_;
  sensor_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_sensor(::FrameV1Proto::SensorFrame* sensor) {
  delete sensor_;
  sensor_ = sensor;
  if (sensor) {
    set_has_sensor();
  } else {
    clear_has_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.FrameShuffle.sensor)
}

// optional .CommonProto.MotionFrame motion = 21;
inline bool FrameShuffle::has_motion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FrameShuffle::set_has_motion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FrameShuffle::clear_has_motion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FrameShuffle::clear_motion() {
  if (motion_ != NULL) motion_->::CommonProto::MotionFrame::Clear();
  clear_has_motion();
}
inline const ::CommonProto::MotionFrame& FrameShuffle::motion() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.motion)
  return motion_ != NULL ? *motion_ : *default_instance_->motion_;
}
inline ::CommonProto::MotionFrame* FrameShuffle::mutable_motion() {
  set_has_motion();
  if (motion_ == NULL) motion_ = new ::CommonProto::MotionFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.motion)
  return motion_;
}
inline ::CommonProto::MotionFrame* FrameShuffle::release_motion() {
  clear_has_motion();
  ::CommonProto::MotionFrame* temp = motion_;
  motion_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_motion(::CommonProto::MotionFrame* motion) {
  delete motion_;
  motion_ = motion;
  if (motion) {
    set_has_motion();
  } else {
    clear_has_motion();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.FrameShuffle.motion)
}

// optional .CommonProto.OdometryFrame odometry = 22;
inline bool FrameShuffle::has_odometry() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FrameShuffle::set_has_odometry() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FrameShuffle::clear_has_odometry() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FrameShuffle::clear_odometry() {
  if (odometry_ != NULL) odometry_->::CommonProto::OdometryFrame::Clear();
  clear_has_odometry();
}
inline const ::CommonProto::OdometryFrame& FrameShuffle::odometry() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.odometry)
  return odometry_ != NULL ? *odometry_ : *default_instance_->odometry_;
}
inline ::CommonProto::OdometryFrame* FrameShuffle::mutable_odometry() {
  set_has_odometry();
  if (odometry_ == NULL) odometry_ = new ::CommonProto::OdometryFrame;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.odometry)
  return odometry_;
}
inline ::CommonProto::OdometryFrame* FrameShuffle::release_odometry() {
  clear_has_odometry();
  ::CommonProto::OdometryFrame* temp = odometry_;
  odometry_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_odometry(::CommonProto::OdometryFrame* odometry) {
  delete odometry_;
  odometry_ = odometry;
  if (odometry) {
    set_has_odometry();
  } else {
    clear_has_odometry();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.FrameShuffle.odometry)
}

// optional .FrameV1Proto.StructurePerception structure_perception = 30;
inline bool FrameShuffle::has_structure_perception() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FrameShuffle::set_has_structure_perception() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FrameShuffle::clear_has_structure_perception() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FrameShuffle::clear_structure_perception() {
  if (structure_perception_ != NULL) structure_perception_->::FrameV1Proto::StructurePerception::Clear();
  clear_has_structure_perception();
}
inline const ::FrameV1Proto::StructurePerception& FrameShuffle::structure_perception() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.structure_perception)
  return structure_perception_ != NULL ? *structure_perception_ : *default_instance_->structure_perception_;
}
inline ::FrameV1Proto::StructurePerception* FrameShuffle::mutable_structure_perception() {
  set_has_structure_perception();
  if (structure_perception_ == NULL) structure_perception_ = new ::FrameV1Proto::StructurePerception;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.structure_perception)
  return structure_perception_;
}
inline ::FrameV1Proto::StructurePerception* FrameShuffle::release_structure_perception() {
  clear_has_structure_perception();
  ::FrameV1Proto::StructurePerception* temp = structure_perception_;
  structure_perception_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_structure_perception(::FrameV1Proto::StructurePerception* structure_perception) {
  delete structure_perception_;
  structure_perception_ = structure_perception;
  if (structure_perception) {
    set_has_structure_perception();
  } else {
    clear_has_structure_perception();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.FrameShuffle.structure_perception)
}

// repeated .CommonProto.SerializedData extra_info = 40;
inline int FrameShuffle::extra_info_size() const {
  return extra_info_.size();
}
inline void FrameShuffle::clear_extra_info() {
  extra_info_.Clear();
}
inline const ::CommonProto::SerializedData& FrameShuffle::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.extra_info)
  return extra_info_.Get(index);
}
inline ::CommonProto::SerializedData* FrameShuffle::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.extra_info)
  return extra_info_.Mutable(index);
}
inline ::CommonProto::SerializedData* FrameShuffle::add_extra_info() {
  // @@protoc_insertion_point(field_add:FrameV1Proto.FrameShuffle.extra_info)
  return extra_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >&
FrameShuffle::extra_info() const {
  // @@protoc_insertion_point(field_list:FrameV1Proto.FrameShuffle.extra_info)
  return extra_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonProto::SerializedData >*
FrameShuffle::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:FrameV1Proto.FrameShuffle.extra_info)
  return &extra_info_;
}

// required .CommonProto.OnlineCaliStatus online_cali_status = 150;
inline bool FrameShuffle::has_online_cali_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FrameShuffle::set_has_online_cali_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FrameShuffle::clear_has_online_cali_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FrameShuffle::clear_online_cali_status() {
  if (online_cali_status_ != NULL) online_cali_status_->::CommonProto::OnlineCaliStatus::Clear();
  clear_has_online_cali_status();
}
inline const ::CommonProto::OnlineCaliStatus& FrameShuffle::online_cali_status() const {
  // @@protoc_insertion_point(field_get:FrameV1Proto.FrameShuffle.online_cali_status)
  return online_cali_status_ != NULL ? *online_cali_status_ : *default_instance_->online_cali_status_;
}
inline ::CommonProto::OnlineCaliStatus* FrameShuffle::mutable_online_cali_status() {
  set_has_online_cali_status();
  if (online_cali_status_ == NULL) online_cali_status_ = new ::CommonProto::OnlineCaliStatus;
  // @@protoc_insertion_point(field_mutable:FrameV1Proto.FrameShuffle.online_cali_status)
  return online_cali_status_;
}
inline ::CommonProto::OnlineCaliStatus* FrameShuffle::release_online_cali_status() {
  clear_has_online_cali_status();
  ::CommonProto::OnlineCaliStatus* temp = online_cali_status_;
  online_cali_status_ = NULL;
  return temp;
}
inline void FrameShuffle::set_allocated_online_cali_status(::CommonProto::OnlineCaliStatus* online_cali_status) {
  delete online_cali_status_;
  online_cali_status_ = online_cali_status;
  if (online_cali_status) {
    set_has_online_cali_status();
  } else {
    clear_has_online_cali_status();
  }
  // @@protoc_insertion_point(field_set_allocated:FrameV1Proto.FrameShuffle.online_cali_status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FrameV1Proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_frame_2ev1_2eproto__INCLUDED
