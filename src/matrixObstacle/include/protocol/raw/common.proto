// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials

// [START declaration]
syntax = "proto2";
package CommonProto;
// [END declaration]

// [START messages]

message Point {
  required float x = 1;
  required float y = 2;
  optional float z = 3;
}

message PointI {
  required int32 x = 1;
  required int32 y = 2;
  optional int32 z = 3;
}

message Contour {
  repeated Point pts = 1;
}

message Polygon {
  repeated Point pts = 1;
}

message Rect {
  required float left = 1;
  required float top = 2;
  required float right = 3;
  required float bottom = 4;
}

// oriented bounding box
message OBBox2D {
  required Point corner = 1;
  repeated Point axes_pts = 2;  // 2 points(plus corner) to describe obb
  repeated float size = 3;      // relative "sizes" of axes  
}

message Box3D {
  required Point lower_lt = 1;
  required Point lower_lb = 2;
  required Point lower_rb = 3;
  required Point lower_rt = 4;
  required Point upper_lt = 5;
  required Point upper_lb = 6;
  required Point upper_rb = 7;
  required Point upper_rt = 8;
}

enum SkeletonType {
  SkeletonType_nose = 0;
  SkeletonType_left_eye = 1;
  SkeletonType_right_eye = 2;
  SkeletonType_left_ear = 3;
  SkeletonType_right_ear = 4;
  SkeletonType_left_shoulder = 5;
  SkeletonType_right_shoulder = 6;
  SkeletonType_left_elbow = 7;
  SkeletonType_right_elbow = 8;
  SkeletonType_left_wrist = 9;
  SkeletonType_right_wrist = 10;
  SkeletonType_left_hip = 11;
  SkeletonType_right_hip = 12;
  SkeletonType_left_knee = 13;
  SkeletonType_right_knee = 14;
  SkeletonType_left_ankle = 15;
  SkeletonType_right_ankle = 16;
}

message SkeletonPoint {
  required Point pt = 1;
  required int32 valid = 2;
}

enum ImageFormat{
  GRAY = 0;
  YV12 = 1;
  JPEG = 2;
  PNG = 3;
  CR12 = 4;
  BAD = 5;
  NV12 = 6;
  NV21 = 7;
  TIMEOUT = 8;
}

enum ParsingFormat {
  ParsingFormat_Raw = 0;
  ParsingFormat_Label = 1;
}

enum IPMSelect{
  NINETY_DISTANT    = 0;
  FORTY_DISTANT     = 1;
  FORTY_HALF_WIDTH  = 2;
  TWENTY_DISTANT    = 3;
}

message Image {
  required int32 width = 1;
  required int32 height = 2;
  required int32 channel = 3;
  optional int64 time_stamp = 4;
  optional int32 send_mode = 5;
  optional int32 format = 6;
  optional int32 index = 7;
  optional int32 count = 8;
  optional int32 depth = 9;
  optional int32 align = 10;
}

message Velocity {
  required float vx = 1;
  required float vy = 2;
  optional float vz = 3;
}

enum LineType {
  LINE_RAW = 0;     // perception line
  LINE_LEFT = 1;    // Road Model Left
  LINE_RIGHT = 2;   // Road Model Right
  LINE_LEFT_LEFT = 4;    // Road Model Left Left
  LINE_RIGHT_RIGHT = 8;  // Road Model Right Right

  LINE_DASH = 1024;     // Property Dash
  LINE_SOLID = 2048;    // Property Solid

  LINE_WHITE = 4096;    // Color White
  LINE_YELLOW = 8192;   // Color Yellow
  LINE_BLUE = 16384;    // Color Blue

  LINE_FENCE = 65536;   // 1 << 16, for fence
                        // and road boundary(side walk, Terran, etc)
}

// each line is in form of quadratic equation
// that is, x = coeffs[0] + y * coeff[1] + y^2 * coeff[2] + y^3 * coeff[3]
// in other word, x = (Intercept = coeffs[0])
//                  + (Slop = coeffs[1]) * y
//                  + (Curvature = coeffs[2] / 2) * y^2
//                  + (curvature Variation = coeffs[3] / 6) * y^3
// and, radius of curvrature at y(0) = ((1 + Slop^2)^(3/2)) / fabs(Curvature)

message Line {
  required int32 id = 1;
  optional int32 life_time = 3;
  // coeffs is parameter of quadratic equation
  repeated float coeffs = 7;
  enum EndPointType{
    EndPointType_Far = 0;
    EndPointType_Near = 1;
  }
  // end_points is lane's start and end points
  repeated Point end_points = 8;
  optional int32 type = 9;   // LineType
  optional int32 source = 10;  // source is reserved
  repeated Contour contours = 11;   // will be Deprecated
  optional float dist_to_front_wheel = 12;
  optional float width = 13;
}

message Lines {
  optional int32 cam_id = 1;
  repeated Line lines = 2;
}

enum ObstacleType{
  ObstacleType_VehicleRear = 0;
  ObstacleType_VehicleFull = 1;
  ObstacleType_Pedestrian = 2;
  ObstacleType_TrafficSign = 3;
  ObstacleType_TrafficLight = 4;
  ObstacleType_ParkingSlot = 5;
  ObstacleType_RoadSign = 6;
  ObstacleType_CrosswalkLine = 7;
  ObstacleType_TrafficArrow = 8;
  ObstacleType_TrafficCone = 9;
  ObstacleType_Barrel = 10;
  ObstacleType_YieldMark = 11;
  ObstacleType_SpeedMark = 12;
  ObstacleType_Character = 13;
}

enum ParkingSlotStatus {
  ParkingSlotStatus_Occupied = 0;
  ParkingSlotStatus_Free = 1;
}

message WorldSpaceInfo {
  optional float yaw = 1;         // rad
  optional Velocity vel = 2;      // m/s
  optional float length = 3;      // m
  optional float width = 4;       // m
  optional float height = 5;      // m
  optional Polygon poly = 6;      // polygon points
  optional Point position = 7;    // position in vcs
  optional int32 traversable = 8;
  optional float hmw = 9;
  optional float ttc = 10;
  optional int32 curr_lane = 11;
}

message ImageSpaceInfo {
  optional Rect rect = 1;
  
  optional Skeleton skeleton = 10;
  optional Box3D box = 11;
}

message Obstacle {
  required int32 id = 1;
  required int32 type = 2;      // ObstacleType
  optional int32 conf = 3;       // confidence, 0~100
  optional int32 life_time = 4; // ms
  optional int32 age = 5;       // frame count
  
  optional ImageSpaceInfo img_info = 6;
  optional WorldSpaceInfo world_info = 7;
  repeated int32 property = 13; // e.g. traffic light/sign properties(light status/sign types)
  repeated string property_name = 14;
}

message Obstacles {
  optional int32 cam_id = 1;
  repeated Obstacle obstacle = 2;
  optional float conf_scale = 3 [default = 0.1];  // confidence value scale factor
}

enum ObstacleRawModelType {
  ObstacleRawModel_Car = 0;
  ObstacleRawModel_FullCar = 1;
  ObstacleRawModel_Ped = 2;
  ObstacleRawModel_Head = 3;
  ObstacleRawModel_Rare = 4;
  ObstacleRawModel_TrafficSign = 5;
  ObstacleRawModel_TrafficLight = 6;
  ObstacleRawModel_Lane = 7;
  ObstacleRawModel_RoadSign = 10;
  ObstacleRawModel_TrafficArrow = 11;
  ObstacleRawModel_YieldMark = 12;
  ObstacleRawModel_TrafficCone = 13;
  ObstacleRawModel_Barrel = 14;
  ObstacleRawModel_SpeedMark = 15;
}

message FeatureMap {
  required bytes data = 1;
}

message ObstacleRaw {
  required Rect rect = 1;
  required float conf = 2;
  required int32 model = 3;
  optional int32 source = 4;
  repeated FeatureMap fmap = 5;
  repeated int32 property = 6;
  repeated string property_name = 7;
}
message ObstacleRaws {
  optional int32 cam_id = 1;
  repeated ObstacleRaw obstacle = 2;
  optional float conf_scale = 3 [default = 0.1];  // confidence value scale factor
}

enum LanePosition {
  LANE_POSITION_CENTER = 0;
  LANE_POSITION_LEFT = 1;  
  LANE_POSITION_RIGHT = 2;
}

enum LaneType {
  LANE_TYPE_UNKNOWN = 0;
  LANE_TYPE_STRAIGHT = 1;
  LANE_TYPE_TURN_LEFT = 2;  
  LANE_TYPE_TURN_RIGHT = 4;
  LANE_TYPE_TURN_ROUND = 8;
}

message Lane {
  required int32 id = 1;
  required int32 width = 2;
  required Line center_line = 3;
  required int32 pos = 4;
  optional int32 type = 5;
  optional int32 speed_min = 6;
  optional int32 speed_max = 7;
  optional int32 nearest_obstacle_id = 8;
}

// for free space in ground space
enum ParsingLabelType {
  ParsingLabelType_Road = 0;
  ParsingLabelType_LaneMarks = 1;
  // bla bla bla
  ParsingLabelType_Invalid = 255;
}

message ScanPoints {
  repeated Point pts_cam_gnd = 1;  // simulation for camera fov ray length
  repeated float ray_angles = 2;   // if fov rays is compressed, describe ray angle
  repeated int32 property = 3;     // for each fov ray point
                                   // describe what kind of obstacle stops fov ray
  optional int32 cam_id = 4;       //
  repeated Point pts_vcs = 5;      // position in vcs
  repeated Point pts_img = 6;      // position in image
}

message Box3DRaw {
  required ObstacleRaw percept = 1;
  required Box3D box = 2;
}

message Box3DRaws {
  optional int32 cam_id = 1;
  repeated Box3DRaw box_3d = 2;
}

message Skeleton {
  optional int32 id = 1;
  repeated SkeletonPoint skeleton = 2;
}

message SkeletonRaw {
  required ObstacleRaw percept = 1;
  repeated SkeletonPoint skeleton = 2;
}

message SkeletonRaws {
  optional int32 cam_id = 1;
  repeated SkeletonRaw skeleton_raw = 2;
}

// Freespace Result, will be Deprecated
message FreeSpaceResult {
  repeated Point contour = 1;
  optional Image raw = 2;
  optional Rect raw_roi = 3;
  optional int32 cam_id = 4;
}

// we can reproduct a 3x3 Matrix(and its inverse)
// convert points between image space and ground space
message CameraMatrix {
  repeated float mat_gnd2img = 1;  // 3x3
  repeated float mat_img2gnd = 2;  // 3x3
  repeated float mat_vcsgnd2img = 3;  // 3x3
  repeated float mat_img2vcsgnd = 4;  // 3x3
}

message DistortParam {
  repeated float param = 1;
}
message VCSParam {
  repeated float rotation = 1;     // rotation relative to x, y, z axis
  repeated float translation = 2;  // translation
}

enum CameraType {
  CameraType_PinHole = 0;
  CameraType_FishEye = 1;
}

// Camera Parameters
message CameraParam {
  required float focal_u = 1;
  required float focal_v = 2;
  required float center_u = 3;
  required float center_v = 4;
  required float camera_x = 5;
  required float camera_y = 6;
  required float camera_z = 7;
  required float pitch = 8;
  required float yaw = 9;
  required float roll = 10;
  
  optional int32 type = 11 [default = 0];
  optional float fov = 12;
  
  optional DistortParam distort = 20;
  optional VCSParam vcs = 21; 
  
  optional CameraMatrix mat = 30;
}

message MotionFrame {  
  required float speed = 1;          // km/h, vehicle speed
  optional float acc = 2;            // m/s^2, acceleration in vehicle forward direction
  required float yaw_rate = 3;       // rad/s, yaw rate in side direction
                                     // (vehicle right side is positive)
  required int64 time_stamp = 4;
  optional float turning_radius = 5; // unit:m  +: turn right; -: turn left
  optional bool is_stable = 6;
}

message OdometryFrame {
  required float x = 1;
  required float y = 2;
  required float yaw = 3;
  required float speed = 4;
  required float yaw_rate = 5;
  required int64 time_stamp = 6;
}

enum HighwayLocateAlighType {
  HWLAlignType_Center = 0;
  HWLAlignType_Left = 1;
  HWLAlignType_Right = 2;
}

message HighwayLocate {
  optional float dist_to_left = 1;
  optional float dist_to_right = 2;
  optional int32 left_lane_count = 3;
  optional int32 right_lane_count = 4;
  optional int32 align = 5;
  optional int32 cam_id = 6;
}

enum DataType {
  DATA_IMG = 0;
  DATA_PARSING = 1;
  DATA_RADAR = 2;
}

message DataDescriptor {
  optional string type = 1;
  optional int32  proto_index = 2;
}

message SerializedData {
  required string proto_name = 1;
  repeated bytes  proto = 2;
  optional string data_type = 3;
}

message OnlineCaliCamStatus {
  // camera calibration status
  enum CamStatus {
    CAM_STATUS_DISABLE = 0;
    CAM_STATUS_ENABLE = 1;
    CAM_STATUS_FINISH = 2;
    CAM_STATUS_PITCH_OK = 4;
    CAM_STATUS_YAW_OK = 8;
    CAM_STATUS_ROLL_OK = 16;
    CAM_STATUS_NOT_SURPPORT = 32;
  };
  
  required int32 cam_id = 1;
  required int32 status = 2;
  
  optional float pitch_final = 3;
  optional float yaw_final = 4;
  optional float roll_final = 5;
}

message OnlineCaliStatus {
  required bool enable = 1;
  repeated OnlineCaliCamStatus status_cams = 2;
}

// [END messages]
